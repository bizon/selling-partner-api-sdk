/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller\'s Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BalanceListing } from '../models';
// @ts-ignore
import type { BankAccount } from '../models';
// @ts-ignore
import type { BankAccountListing } from '../models';
// @ts-ignore
import type { CreateTransactionResponse } from '../models';
// @ts-ignore
import type { DeleteTransferSchedule } from '../models';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { Transaction } from '../models';
// @ts-ignore
import type { TransactionInitiationRequest } from '../models';
// @ts-ignore
import type { TransactionListing } from '../models';
// @ts-ignore
import type { TransferRatePreview } from '../models';
// @ts-ignore
import type { TransferSchedule } from '../models';
// @ts-ignore
import type { TransferScheduleListing } from '../models';
// @ts-ignore
import type { TransferScheduleRequest } from '../models';
/**
 * SellerWalletApi - axios parameter creator
 */
export const SellerWalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a transaction request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transaction request from Amazon SW account to another customer provided account
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransactionInitiationRequest} body Defines the actual payload of the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransactionInitiationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destAccountDigitalSignature' is not null or undefined
            assertParamExists('createTransaction', 'destAccountDigitalSignature', destAccountDigitalSignature)
            // verify required parameter 'amountDigitalSignature' is not null or undefined
            assertParamExists('createTransaction', 'amountDigitalSignature', amountDigitalSignature)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('createTransaction', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createTransaction', 'body', body)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (destAccountDigitalSignature != null) {
                localVarHeaderParameter['destAccountDigitalSignature'] = String(destAccountDigitalSignature);
            }
            if (amountDigitalSignature != null) {
                localVarHeaderParameter['amountDigitalSignature'] = String(amountDigitalSignature);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a transfer schedule request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transfer schedule request from Amazon SW account to another customer provided account
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransferScheduleRequest} body Defines the actual payload of the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransferSchedule: async (destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransferScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destAccountDigitalSignature' is not null or undefined
            assertParamExists('createTransferSchedule', 'destAccountDigitalSignature', destAccountDigitalSignature)
            // verify required parameter 'amountDigitalSignature' is not null or undefined
            assertParamExists('createTransferSchedule', 'amountDigitalSignature', amountDigitalSignature)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('createTransferSchedule', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createTransferSchedule', 'body', body)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferSchedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (destAccountDigitalSignature != null) {
                localVarHeaderParameter['destAccountDigitalSignature'] = String(destAccountDigitalSignature);
            }
            if (amountDigitalSignature != null) {
                localVarHeaderParameter['amountDigitalSignature'] = String(amountDigitalSignature);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
         * @summary Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
         * @param {string} transferScheduleId A unique reference ID for a scheduled transfer.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleTransaction: async (transferScheduleId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferScheduleId' is not null or undefined
            assertParamExists('deleteScheduleTransaction', 'transferScheduleId', transferScheduleId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('deleteScheduleTransaction', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}`
                .replace(`{${"transferScheduleId"}}`, encodeURIComponent(String(transferScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a Seller Wallet bank account by Amazon account identifier.
         * @summary Find particular Amazon SW account by Amazon account identifier
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccount', 'accountId', accountId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getAccount', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transaction
         * @summary Find particular Amazon SW account transaction by Amazon transaction identifier
         * @param {string} transactionId ID of the Amazon SW transaction
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (transactionId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getTransaction', 'transactionId', transactionId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getTransaction', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of potential fees on a transaction based on the source and destination country currency code
         * @summary Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
         * @param {string} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
         * @param {string} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
         * @param {string} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
         * @param {string} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
         * @param {number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferPreview: async (sourceCountryCode: string, sourceCurrencyCode: string, destinationCountryCode: string, destinationCurrencyCode: string, baseAmount: number, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceCountryCode' is not null or undefined
            assertParamExists('getTransferPreview', 'sourceCountryCode', sourceCountryCode)
            // verify required parameter 'sourceCurrencyCode' is not null or undefined
            assertParamExists('getTransferPreview', 'sourceCurrencyCode', sourceCurrencyCode)
            // verify required parameter 'destinationCountryCode' is not null or undefined
            assertParamExists('getTransferPreview', 'destinationCountryCode', destinationCountryCode)
            // verify required parameter 'destinationCurrencyCode' is not null or undefined
            assertParamExists('getTransferPreview', 'destinationCurrencyCode', destinationCurrencyCode)
            // verify required parameter 'baseAmount' is not null or undefined
            assertParamExists('getTransferPreview', 'baseAmount', baseAmount)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getTransferPreview', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceCountryCode !== undefined) {
                localVarQueryParameter['sourceCountryCode'] = sourceCountryCode;
            }

            if (sourceCurrencyCode !== undefined) {
                localVarQueryParameter['sourceCurrencyCode'] = sourceCurrencyCode;
            }

            if (destinationCountryCode !== undefined) {
                localVarQueryParameter['destinationCountryCode'] = destinationCountryCode;
            }

            if (destinationCurrencyCode !== undefined) {
                localVarQueryParameter['destinationCurrencyCode'] = destinationCurrencyCode;
            }

            if (baseAmount !== undefined) {
                localVarQueryParameter['baseAmount'] = baseAmount;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a particular Amazon Seller Wallet account transfer schedule.
         * @summary Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
         * @param {string} transferScheduleId The schedule ID of the Amazon Seller Wallet transfer.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferSchedule: async (transferScheduleId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferScheduleId' is not null or undefined
            assertParamExists('getTransferSchedule', 'transferScheduleId', transferScheduleId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getTransferSchedule', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferSchedules/{transferScheduleId}`
                .replace(`{${"transferScheduleId"}}`, encodeURIComponent(String(transferScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the balance in a given Seller Wallet bank account.
         * @summary Find balance in particular Amazon SW account by Amazon account identifier
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountBalances: async (accountId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listAccountBalances', 'accountId', accountId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listAccountBalances', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/accounts/{accountId}/balance`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of transactions for a given Seller Wallet bank account.
         * @summary The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [nextPageToken] Pagination token to retrieve a specific page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions: async (accountId: string, marketplaceId: string, nextPageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listAccountTransactions', 'accountId', accountId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listAccountTransactions', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Seller Wallet accounts for a seller.
         * @summary Get all Amazon SW accounts for the seller
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: async (marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listAccounts', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve transfer schedules of a Seller Wallet bank account.
         * @summary The API will return all the transfer schedules for a given Amazon SW account
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [nextPageToken] Pagination token to retrieve a specific page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransferSchedules: async (accountId: string, marketplaceId: string, nextPageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('listTransferSchedules', 'accountId', accountId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listTransferSchedules', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferSchedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transfer belonging to the updated scheduled transfer request
         * @summary Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransferSchedule} body Defines the actual payload of the scheduled transfer request that is to be updated. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransferSchedule: async (destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransferSchedule, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destAccountDigitalSignature' is not null or undefined
            assertParamExists('updateTransferSchedule', 'destAccountDigitalSignature', destAccountDigitalSignature)
            // verify required parameter 'amountDigitalSignature' is not null or undefined
            assertParamExists('updateTransferSchedule', 'amountDigitalSignature', amountDigitalSignature)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('updateTransferSchedule', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTransferSchedule', 'body', body)
            const localVarPath = `/finances/transfers/wallet/2024-03-01/transferSchedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (destAccountDigitalSignature != null) {
                localVarHeaderParameter['destAccountDigitalSignature'] = String(destAccountDigitalSignature);
            }
            if (amountDigitalSignature != null) {
                localVarHeaderParameter['amountDigitalSignature'] = String(amountDigitalSignature);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellerWalletApi - functional programming interface
 */
export const SellerWalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SellerWalletApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a transaction request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transaction request from Amazon SW account to another customer provided account
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransactionInitiationRequest} body Defines the actual payload of the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransactionInitiationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(destAccountDigitalSignature, amountDigitalSignature, marketplaceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.createTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a transfer schedule request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transfer schedule request from Amazon SW account to another customer provided account
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransferScheduleRequest} body Defines the actual payload of the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransferSchedule(destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransferScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransferSchedule(destAccountDigitalSignature, amountDigitalSignature, marketplaceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.createTransferSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
         * @summary Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
         * @param {string} transferScheduleId A unique reference ID for a scheduled transfer.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduleTransaction(transferScheduleId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTransferSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduleTransaction(transferScheduleId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.deleteScheduleTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a Seller Wallet bank account by Amazon account identifier.
         * @summary Find particular Amazon SW account by Amazon account identifier
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(accountId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(accountId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.getAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a transaction
         * @summary Find particular Amazon SW account transaction by Amazon transaction identifier
         * @param {string} transactionId ID of the Amazon SW transaction
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(transactionId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(transactionId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.getTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns list of potential fees on a transaction based on the source and destination country currency code
         * @summary Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
         * @param {string} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
         * @param {string} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
         * @param {string} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
         * @param {string} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
         * @param {number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransferPreview(sourceCountryCode: string, sourceCurrencyCode: string, destinationCountryCode: string, destinationCurrencyCode: string, baseAmount: number, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRatePreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransferPreview(sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.getTransferPreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Find a particular Amazon Seller Wallet account transfer schedule.
         * @summary Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
         * @param {string} transferScheduleId The schedule ID of the Amazon Seller Wallet transfer.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransferSchedule(transferScheduleId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransferSchedule(transferScheduleId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.getTransferSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the balance in a given Seller Wallet bank account.
         * @summary Find balance in particular Amazon SW account by Amazon account identifier
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountBalances(accountId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountBalances(accountId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.listAccountBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of transactions for a given Seller Wallet bank account.
         * @summary The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [nextPageToken] Pagination token to retrieve a specific page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountTransactions(accountId: string, marketplaceId: string, nextPageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountTransactions(accountId, marketplaceId, nextPageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.listAccountTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Seller Wallet accounts for a seller.
         * @summary Get all Amazon SW accounts for the seller
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccounts(marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccounts(marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.listAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve transfer schedules of a Seller Wallet bank account.
         * @summary The API will return all the transfer schedules for a given Amazon SW account
         * @param {string} accountId ID of the Amazon SW account
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [nextPageToken] Pagination token to retrieve a specific page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransferSchedules(accountId: string, marketplaceId: string, nextPageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferScheduleListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransferSchedules(accountId, marketplaceId, nextPageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.listTransferSchedules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a transfer belonging to the updated scheduled transfer request
         * @summary Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
         * @param {string} destAccountDigitalSignature Digital signature for the destination bank account details.
         * @param {string} amountDigitalSignature Digital signature for the source currency transaction amount.
         * @param {string} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {TransferSchedule} body Defines the actual payload of the scheduled transfer request that is to be updated. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransferSchedule(destAccountDigitalSignature: string, amountDigitalSignature: string, marketplaceId: string, body: TransferSchedule, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransferSchedule(destAccountDigitalSignature, amountDigitalSignature, marketplaceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerWalletApi.updateTransferSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SellerWalletApi - factory interface
 */
export const SellerWalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SellerWalletApiFp(configuration)
    return {
        /**
         * Create a transaction request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transaction request from Amazon SW account to another customer provided account
         * @param {SellerWalletApiCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(requestParameters: SellerWalletApiCreateTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateTransactionResponse> {
            return localVarFp.createTransaction(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a transfer schedule request from a Seller Wallet account to another customer-provided account.
         * @summary Create a transfer schedule request from Amazon SW account to another customer provided account
         * @param {SellerWalletApiCreateTransferScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransferSchedule(requestParameters: SellerWalletApiCreateTransferScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransferSchedule> {
            return localVarFp.createTransferSchedule(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
         * @summary Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
         * @param {SellerWalletApiDeleteScheduleTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleTransaction(requestParameters: SellerWalletApiDeleteScheduleTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteTransferSchedule> {
            return localVarFp.deleteScheduleTransaction(requestParameters.transferScheduleId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a Seller Wallet bank account by Amazon account identifier.
         * @summary Find particular Amazon SW account by Amazon account identifier
         * @param {SellerWalletApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: SellerWalletApiGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccount> {
            return localVarFp.getAccount(requestParameters.accountId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transaction
         * @summary Find particular Amazon SW account transaction by Amazon transaction identifier
         * @param {SellerWalletApiGetTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(requestParameters: SellerWalletApiGetTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.getTransaction(requestParameters.transactionId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of potential fees on a transaction based on the source and destination country currency code
         * @summary Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
         * @param {SellerWalletApiGetTransferPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferPreview(requestParameters: SellerWalletApiGetTransferPreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransferRatePreview> {
            return localVarFp.getTransferPreview(requestParameters.sourceCountryCode, requestParameters.sourceCurrencyCode, requestParameters.destinationCountryCode, requestParameters.destinationCurrencyCode, requestParameters.baseAmount, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Find a particular Amazon Seller Wallet account transfer schedule.
         * @summary Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
         * @param {SellerWalletApiGetTransferScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferSchedule(requestParameters: SellerWalletApiGetTransferScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransferSchedule> {
            return localVarFp.getTransferSchedule(requestParameters.transferScheduleId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the balance in a given Seller Wallet bank account.
         * @summary Find balance in particular Amazon SW account by Amazon account identifier
         * @param {SellerWalletApiListAccountBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountBalances(requestParameters: SellerWalletApiListAccountBalancesRequest, options?: RawAxiosRequestConfig): AxiosPromise<BalanceListing> {
            return localVarFp.listAccountBalances(requestParameters.accountId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of transactions for a given Seller Wallet bank account.
         * @summary The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
         * @param {SellerWalletApiListAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions(requestParameters: SellerWalletApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionListing> {
            return localVarFp.listAccountTransactions(requestParameters.accountId, requestParameters.marketplaceId, requestParameters.nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Seller Wallet accounts for a seller.
         * @summary Get all Amazon SW accounts for the seller
         * @param {SellerWalletApiListAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(requestParameters: SellerWalletApiListAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccountListing> {
            return localVarFp.listAccounts(requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve transfer schedules of a Seller Wallet bank account.
         * @summary The API will return all the transfer schedules for a given Amazon SW account
         * @param {SellerWalletApiListTransferSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransferSchedules(requestParameters: SellerWalletApiListTransferSchedulesRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransferScheduleListing> {
            return localVarFp.listTransferSchedules(requestParameters.accountId, requestParameters.marketplaceId, requestParameters.nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transfer belonging to the updated scheduled transfer request
         * @summary Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
         * @param {SellerWalletApiUpdateTransferScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransferSchedule(requestParameters: SellerWalletApiUpdateTransferScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransferSchedule> {
            return localVarFp.updateTransferSchedule(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTransaction operation in SellerWalletApi.
 */
export interface SellerWalletApiCreateTransactionRequest {
    /**
     * Digital signature for the destination bank account details.
     */
    readonly destAccountDigitalSignature: string

    /**
     * Digital signature for the source currency transaction amount.
     */
    readonly amountDigitalSignature: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string

    /**
     * Defines the actual payload of the request
     */
    readonly body: TransactionInitiationRequest
}

/**
 * Request parameters for createTransferSchedule operation in SellerWalletApi.
 */
export interface SellerWalletApiCreateTransferScheduleRequest {
    /**
     * Digital signature for the destination bank account details.
     */
    readonly destAccountDigitalSignature: string

    /**
     * Digital signature for the source currency transaction amount.
     */
    readonly amountDigitalSignature: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string

    /**
     * Defines the actual payload of the request
     */
    readonly body: TransferScheduleRequest
}

/**
 * Request parameters for deleteScheduleTransaction operation in SellerWalletApi.
 */
export interface SellerWalletApiDeleteScheduleTransactionRequest {
    /**
     * A unique reference ID for a scheduled transfer.
     */
    readonly transferScheduleId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getAccount operation in SellerWalletApi.
 */
export interface SellerWalletApiGetAccountRequest {
    /**
     * ID of the Amazon SW account
     */
    readonly accountId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getTransaction operation in SellerWalletApi.
 */
export interface SellerWalletApiGetTransactionRequest {
    /**
     * ID of the Amazon SW transaction
     */
    readonly transactionId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getTransferPreview operation in SellerWalletApi.
 */
export interface SellerWalletApiGetTransferPreviewRequest {
    /**
     * Represents 2 character country code of source transaction account in ISO 3166 standard format.
     */
    readonly sourceCountryCode: string

    /**
     * Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
     */
    readonly sourceCurrencyCode: string

    /**
     * Represents 2 character country code of destination transaction account in ISO 3166 standard format.
     */
    readonly destinationCountryCode: string

    /**
     * Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
     */
    readonly destinationCurrencyCode: string

    /**
     * Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
     */
    readonly baseAmount: number

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getTransferSchedule operation in SellerWalletApi.
 */
export interface SellerWalletApiGetTransferScheduleRequest {
    /**
     * The schedule ID of the Amazon Seller Wallet transfer.
     */
    readonly transferScheduleId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listAccountBalances operation in SellerWalletApi.
 */
export interface SellerWalletApiListAccountBalancesRequest {
    /**
     * ID of the Amazon SW account
     */
    readonly accountId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listAccountTransactions operation in SellerWalletApi.
 */
export interface SellerWalletApiListAccountTransactionsRequest {
    /**
     * ID of the Amazon SW account
     */
    readonly accountId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string

    /**
     * Pagination token to retrieve a specific page of results.
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for listAccounts operation in SellerWalletApi.
 */
export interface SellerWalletApiListAccountsRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which items are returned.
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listTransferSchedules operation in SellerWalletApi.
 */
export interface SellerWalletApiListTransferSchedulesRequest {
    /**
     * ID of the Amazon SW account
     */
    readonly accountId: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string

    /**
     * Pagination token to retrieve a specific page of results.
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for updateTransferSchedule operation in SellerWalletApi.
 */
export interface SellerWalletApiUpdateTransferScheduleRequest {
    /**
     * Digital signature for the destination bank account details.
     */
    readonly destAccountDigitalSignature: string

    /**
     * Digital signature for the source currency transaction amount.
     */
    readonly amountDigitalSignature: string

    /**
     * The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId: string

    /**
     * Defines the actual payload of the scheduled transfer request that is to be updated. 
     */
    readonly body: TransferSchedule
}

/**
 * SellerWalletApi - object-oriented interface
 */
export class SellerWalletApi extends BaseAPI {
    /**
     * Create a transaction request from a Seller Wallet account to another customer-provided account.
     * @summary Create a transaction request from Amazon SW account to another customer provided account
     * @param {SellerWalletApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createTransaction(requestParameters: SellerWalletApiCreateTransactionRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).createTransaction(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a transfer schedule request from a Seller Wallet account to another customer-provided account.
     * @summary Create a transfer schedule request from Amazon SW account to another customer provided account
     * @param {SellerWalletApiCreateTransferScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createTransferSchedule(requestParameters: SellerWalletApiCreateTransferScheduleRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).createTransferSchedule(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account.
     * @summary Delete a transaction request that is scheduled from Amazon Seller Wallet account to another customer-provided account
     * @param {SellerWalletApiDeleteScheduleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteScheduleTransaction(requestParameters: SellerWalletApiDeleteScheduleTransactionRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).deleteScheduleTransaction(requestParameters.transferScheduleId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a Seller Wallet bank account by Amazon account identifier.
     * @summary Find particular Amazon SW account by Amazon account identifier
     * @param {SellerWalletApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getAccount(requestParameters: SellerWalletApiGetAccountRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).getAccount(requestParameters.accountId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transaction
     * @summary Find particular Amazon SW account transaction by Amazon transaction identifier
     * @param {SellerWalletApiGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getTransaction(requestParameters: SellerWalletApiGetTransactionRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).getTransaction(requestParameters.transactionId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of potential fees on a transaction based on the source and destination country currency code
     * @summary Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
     * @param {SellerWalletApiGetTransferPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getTransferPreview(requestParameters: SellerWalletApiGetTransferPreviewRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).getTransferPreview(requestParameters.sourceCountryCode, requestParameters.sourceCurrencyCode, requestParameters.destinationCountryCode, requestParameters.destinationCurrencyCode, requestParameters.baseAmount, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find a particular Amazon Seller Wallet account transfer schedule.
     * @summary Find particular Amazon Seller Wallet account transfer schedule by Amazon transfer schedule identifier
     * @param {SellerWalletApiGetTransferScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getTransferSchedule(requestParameters: SellerWalletApiGetTransferScheduleRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).getTransferSchedule(requestParameters.transferScheduleId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the balance in a given Seller Wallet bank account.
     * @summary Find balance in particular Amazon SW account by Amazon account identifier
     * @param {SellerWalletApiListAccountBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccountBalances(requestParameters: SellerWalletApiListAccountBalancesRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).listAccountBalances(requestParameters.accountId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     * @summary The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * @param {SellerWalletApiListAccountTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccountTransactions(requestParameters: SellerWalletApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).listAccountTransactions(requestParameters.accountId, requestParameters.marketplaceId, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Seller Wallet accounts for a seller.
     * @summary Get all Amazon SW accounts for the seller
     * @param {SellerWalletApiListAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccounts(requestParameters: SellerWalletApiListAccountsRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).listAccounts(requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve transfer schedules of a Seller Wallet bank account.
     * @summary The API will return all the transfer schedules for a given Amazon SW account
     * @param {SellerWalletApiListTransferSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listTransferSchedules(requestParameters: SellerWalletApiListTransferSchedulesRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).listTransferSchedules(requestParameters.accountId, requestParameters.marketplaceId, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transfer belonging to the updated scheduled transfer request
     * @summary Update a transfer schedule information. Only fields (i.e; transferScheduleInformation, paymentPreference, transferScheduleStatus) in the request body can be updated.
     * @param {SellerWalletApiUpdateTransferScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateTransferSchedule(requestParameters: SellerWalletApiUpdateTransferScheduleRequest, options?: RawAxiosRequestConfig) {
        return SellerWalletApiFp(this.configuration).updateTransferSchedule(requestParameters.destAccountDigitalSignature, requestParameters.amountDigitalSignature, requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

