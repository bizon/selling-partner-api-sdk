/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data
 * The Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data provides programmatic access to vendor direct fulfillment sandbox test data.
 *
 * The version of the OpenAPI document: 2021-10-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorList } from '../models';
// @ts-ignore
import { GenerateOrderScenarioRequest } from '../models';
// @ts-ignore
import { TransactionReference } from '../models';
/**
 * VendorDFSandboxApi - axios parameter creator
 * @export
 */
export const VendorDFSandboxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderScenarios: async (body: GenerateOrderScenarioRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateOrderScenarios', 'body', body)
            const localVarPath = `/vendor/directFulfillment/sandbox/2021-10-28/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorDFSandboxApi - functional programming interface
 * @export
 */
export const VendorDFSandboxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorDFSandboxApiAxiosParamCreator(configuration)
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateOrderScenarios(body: GenerateOrderScenarioRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionReference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateOrderScenarios(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorDFSandboxApi - factory interface
 * @export
 */
export const VendorDFSandboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorDFSandboxApiFp(configuration)
    return {
        /**
         * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
         * @param {GenerateOrderScenarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderScenarios(body: GenerateOrderScenarioRequest, options?: any): AxiosPromise<TransactionReference> {
            return localVarFp.generateOrderScenarios(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateOrderScenarios operation in VendorDFSandboxApi.
 * @export
 * @interface VendorDFSandboxApiGenerateOrderScenariosRequest
 */
export interface VendorDFSandboxApiGenerateOrderScenariosRequest {
    /**
     * 
     * @type {GenerateOrderScenarioRequest}
     * @memberof VendorDFSandboxApiGenerateOrderScenarios
     */
    readonly body: GenerateOrderScenarioRequest
}

/**
 * VendorDFSandboxApi - object-oriented interface
 * @export
 * @class VendorDFSandboxApi
 * @extends {BaseAPI}
 */
export class VendorDFSandboxApi extends BaseAPI {
    /**
     * Submits a request to generate test order data for Vendor Direct Fulfillment API entities.
     * @param {VendorDFSandboxApiGenerateOrderScenariosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorDFSandboxApi
     */
    public generateOrderScenarios(requestParameters: VendorDFSandboxApiGenerateOrderScenariosRequest, options?: any) {
        return VendorDFSandboxApiFp(this.configuration).generateOrderScenarios(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
