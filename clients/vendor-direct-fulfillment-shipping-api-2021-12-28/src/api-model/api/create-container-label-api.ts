/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor\'s shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateContainerLabelRequest } from '../models';
// @ts-ignore
import type { CreateContainerLabelResponse } from '../models';
// @ts-ignore
import type { ErrorList } from '../models';
/**
 * CreateContainerLabelApi - axios parameter creator
 * @export
 */
export const CreateContainerLabelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a container (pallet) label for the associated shipment package.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createContainerLabel
         * @param {CreateContainerLabelRequest} body Request body containing the container label data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerLabel: async (body: CreateContainerLabelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createContainerLabel', 'body', body)
            const localVarPath = `/vendor/directFulfillment/shipping/2021-12-28/containerLabel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateContainerLabelApi - functional programming interface
 * @export
 */
export const CreateContainerLabelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateContainerLabelApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a container (pallet) label for the associated shipment package.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createContainerLabel
         * @param {CreateContainerLabelRequest} body Request body containing the container label data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContainerLabel(body: CreateContainerLabelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContainerLabelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContainerLabel(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CreateContainerLabelApi.createContainerLabel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CreateContainerLabelApi - factory interface
 * @export
 */
export const CreateContainerLabelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateContainerLabelApiFp(configuration)
    return {
        /**
         * Creates a container (pallet) label for the associated shipment package.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createContainerLabel
         * @param {CreateContainerLabelApiCreateContainerLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerLabel(requestParameters: CreateContainerLabelApiCreateContainerLabelRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateContainerLabelResponse> {
            return localVarFp.createContainerLabel(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContainerLabel operation in CreateContainerLabelApi.
 * @export
 * @interface CreateContainerLabelApiCreateContainerLabelRequest
 */
export interface CreateContainerLabelApiCreateContainerLabelRequest {
    /**
     * Request body containing the container label data.
     * @type {CreateContainerLabelRequest}
     * @memberof CreateContainerLabelApiCreateContainerLabel
     */
    readonly body: CreateContainerLabelRequest
}

/**
 * CreateContainerLabelApi - object-oriented interface
 * @export
 * @class CreateContainerLabelApi
 * @extends {BaseAPI}
 */
export class CreateContainerLabelApi extends BaseAPI {
    /**
     * Creates a container (pallet) label for the associated shipment package.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary createContainerLabel
     * @param {CreateContainerLabelApiCreateContainerLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateContainerLabelApi
     */
    public createContainerLabel(requestParameters: CreateContainerLabelApiCreateContainerLabelRequest, options?: RawAxiosRequestConfig) {
        return CreateContainerLabelApiFp(this.configuration).createContainerLabel(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

