/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Product Type Definitions
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-type-api-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorList } from '../models';
// @ts-ignore
import { ProductTypeDefinition } from '../models';
// @ts-ignore
import { ProductTypeList } from '../models';
/**
 * DefinitionsApi - axios parameter creator
 * @export
 */
export const DefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} productType The Amazon product type name.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.
         * @param {string} [sellerId] A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
         * @param {string} [productTypeVersion] The version of the Amazon product type to retrieve. Defaults to \&quot;LATEST\&quot;,. Prerelease versions of product type definitions may be retrieved with \&quot;RELEASE_CANDIDATE\&quot;. If no prerelease version is currently available, the \&quot;LATEST\&quot; live version will be provided.
         * @param {GetDefinitionsProductTypeRequirementsEnum} [requirements] The name of the requirements set to retrieve requirements for.
         * @param {GetDefinitionsProductTypeRequirementsEnforcedEnum} [requirementsEnforced] Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
         * @param {GetDefinitionsProductTypeLocaleEnum} [locale] Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionsProductType: async (productType: string, marketplaceIds: Array<string>, sellerId?: string, productTypeVersion?: string, requirements?: GetDefinitionsProductTypeRequirementsEnum, requirementsEnforced?: GetDefinitionsProductTypeRequirementsEnforcedEnum, locale?: GetDefinitionsProductTypeLocaleEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productType' is not null or undefined
            assertParamExists('getDefinitionsProductType', 'productType', productType)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getDefinitionsProductType', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/definitions/2020-09-01/productTypes/{productType}`
                .replace(`{${"productType"}}`, encodeURIComponent(String(productType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sellerId !== undefined) {
                localVarQueryParameter['sellerId'] = sellerId;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (productTypeVersion !== undefined) {
                localVarQueryParameter['productTypeVersion'] = productTypeVersion;
            }

            if (requirements !== undefined) {
                localVarQueryParameter['requirements'] = requirements;
            }

            if (requirementsEnforced !== undefined) {
                localVarQueryParameter['requirementsEnforced'] = requirementsEnforced;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {Array<string>} [keywords] A comma-delimited list of keywords to search product types by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDefinitionsProductTypes: async (marketplaceIds: Array<string>, keywords?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('searchDefinitionsProductTypes', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/definitions/2020-09-01/productTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords.join(COLLECTION_FORMATS.csv);
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefinitionsApi - functional programming interface
 * @export
 */
export const DefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} productType The Amazon product type name.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.
         * @param {string} [sellerId] A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
         * @param {string} [productTypeVersion] The version of the Amazon product type to retrieve. Defaults to \&quot;LATEST\&quot;,. Prerelease versions of product type definitions may be retrieved with \&quot;RELEASE_CANDIDATE\&quot;. If no prerelease version is currently available, the \&quot;LATEST\&quot; live version will be provided.
         * @param {GetDefinitionsProductTypeRequirementsEnum} [requirements] The name of the requirements set to retrieve requirements for.
         * @param {GetDefinitionsProductTypeRequirementsEnforcedEnum} [requirementsEnforced] Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
         * @param {GetDefinitionsProductTypeLocaleEnum} [locale] Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionsProductType(productType: string, marketplaceIds: Array<string>, sellerId?: string, productTypeVersion?: string, requirements?: GetDefinitionsProductTypeRequirementsEnum, requirementsEnforced?: GetDefinitionsProductTypeRequirementsEnforcedEnum, locale?: GetDefinitionsProductTypeLocaleEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinitionsProductType(productType, marketplaceIds, sellerId, productTypeVersion, requirements, requirementsEnforced, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {Array<string>} [keywords] A comma-delimited list of keywords to search product types by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDefinitionsProductTypes(marketplaceIds: Array<string>, keywords?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchDefinitionsProductTypes(marketplaceIds, keywords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefinitionsApi - factory interface
 * @export
 */
export const DefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefinitionsApiFp(configuration)
    return {
        /**
         * Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DefinitionsApiGetDefinitionsProductTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionsProductType(requestParameters: DefinitionsApiGetDefinitionsProductTypeRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTypeDefinition> {
            return localVarFp.getDefinitionsProductType(requestParameters.productType, requestParameters.marketplaceIds, requestParameters.sellerId, requestParameters.productTypeVersion, requestParameters.requirements, requestParameters.requirementsEnforced, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DefinitionsApiSearchDefinitionsProductTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDefinitionsProductTypes(requestParameters: DefinitionsApiSearchDefinitionsProductTypesRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTypeList> {
            return localVarFp.searchDefinitionsProductTypes(requestParameters.marketplaceIds, requestParameters.keywords, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDefinitionsProductType operation in DefinitionsApi.
 * @export
 * @interface DefinitionsApiGetDefinitionsProductTypeRequest
 */
export interface DefinitionsApiGetDefinitionsProductTypeRequest {
    /**
     * The Amazon product type name.
     * @type {string}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly productType: string

    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request. Note: This parameter is limited to one marketplaceId at this time.
     * @type {Array<string>}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly marketplaceIds: Array<string>

    /**
     * A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
     * @type {string}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly sellerId?: string

    /**
     * The version of the Amazon product type to retrieve. Defaults to \&quot;LATEST\&quot;,. Prerelease versions of product type definitions may be retrieved with \&quot;RELEASE_CANDIDATE\&quot;. If no prerelease version is currently available, the \&quot;LATEST\&quot; live version will be provided.
     * @type {string}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly productTypeVersion?: string

    /**
     * The name of the requirements set to retrieve requirements for.
     * @type {'LISTING' | 'LISTING_PRODUCT_ONLY' | 'LISTING_OFFER_ONLY'}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly requirements?: GetDefinitionsProductTypeRequirementsEnum

    /**
     * Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
     * @type {'ENFORCED' | 'NOT_ENFORCED'}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly requirementsEnforced?: GetDefinitionsProductTypeRequirementsEnforcedEnum

    /**
     * Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
     * @type {'DEFAULT' | 'ar' | 'ar_AE' | 'de' | 'de_DE' | 'en' | 'en_AE' | 'en_AU' | 'en_CA' | 'en_GB' | 'en_IN' | 'en_SG' | 'en_US' | 'es' | 'es_ES' | 'es_MX' | 'es_US' | 'fr' | 'fr_CA' | 'fr_FR' | 'it' | 'it_IT' | 'ja' | 'ja_JP' | 'nl' | 'nl_NL' | 'pl' | 'pl_PL' | 'pt' | 'pt_BR' | 'pt_PT' | 'sv' | 'sv_SE' | 'tr' | 'tr_TR' | 'zh' | 'zh_CN' | 'zh_TW'}
     * @memberof DefinitionsApiGetDefinitionsProductType
     */
    readonly locale?: GetDefinitionsProductTypeLocaleEnum
}

/**
 * Request parameters for searchDefinitionsProductTypes operation in DefinitionsApi.
 * @export
 * @interface DefinitionsApiSearchDefinitionsProductTypesRequest
 */
export interface DefinitionsApiSearchDefinitionsProductTypesRequest {
    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof DefinitionsApiSearchDefinitionsProductTypes
     */
    readonly marketplaceIds: Array<string>

    /**
     * A comma-delimited list of keywords to search product types by.
     * @type {Array<string>}
     * @memberof DefinitionsApiSearchDefinitionsProductTypes
     */
    readonly keywords?: Array<string>
}

/**
 * DefinitionsApi - object-oriented interface
 * @export
 * @class DefinitionsApi
 * @extends {BaseAPI}
 */
export class DefinitionsApi extends BaseAPI {
    /**
     * Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {DefinitionsApiGetDefinitionsProductTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public getDefinitionsProductType(requestParameters: DefinitionsApiGetDefinitionsProductTypeRequest, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).getDefinitionsProductType(requestParameters.productType, requestParameters.marketplaceIds, requestParameters.sellerId, requestParameters.productTypeVersion, requestParameters.requirements, requestParameters.requirementsEnforced, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {DefinitionsApiSearchDefinitionsProductTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefinitionsApi
     */
    public searchDefinitionsProductTypes(requestParameters: DefinitionsApiSearchDefinitionsProductTypesRequest, options?: AxiosRequestConfig) {
        return DefinitionsApiFp(this.configuration).searchDefinitionsProductTypes(requestParameters.marketplaceIds, requestParameters.keywords, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetDefinitionsProductTypeRequirementsEnum = {
    Listing: 'LISTING',
    ListingProductOnly: 'LISTING_PRODUCT_ONLY',
    ListingOfferOnly: 'LISTING_OFFER_ONLY'
} as const;
export type GetDefinitionsProductTypeRequirementsEnum = typeof GetDefinitionsProductTypeRequirementsEnum[keyof typeof GetDefinitionsProductTypeRequirementsEnum];
/**
 * @export
 */
export const GetDefinitionsProductTypeRequirementsEnforcedEnum = {
    Enforced: 'ENFORCED',
    NotEnforced: 'NOT_ENFORCED'
} as const;
export type GetDefinitionsProductTypeRequirementsEnforcedEnum = typeof GetDefinitionsProductTypeRequirementsEnforcedEnum[keyof typeof GetDefinitionsProductTypeRequirementsEnforcedEnum];
/**
 * @export
 */
export const GetDefinitionsProductTypeLocaleEnum = {
    Default: 'DEFAULT',
    Ar: 'ar',
    ArAe: 'ar_AE',
    De: 'de',
    DeDe: 'de_DE',
    En: 'en',
    EnAe: 'en_AE',
    EnAu: 'en_AU',
    EnCa: 'en_CA',
    EnGb: 'en_GB',
    EnIn: 'en_IN',
    EnSg: 'en_SG',
    EnUs: 'en_US',
    Es: 'es',
    EsEs: 'es_ES',
    EsMx: 'es_MX',
    EsUs: 'es_US',
    Fr: 'fr',
    FrCa: 'fr_CA',
    FrFr: 'fr_FR',
    It: 'it',
    ItIt: 'it_IT',
    Ja: 'ja',
    JaJp: 'ja_JP',
    Nl: 'nl',
    NlNl: 'nl_NL',
    Pl: 'pl',
    PlPl: 'pl_PL',
    Pt: 'pt',
    PtBr: 'pt_BR',
    PtPt: 'pt_PT',
    Sv: 'sv',
    SvSe: 'sv_SE',
    Tr: 'tr',
    TrTr: 'tr_TR',
    Zh: 'zh',
    ZhCn: 'zh_CN',
    ZhTw: 'zh_TW'
} as const;
export type GetDefinitionsProductTypeLocaleEnum = typeof GetDefinitionsProductTypeLocaleEnum[keyof typeof GetDefinitionsProductTypeLocaleEnum];
