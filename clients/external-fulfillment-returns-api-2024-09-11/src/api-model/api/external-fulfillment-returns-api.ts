/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Amazon External Fulfillment Return Item Processing
 * You can use the Amazon External Fulfillment Return Item Processing API to retrieve, track, and process return items through Amazon\'s External Fulfillment returns management system.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { Return } from '../models';
// @ts-ignore
import type { ReturnsResponse } from '../models';
/**
 * ExternalFulfillmentReturnsApi - axios parameter creator
 */
export const ExternalFulfillmentReturnsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the return item with the specified ID.
         * @param {string} returnId The ID of the return item you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReturn: async (returnId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnId' is not null or undefined
            assertParamExists('getReturn', 'returnId', returnId)
            const localVarPath = `/externalFulfillment/2024-09-11/returns/{returnId}`
                .replace(`{${"returnId"}}`, encodeURIComponent(String(returnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of return items. You can filter results by location, RMA ID, status, or time.
         * @param {string} [returnLocationId] The SmartConnect location ID of the location from which you want to retrieve return items.
         * @param {string} [rmaId] The RMA ID of the return items you want to list.
         * @param {ListReturnsStatusEnum} [status] The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status.
         * @param {string} [reverseTrackingId] The reverse tracking ID of the return items you want to list.
         * @param {string} [createdSince] Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [createdUntil] Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [lastUpdatedSince] Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
         * @param {string} [lastUpdatedUntil] Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
         * @param {string} [lastUpdatedAfter] DEPRECATED. Use the &#x60;createdSince&#x60; parameter.
         * @param {string} [lastUpdatedBefore] DEPRECATED. Use the &#x60;createdUntil&#x60; parameter.
         * @param {number} [maxResults] The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100
         * @param {string} [nextToken] A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReturns: async (returnLocationId?: string, rmaId?: string, status?: ListReturnsStatusEnum, reverseTrackingId?: string, createdSince?: string, createdUntil?: string, lastUpdatedSince?: string, lastUpdatedUntil?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, maxResults?: number, nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/externalFulfillment/2024-09-11/returns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnLocationId !== undefined) {
                localVarQueryParameter['returnLocationId'] = returnLocationId;
            }

            if (rmaId !== undefined) {
                localVarQueryParameter['rmaId'] = rmaId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (reverseTrackingId !== undefined) {
                localVarQueryParameter['reverseTrackingId'] = reverseTrackingId;
            }

            if (createdSince !== undefined) {
                localVarQueryParameter['createdSince'] = (createdSince as any instanceof Date) ?
                    (createdSince as any).toISOString() :
                    createdSince;
            }

            if (createdUntil !== undefined) {
                localVarQueryParameter['createdUntil'] = (createdUntil as any instanceof Date) ?
                    (createdUntil as any).toISOString() :
                    createdUntil;
            }

            if (lastUpdatedSince !== undefined) {
                localVarQueryParameter['lastUpdatedSince'] = (lastUpdatedSince as any instanceof Date) ?
                    (lastUpdatedSince as any).toISOString() :
                    lastUpdatedSince;
            }

            if (lastUpdatedUntil !== undefined) {
                localVarQueryParameter['lastUpdatedUntil'] = (lastUpdatedUntil as any instanceof Date) ?
                    (lastUpdatedUntil as any).toISOString() :
                    lastUpdatedUntil;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = (lastUpdatedAfter as any instanceof Date) ?
                    (lastUpdatedAfter as any).toISOString() :
                    lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = (lastUpdatedBefore as any instanceof Date) ?
                    (lastUpdatedBefore as any).toISOString() :
                    lastUpdatedBefore;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalFulfillmentReturnsApi - functional programming interface
 */
export const ExternalFulfillmentReturnsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalFulfillmentReturnsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the return item with the specified ID.
         * @param {string} returnId The ID of the return item you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReturn(returnId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Return>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReturn(returnId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentReturnsApi.getReturn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of return items. You can filter results by location, RMA ID, status, or time.
         * @param {string} [returnLocationId] The SmartConnect location ID of the location from which you want to retrieve return items.
         * @param {string} [rmaId] The RMA ID of the return items you want to list.
         * @param {ListReturnsStatusEnum} [status] The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status.
         * @param {string} [reverseTrackingId] The reverse tracking ID of the return items you want to list.
         * @param {string} [createdSince] Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [createdUntil] Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [lastUpdatedSince] Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
         * @param {string} [lastUpdatedUntil] Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
         * @param {string} [lastUpdatedAfter] DEPRECATED. Use the &#x60;createdSince&#x60; parameter.
         * @param {string} [lastUpdatedBefore] DEPRECATED. Use the &#x60;createdUntil&#x60; parameter.
         * @param {number} [maxResults] The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100
         * @param {string} [nextToken] A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReturns(returnLocationId?: string, rmaId?: string, status?: ListReturnsStatusEnum, reverseTrackingId?: string, createdSince?: string, createdUntil?: string, lastUpdatedSince?: string, lastUpdatedUntil?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, maxResults?: number, nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturnsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReturns(returnLocationId, rmaId, status, reverseTrackingId, createdSince, createdUntil, lastUpdatedSince, lastUpdatedUntil, lastUpdatedAfter, lastUpdatedBefore, maxResults, nextToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentReturnsApi.listReturns']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalFulfillmentReturnsApi - factory interface
 */
export const ExternalFulfillmentReturnsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalFulfillmentReturnsApiFp(configuration)
    return {
        /**
         * Retrieve the return item with the specified ID.
         * @param {ExternalFulfillmentReturnsApiGetReturnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReturn(requestParameters: ExternalFulfillmentReturnsApiGetReturnRequest, options?: RawAxiosRequestConfig): AxiosPromise<Return> {
            return localVarFp.getReturn(requestParameters.returnId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of return items. You can filter results by location, RMA ID, status, or time.
         * @param {ExternalFulfillmentReturnsApiListReturnsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReturns(requestParameters: ExternalFulfillmentReturnsApiListReturnsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReturnsResponse> {
            return localVarFp.listReturns(requestParameters.returnLocationId, requestParameters.rmaId, requestParameters.status, requestParameters.reverseTrackingId, requestParameters.createdSince, requestParameters.createdUntil, requestParameters.lastUpdatedSince, requestParameters.lastUpdatedUntil, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getReturn operation in ExternalFulfillmentReturnsApi.
 */
export interface ExternalFulfillmentReturnsApiGetReturnRequest {
    /**
     * The ID of the return item you want.
     */
    readonly returnId: string
}

/**
 * Request parameters for listReturns operation in ExternalFulfillmentReturnsApi.
 */
export interface ExternalFulfillmentReturnsApiListReturnsRequest {
    /**
     * The SmartConnect location ID of the location from which you want to retrieve return items.
     */
    readonly returnLocationId?: string

    /**
     * The RMA ID of the return items you want to list.
     */
    readonly rmaId?: string

    /**
     * The status of return items you want to list. You can retrieve all new return items with the &#x60;CREATED&#x60; status.
     */
    readonly status?: ListReturnsStatusEnum

    /**
     * The reverse tracking ID of the return items you want to list.
     */
    readonly reverseTrackingId?: string

    /**
     * Return items created after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    readonly createdSince?: string

    /**
     * Return items created before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    readonly createdUntil?: string

    /**
     * Return items updated after the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
     */
    readonly lastUpdatedSince?: string

    /**
     * Return items whose most recent update is before the specified date are included in the response. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. If you supply this parameter, you must also supply &#x60;returnLocationId&#x60; and &#x60;status&#x60;.
     */
    readonly lastUpdatedUntil?: string

    /**
     * DEPRECATED. Use the &#x60;createdSince&#x60; parameter.
     */
    readonly lastUpdatedAfter?: string

    /**
     * DEPRECATED. Use the &#x60;createdUntil&#x60; parameter.
     */
    readonly lastUpdatedBefore?: string

    /**
     * The number of return items you want to include in the response.  **Default:** 10  **Maximum:** 100
     */
    readonly maxResults?: number

    /**
     * A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     */
    readonly nextToken?: string
}

/**
 * ExternalFulfillmentReturnsApi - object-oriented interface
 */
export class ExternalFulfillmentReturnsApi extends BaseAPI {
    /**
     * Retrieve the return item with the specified ID.
     * @param {ExternalFulfillmentReturnsApiGetReturnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getReturn(requestParameters: ExternalFulfillmentReturnsApiGetReturnRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentReturnsApiFp(this.configuration).getReturn(requestParameters.returnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of return items. You can filter results by location, RMA ID, status, or time.
     * @param {ExternalFulfillmentReturnsApiListReturnsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listReturns(requestParameters: ExternalFulfillmentReturnsApiListReturnsRequest = {}, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentReturnsApiFp(this.configuration).listReturns(requestParameters.returnLocationId, requestParameters.rmaId, requestParameters.status, requestParameters.reverseTrackingId, requestParameters.createdSince, requestParameters.createdUntil, requestParameters.lastUpdatedSince, requestParameters.lastUpdatedUntil, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
}

export const ListReturnsStatusEnum = {
    Created: 'CREATED',
    CarrierNotifiedToPickUpFromCustomer: 'CARRIER_NOTIFIED_TO_PICK_UP_FROM_CUSTOMER',
    CarrierOutForPickUpFromCustomer: 'CARRIER_OUT_FOR_PICK_UP_FROM_CUSTOMER',
    CustomerCancelledPickUp: 'CUSTOMER_CANCELLED_PICK_UP',
    CustomerRescheduledPickUp: 'CUSTOMER_RESCHEDULED_PICK_UP',
    PickedFromCustomer: 'PICKED_FROM_CUSTOMER',
    InTransit: 'IN_TRANSIT',
    OutForDelivery: 'OUT_FOR_DELIVERY',
    Delivered: 'DELIVERED',
    Replanned: 'REPLANNED',
    CustomerDroppedOff: 'CUSTOMER_DROPPED_OFF',
    PartiallyProcessed: 'PARTIALLY_PROCESSED',
    Processed: 'PROCESSED',
    Rejected: 'REJECTED',
    Cancelled: 'CANCELLED'
} as const;
export type ListReturnsStatusEnum = typeof ListReturnsStatusEnum[keyof typeof ListReturnsStatusEnum];
