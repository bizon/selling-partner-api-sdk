/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { InboundEligibility } from '../models';
// @ts-ignore
import type { InboundOrder } from '../models';
// @ts-ignore
import type { InboundOrderCreationData } from '../models';
// @ts-ignore
import type { InboundOrderReference } from '../models';
// @ts-ignore
import type { InboundPackages } from '../models';
// @ts-ignore
import type { InboundShipment } from '../models';
// @ts-ignore
import type { InventoryListing } from '../models';
// @ts-ignore
import type { ShipmentLabels } from '../models';
// @ts-ignore
import type { ShipmentListing } from '../models';
// @ts-ignore
import type { TransportationDetails } from '../models';
/**
 * AmazonWarehousingAndDistributionApi - axios parameter creator
 * @export
 */
export const AmazonWarehousingAndDistributionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an AWD Inbound order and its associated shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order you want to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInbound: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('cancelInbound', 'orderId', orderId)
            const localVarPath = `/awd/2024-05-09/inboundOrders/{orderId}/cancellation`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for ineligible packages.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InboundPackages} body Represents the packages you want to inbound.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkInboundEligibility: async (body: InboundPackages, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('checkInboundEligibility', 'body', body)
            const localVarPath = `/awd/2024-05-09/inboundEligibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms an AWD inbound order in `DRAFT` status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to confirm.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmInbound: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('confirmInbound', 'orderId', orderId)
            const localVarPath = `/awd/2024-05-09/inboundOrders/{orderId}/confirmation`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one shipment per order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InboundOrderCreationData} body Payload for creating an inbound order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInbound: async (body: InboundOrderCreationData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createInbound', 'body', body)
            const localVarPath = `/awd/2024-05-09/inboundOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an AWD inbound order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbound: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getInbound', 'orderId', orderId)
            const localVarPath = `/awd/2024-05-09/inboundOrders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {string} shipmentId ID for the shipment. A shipment contains the cases being inbounded.
         * @param {GetInboundShipmentSkuQuantitiesEnum} [skuQuantities] If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipment: async (shipmentId: string, skuQuantities?: GetInboundShipmentSkuQuantitiesEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getInboundShipment', 'shipmentId', shipmentId)
            const localVarPath = `/awd/2024-05-09/inboundShipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skuQuantities !== undefined) {
                localVarQueryParameter['skuQuantities'] = skuQuantities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label status is `GENERATED`, then the label URL is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId ID for the shipment.
         * @param {GetInboundShipmentLabelsPageTypeEnum} [pageType] Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;.
         * @param {GetInboundShipmentLabelsFormatTypeEnum} [formatType] The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipmentLabels: async (shipmentId: string, pageType?: GetInboundShipmentLabelsPageTypeEnum, formatType?: GetInboundShipmentLabelsFormatTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getInboundShipmentLabels', 'shipmentId', shipmentId)
            const localVarPath = `/awd/2024-05-09/inboundShipments/{shipmentId}/labels`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageType !== undefined) {
                localVarQueryParameter['pageType'] = pageType;
            }

            if (formatType !== undefined) {
                localVarQueryParameter['formatType'] = formatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListInboundShipmentsSortByEnum} [sortBy] Field to sort results by. By default, the response will be sorted by UPDATED_AT.
         * @param {ListInboundShipmentsSortOrderEnum} [sortOrder] Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order.
         * @param {ListInboundShipmentsShipmentStatusEnum} [shipmentStatus] Filter by inbound shipment status.
         * @param {string} [updatedAfter] List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [updatedBefore] List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {string} [nextToken] A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundShipments: async (sortBy?: ListInboundShipmentsSortByEnum, sortOrder?: ListInboundShipmentsSortOrderEnum, shipmentStatus?: ListInboundShipmentsShipmentStatusEnum, updatedAfter?: string, updatedBefore?: string, maxResults?: number, nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/awd/2024-05-09/inboundShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (shipmentStatus !== undefined) {
                localVarQueryParameter['shipmentStatus'] = shipmentStatus;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updatedBefore'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} [sku] Filter by seller or merchant SKU for the item.
         * @param {ListInventorySortOrderEnum} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {ListInventoryDetailsEnum} [details] Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
         * @param {string} [nextToken] A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory: async (sku?: string, sortOrder?: ListInventorySortOrderEnum, details?: ListInventoryDetailsEnum, nextToken?: string, maxResults?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/awd/2024-05-09/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an AWD inbound order that is in `DRAFT` status and not yet confirmed. Use this operation to update the `packagesToInbound`, `originAddress` and `preferences` attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to update.
         * @param {InboundOrder} body Represents an AWD inbound order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInbound: async (orderId: string, body: InboundOrder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateInbound', 'orderId', orderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateInbound', 'body', body)
            const localVarPath = `/awd/2024-05-09/inboundOrders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates transport details for an AWD shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment ID.
         * @param {TransportationDetails} body Transportation details for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundShipmentTransportDetails: async (shipmentId: string, body: TransportationDetails, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateInboundShipmentTransportDetails', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateInboundShipmentTransportDetails', 'body', body)
            const localVarPath = `/awd/2024-05-09/inboundShipments/{shipmentId}/transport`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmazonWarehousingAndDistributionApi - functional programming interface
 * @export
 */
export const AmazonWarehousingAndDistributionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmazonWarehousingAndDistributionApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an AWD Inbound order and its associated shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order you want to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInbound(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInbound(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.cancelInbound']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for ineligible packages.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InboundPackages} body Represents the packages you want to inbound.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkInboundEligibility(body: InboundPackages, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundEligibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkInboundEligibility(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.checkInboundEligibility']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms an AWD inbound order in `DRAFT` status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to confirm.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmInbound(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmInbound(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.confirmInbound']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one shipment per order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InboundOrderCreationData} body Payload for creating an inbound order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInbound(body: InboundOrderCreationData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundOrderReference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInbound(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.createInbound']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves an AWD inbound order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbound(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbound(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.getInbound']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {string} shipmentId ID for the shipment. A shipment contains the cases being inbounded.
         * @param {GetInboundShipmentSkuQuantitiesEnum} [skuQuantities] If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundShipment(shipmentId: string, skuQuantities?: GetInboundShipmentSkuQuantitiesEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundShipment(shipmentId, skuQuantities, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.getInboundShipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label status is `GENERATED`, then the label URL is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId ID for the shipment.
         * @param {GetInboundShipmentLabelsPageTypeEnum} [pageType] Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;.
         * @param {GetInboundShipmentLabelsFormatTypeEnum} [formatType] The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundShipmentLabels(shipmentId: string, pageType?: GetInboundShipmentLabelsPageTypeEnum, formatType?: GetInboundShipmentLabelsFormatTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentLabels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundShipmentLabels(shipmentId, pageType, formatType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.getInboundShipmentLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListInboundShipmentsSortByEnum} [sortBy] Field to sort results by. By default, the response will be sorted by UPDATED_AT.
         * @param {ListInboundShipmentsSortOrderEnum} [sortOrder] Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order.
         * @param {ListInboundShipmentsShipmentStatusEnum} [shipmentStatus] Filter by inbound shipment status.
         * @param {string} [updatedAfter] List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [updatedBefore] List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {string} [nextToken] A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundShipments(sortBy?: ListInboundShipmentsSortByEnum, sortOrder?: ListInboundShipmentsSortOrderEnum, shipmentStatus?: ListInboundShipmentsShipmentStatusEnum, updatedAfter?: string, updatedBefore?: string, maxResults?: number, nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundShipments(sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.listInboundShipments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} [sku] Filter by seller or merchant SKU for the item.
         * @param {ListInventorySortOrderEnum} [sortOrder] Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
         * @param {ListInventoryDetailsEnum} [details] Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
         * @param {string} [nextToken] A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {number} [maxResults] Maximum number of results to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInventory(sku?: string, sortOrder?: ListInventorySortOrderEnum, details?: ListInventoryDetailsEnum, nextToken?: string, maxResults?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInventory(sku, sortOrder, details, nextToken, maxResults, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.listInventory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an AWD inbound order that is in `DRAFT` status and not yet confirmed. Use this operation to update the `packagesToInbound`, `originAddress` and `preferences` attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} orderId The ID of the inbound order that you want to update.
         * @param {InboundOrder} body Represents an AWD inbound order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInbound(orderId: string, body: InboundOrder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInbound(orderId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.updateInbound']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates transport details for an AWD shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment ID.
         * @param {TransportationDetails} body Transportation details for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInboundShipmentTransportDetails(shipmentId: string, body: TransportationDetails, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInboundShipmentTransportDetails(shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmazonWarehousingAndDistributionApi.updateInboundShipmentTransportDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AmazonWarehousingAndDistributionApi - factory interface
 * @export
 */
export const AmazonWarehousingAndDistributionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmazonWarehousingAndDistributionApiFp(configuration)
    return {
        /**
         * Cancels an AWD Inbound order and its associated shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiCancelInboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInbound(requestParameters: AmazonWarehousingAndDistributionApiCancelInboundRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelInbound(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for ineligible packages.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkInboundEligibility(requestParameters: AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundEligibility> {
            return localVarFp.checkInboundEligibility(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms an AWD inbound order in `DRAFT` status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiConfirmInboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmInbound(requestParameters: AmazonWarehousingAndDistributionApiConfirmInboundRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.confirmInbound(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one shipment per order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiCreateInboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInbound(requestParameters: AmazonWarehousingAndDistributionApiCreateInboundRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundOrderReference> {
            return localVarFp.createInbound(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an AWD inbound order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiGetInboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbound(requestParameters: AmazonWarehousingAndDistributionApiGetInboundRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundOrder> {
            return localVarFp.getInbound(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {AmazonWarehousingAndDistributionApiGetInboundShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipment(requestParameters: AmazonWarehousingAndDistributionApiGetInboundShipmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundShipment> {
            return localVarFp.getInboundShipment(requestParameters.shipmentId, requestParameters.skuQuantities, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label status is `GENERATED`, then the label URL is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundShipmentLabels(requestParameters: AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentLabels> {
            return localVarFp.getInboundShipmentLabels(requestParameters.shipmentId, requestParameters.pageType, requestParameters.formatType, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiListInboundShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundShipments(requestParameters: AmazonWarehousingAndDistributionApiListInboundShipmentsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentListing> {
            return localVarFp.listInboundShipments(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.shipmentStatus, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiListInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInventory(requestParameters: AmazonWarehousingAndDistributionApiListInventoryRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<InventoryListing> {
            return localVarFp.listInventory(requestParameters.sku, requestParameters.sortOrder, requestParameters.details, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an AWD inbound order that is in `DRAFT` status and not yet confirmed. Use this operation to update the `packagesToInbound`, `originAddress` and `preferences` attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiUpdateInboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInbound(requestParameters: AmazonWarehousingAndDistributionApiUpdateInboundRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInbound(requestParameters.orderId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates transport details for an AWD shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundShipmentTransportDetails(requestParameters: AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInboundShipmentTransportDetails(requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelInbound operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiCancelInboundRequest
 */
export interface AmazonWarehousingAndDistributionApiCancelInboundRequest {
    /**
     * The ID of the inbound order you want to cancel.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiCancelInbound
     */
    readonly orderId: string
}

/**
 * Request parameters for checkInboundEligibility operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest
 */
export interface AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest {
    /**
     * Represents the packages you want to inbound.
     * @type {InboundPackages}
     * @memberof AmazonWarehousingAndDistributionApiCheckInboundEligibility
     */
    readonly body: InboundPackages
}

/**
 * Request parameters for confirmInbound operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiConfirmInboundRequest
 */
export interface AmazonWarehousingAndDistributionApiConfirmInboundRequest {
    /**
     * The ID of the inbound order that you want to confirm.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiConfirmInbound
     */
    readonly orderId: string
}

/**
 * Request parameters for createInbound operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiCreateInboundRequest
 */
export interface AmazonWarehousingAndDistributionApiCreateInboundRequest {
    /**
     * Payload for creating an inbound order.
     * @type {InboundOrderCreationData}
     * @memberof AmazonWarehousingAndDistributionApiCreateInbound
     */
    readonly body: InboundOrderCreationData
}

/**
 * Request parameters for getInbound operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiGetInboundRequest
 */
export interface AmazonWarehousingAndDistributionApiGetInboundRequest {
    /**
     * The ID of the inbound order that you want to retrieve.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiGetInbound
     */
    readonly orderId: string
}

/**
 * Request parameters for getInboundShipment operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiGetInboundShipmentRequest
 */
export interface AmazonWarehousingAndDistributionApiGetInboundShipmentRequest {
    /**
     * ID for the shipment. A shipment contains the cases being inbounded.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiGetInboundShipment
     */
    readonly shipmentId: string

    /**
     * If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities
     * @type {'SHOW' | 'HIDE'}
     * @memberof AmazonWarehousingAndDistributionApiGetInboundShipment
     */
    readonly skuQuantities?: GetInboundShipmentSkuQuantitiesEnum
}

/**
 * Request parameters for getInboundShipmentLabels operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest
 */
export interface AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest {
    /**
     * ID for the shipment.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiGetInboundShipmentLabels
     */
    readonly shipmentId: string

    /**
     * Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;.
     * @type {'THERMAL_NONPCP' | 'PLAIN_PAPER' | 'LETTER_6'}
     * @memberof AmazonWarehousingAndDistributionApiGetInboundShipmentLabels
     */
    readonly pageType?: GetInboundShipmentLabelsPageTypeEnum

    /**
     * The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;.
     * @type {'PDF'}
     * @memberof AmazonWarehousingAndDistributionApiGetInboundShipmentLabels
     */
    readonly formatType?: GetInboundShipmentLabelsFormatTypeEnum
}

/**
 * Request parameters for listInboundShipments operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiListInboundShipmentsRequest
 */
export interface AmazonWarehousingAndDistributionApiListInboundShipmentsRequest {
    /**
     * Field to sort results by. By default, the response will be sorted by UPDATED_AT.
     * @type {'UPDATED_AT' | 'CREATED_AT'}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly sortBy?: ListInboundShipmentsSortByEnum

    /**
     * Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order.
     * @type {'ASCENDING' | 'DESCENDING'}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly sortOrder?: ListInboundShipmentsSortOrderEnum

    /**
     * Filter by inbound shipment status.
     * @type {'CREATED' | 'SHIPPED' | 'IN_TRANSIT' | 'RECEIVING' | 'DELIVERED' | 'CLOSED' | 'CANCELLED'}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly shipmentStatus?: ListInboundShipmentsShipmentStatusEnum

    /**
     * List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly updatedAfter?: string

    /**
     * List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly updatedBefore?: string

    /**
     * Maximum number of results to return.
     * @type {number}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly maxResults?: number

    /**
     * A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiListInboundShipments
     */
    readonly nextToken?: string
}

/**
 * Request parameters for listInventory operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiListInventoryRequest
 */
export interface AmazonWarehousingAndDistributionApiListInventoryRequest {
    /**
     * Filter by seller or merchant SKU for the item.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiListInventory
     */
    readonly sku?: string

    /**
     * Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order.
     * @type {'ASCENDING' | 'DESCENDING'}
     * @memberof AmazonWarehousingAndDistributionApiListInventory
     */
    readonly sortOrder?: ListInventorySortOrderEnum

    /**
     * Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals.
     * @type {'SHOW' | 'HIDE'}
     * @memberof AmazonWarehousingAndDistributionApiListInventory
     */
    readonly details?: ListInventoryDetailsEnum

    /**
     * A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiListInventory
     */
    readonly nextToken?: string

    /**
     * Maximum number of results to return.
     * @type {number}
     * @memberof AmazonWarehousingAndDistributionApiListInventory
     */
    readonly maxResults?: number
}

/**
 * Request parameters for updateInbound operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiUpdateInboundRequest
 */
export interface AmazonWarehousingAndDistributionApiUpdateInboundRequest {
    /**
     * The ID of the inbound order that you want to update.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiUpdateInbound
     */
    readonly orderId: string

    /**
     * Represents an AWD inbound order.
     * @type {InboundOrder}
     * @memberof AmazonWarehousingAndDistributionApiUpdateInbound
     */
    readonly body: InboundOrder
}

/**
 * Request parameters for updateInboundShipmentTransportDetails operation in AmazonWarehousingAndDistributionApi.
 * @export
 * @interface AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest
 */
export interface AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest {
    /**
     * The shipment ID.
     * @type {string}
     * @memberof AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetails
     */
    readonly shipmentId: string

    /**
     * Transportation details for the shipment.
     * @type {TransportationDetails}
     * @memberof AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetails
     */
    readonly body: TransportationDetails
}

/**
 * AmazonWarehousingAndDistributionApi - object-oriented interface
 * @export
 * @class AmazonWarehousingAndDistributionApi
 * @extends {BaseAPI}
 */
export class AmazonWarehousingAndDistributionApi extends BaseAPI {
    /**
     * Cancels an AWD Inbound order and its associated shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiCancelInboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public cancelInbound(requestParameters: AmazonWarehousingAndDistributionApiCancelInboundRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).cancelInbound(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for ineligible packages.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public checkInboundEligibility(requestParameters: AmazonWarehousingAndDistributionApiCheckInboundEligibilityRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).checkInboundEligibility(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms an AWD inbound order in `DRAFT` status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiConfirmInboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public confirmInbound(requestParameters: AmazonWarehousingAndDistributionApiConfirmInboundRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).confirmInbound(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one shipment per order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiCreateInboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public createInbound(requestParameters: AmazonWarehousingAndDistributionApiCreateInboundRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).createInbound(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an AWD inbound order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiGetInboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public getInbound(requestParameters: AmazonWarehousingAndDistributionApiGetInboundRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).getInbound(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an AWD inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {AmazonWarehousingAndDistributionApiGetInboundShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public getInboundShipment(requestParameters: AmazonWarehousingAndDistributionApiGetInboundShipmentRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).getInboundShipment(requestParameters.shipmentId, requestParameters.skuQuantities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label status is `GENERATED`, then the label URL is available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public getInboundShipmentLabels(requestParameters: AmazonWarehousingAndDistributionApiGetInboundShipmentLabelsRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).getInboundShipmentLabels(requestParameters.shipmentId, requestParameters.pageType, requestParameters.formatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiListInboundShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public listInboundShipments(requestParameters: AmazonWarehousingAndDistributionApiListInboundShipmentsRequest = {}, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).listInboundShipments(requestParameters.sortBy, requestParameters.sortOrder, requestParameters.shipmentStatus, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists AWD inventory associated with a merchant with the ability to apply optional filters.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiListInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public listInventory(requestParameters: AmazonWarehousingAndDistributionApiListInventoryRequest = {}, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).listInventory(requestParameters.sku, requestParameters.sortOrder, requestParameters.details, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an AWD inbound order that is in `DRAFT` status and not yet confirmed. Use this operation to update the `packagesToInbound`, `originAddress` and `preferences` attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiUpdateInboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public updateInbound(requestParameters: AmazonWarehousingAndDistributionApiUpdateInboundRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).updateInbound(requestParameters.orderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates transport details for an AWD shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonWarehousingAndDistributionApi
     */
    public updateInboundShipmentTransportDetails(requestParameters: AmazonWarehousingAndDistributionApiUpdateInboundShipmentTransportDetailsRequest, options?: RawAxiosRequestConfig) {
        return AmazonWarehousingAndDistributionApiFp(this.configuration).updateInboundShipmentTransportDetails(requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetInboundShipmentSkuQuantitiesEnum = {
    Show: 'SHOW',
    Hide: 'HIDE'
} as const;
export type GetInboundShipmentSkuQuantitiesEnum = typeof GetInboundShipmentSkuQuantitiesEnum[keyof typeof GetInboundShipmentSkuQuantitiesEnum];
/**
 * @export
 */
export const GetInboundShipmentLabelsPageTypeEnum = {
    ThermalNonpcp: 'THERMAL_NONPCP',
    PlainPaper: 'PLAIN_PAPER',
    Letter6: 'LETTER_6'
} as const;
export type GetInboundShipmentLabelsPageTypeEnum = typeof GetInboundShipmentLabelsPageTypeEnum[keyof typeof GetInboundShipmentLabelsPageTypeEnum];
/**
 * @export
 */
export const GetInboundShipmentLabelsFormatTypeEnum = {
    Pdf: 'PDF'
} as const;
export type GetInboundShipmentLabelsFormatTypeEnum = typeof GetInboundShipmentLabelsFormatTypeEnum[keyof typeof GetInboundShipmentLabelsFormatTypeEnum];
/**
 * @export
 */
export const ListInboundShipmentsSortByEnum = {
    UpdatedAt: 'UPDATED_AT',
    CreatedAt: 'CREATED_AT'
} as const;
export type ListInboundShipmentsSortByEnum = typeof ListInboundShipmentsSortByEnum[keyof typeof ListInboundShipmentsSortByEnum];
/**
 * @export
 */
export const ListInboundShipmentsSortOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type ListInboundShipmentsSortOrderEnum = typeof ListInboundShipmentsSortOrderEnum[keyof typeof ListInboundShipmentsSortOrderEnum];
/**
 * @export
 */
export const ListInboundShipmentsShipmentStatusEnum = {
    Created: 'CREATED',
    Shipped: 'SHIPPED',
    InTransit: 'IN_TRANSIT',
    Receiving: 'RECEIVING',
    Delivered: 'DELIVERED',
    Closed: 'CLOSED',
    Cancelled: 'CANCELLED'
} as const;
export type ListInboundShipmentsShipmentStatusEnum = typeof ListInboundShipmentsShipmentStatusEnum[keyof typeof ListInboundShipmentsShipmentStatusEnum];
/**
 * @export
 */
export const ListInventorySortOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type ListInventorySortOrderEnum = typeof ListInventorySortOrderEnum[keyof typeof ListInventorySortOrderEnum];
/**
 * @export
 */
export const ListInventoryDetailsEnum = {
    Show: 'SHOW',
    Hide: 'HIDE'
} as const;
export type ListInventoryDetailsEnum = typeof ListInventoryDetailsEnum[keyof typeof ListInventoryDetailsEnum];
