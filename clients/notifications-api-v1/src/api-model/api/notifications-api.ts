/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner\'s business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDestinationRequest } from '../models';
// @ts-ignore
import { CreateDestinationResponse } from '../models';
// @ts-ignore
import { CreateSubscriptionRequest } from '../models';
// @ts-ignore
import { CreateSubscriptionResponse } from '../models';
// @ts-ignore
import { DeleteDestinationResponse } from '../models';
// @ts-ignore
import { DeleteSubscriptionByIdResponse } from '../models';
// @ts-ignore
import { GetDestinationResponse } from '../models';
// @ts-ignore
import { GetDestinationsResponse } from '../models';
// @ts-ignore
import { GetSubscriptionByIdResponse } from '../models';
// @ts-ignore
import { GetSubscriptionResponse } from '../models';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a destination resource to receive notifications. The createDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateDestinationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination: async (body: CreateDestinationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDestination', 'body', body)
            const localVarPath = `/notifications/v1/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the createDestination operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {CreateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', body: CreateSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationType' is not null or undefined
            assertParamExists('createSubscription', 'notificationType', notificationType)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createSubscription', 'body', body)
            const localVarPath = `/notifications/v1/subscriptions/{notificationType}`
                .replace(`{${"notificationType"}}`, encodeURIComponent(String(notificationType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the destination that you specify. The deleteDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier for the destination that you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination: async (destinationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('deleteDestination', 'destinationId', destinationId)
            const localVarPath = `/notifications/v1/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The deleteSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to delete.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionById: async (subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('deleteSubscriptionById', 'subscriptionId', subscriptionId)
            // verify required parameter 'notificationType' is not null or undefined
            assertParamExists('deleteSubscriptionById', 'notificationType', notificationType)
            const localVarPath = `/notifications/v1/subscriptions/{notificationType}/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"notificationType"}}`, encodeURIComponent(String(notificationType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the destination that you specify. The getDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier generated when you created the destination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination: async (destinationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('getDestination', 'destinationId', destinationId)
            const localVarPath = `/notifications/v1/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about all destinations. The getDestinations API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestinations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/v1/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about subscriptions of the specified notification type. You can use this API to get subscription information when you do not have a subscription identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationType' is not null or undefined
            assertParamExists('getSubscription', 'notificationType', notificationType)
            const localVarPath = `/notifications/v1/subscriptions/{notificationType}`
                .replace(`{${"notificationType"}}`, encodeURIComponent(String(notificationType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a subscription for the specified notification type. The getSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to get.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionById: async (subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSubscriptionById', 'subscriptionId', subscriptionId)
            // verify required parameter 'notificationType' is not null or undefined
            assertParamExists('getSubscriptionById', 'notificationType', notificationType)
            const localVarPath = `/notifications/v1/subscriptions/{notificationType}/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"notificationType"}}`, encodeURIComponent(String(notificationType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a destination resource to receive notifications. The createDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateDestinationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDestination(body: CreateDestinationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDestination(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the createDestination operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {CreateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', body: CreateSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(notificationType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the destination that you specify. The deleteDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier for the destination that you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDestination(destinationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDestination(destinationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The deleteSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to delete.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptionById(subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSubscriptionByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscriptionById(subscriptionId, notificationType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the destination that you specify. The getDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier generated when you created the destination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDestination(destinationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDestination(destinationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about all destinations. The getDestinations API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDestinations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDestinationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDestinations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about subscriptions of the specified notification type. You can use this API to get subscription information when you do not have a subscription identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(notificationType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a subscription for the specified notification type. The getSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to get.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionById(subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSubscriptionByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionById(subscriptionId, notificationType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * Creates a destination resource to receive notifications. The createDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateDestinationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination(body: CreateDestinationRequest, options?: any): AxiosPromise<CreateDestinationResponse> {
            return localVarFp.createDestination(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the createDestination operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {CreateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', body: CreateSubscriptionRequest, options?: any): AxiosPromise<CreateSubscriptionResponse> {
            return localVarFp.createSubscription(notificationType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the destination that you specify. The deleteDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier for the destination that you want to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination(destinationId: string, options?: any): AxiosPromise<DeleteDestinationResponse> {
            return localVarFp.deleteDestination(destinationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The deleteSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to delete.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionById(subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): AxiosPromise<DeleteSubscriptionByIdResponse> {
            return localVarFp.deleteSubscriptionById(subscriptionId, notificationType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the destination that you specify. The getDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} destinationId The identifier generated when you created the destination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination(destinationId: string, options?: any): AxiosPromise<GetDestinationResponse> {
            return localVarFp.getDestination(destinationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about all destinations. The getDestinations API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestinations(options?: any): AxiosPromise<GetDestinationsResponse> {
            return localVarFp.getDestinations(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about subscriptions of the specified notification type. You can use this API to get subscription information when you do not have a subscription identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): AxiosPromise<GetSubscriptionResponse> {
            return localVarFp.getSubscription(notificationType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a subscription for the specified notification type. The getSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} subscriptionId The identifier for the subscription that you want to get.
         * @param {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'} notificationType The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionById(subscriptionId: string, notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE', options?: any): AxiosPromise<GetSubscriptionByIdResponse> {
            return localVarFp.getSubscriptionById(subscriptionId, notificationType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDestination operation in NotificationsApi.
 * @export
 * @interface NotificationsApiCreateDestinationRequest
 */
export interface NotificationsApiCreateDestinationRequest {
    /**
     * 
     * @type {CreateDestinationRequest}
     * @memberof NotificationsApiCreateDestination
     */
    readonly body: CreateDestinationRequest
}

/**
 * Request parameters for createSubscription operation in NotificationsApi.
 * @export
 * @interface NotificationsApiCreateSubscriptionRequest
 */
export interface NotificationsApiCreateSubscriptionRequest {
    /**
     * The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
     * @type {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'}
     * @memberof NotificationsApiCreateSubscription
     */
    readonly notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'

    /**
     * 
     * @type {CreateSubscriptionRequest}
     * @memberof NotificationsApiCreateSubscription
     */
    readonly body: CreateSubscriptionRequest
}

/**
 * Request parameters for deleteDestination operation in NotificationsApi.
 * @export
 * @interface NotificationsApiDeleteDestinationRequest
 */
export interface NotificationsApiDeleteDestinationRequest {
    /**
     * The identifier for the destination that you want to delete.
     * @type {string}
     * @memberof NotificationsApiDeleteDestination
     */
    readonly destinationId: string
}

/**
 * Request parameters for deleteSubscriptionById operation in NotificationsApi.
 * @export
 * @interface NotificationsApiDeleteSubscriptionByIdRequest
 */
export interface NotificationsApiDeleteSubscriptionByIdRequest {
    /**
     * The identifier for the subscription that you want to delete.
     * @type {string}
     * @memberof NotificationsApiDeleteSubscriptionById
     */
    readonly subscriptionId: string

    /**
     * The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
     * @type {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'}
     * @memberof NotificationsApiDeleteSubscriptionById
     */
    readonly notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'
}

/**
 * Request parameters for getDestination operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetDestinationRequest
 */
export interface NotificationsApiGetDestinationRequest {
    /**
     * The identifier generated when you created the destination.
     * @type {string}
     * @memberof NotificationsApiGetDestination
     */
    readonly destinationId: string
}

/**
 * Request parameters for getSubscription operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetSubscriptionRequest
 */
export interface NotificationsApiGetSubscriptionRequest {
    /**
     * The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
     * @type {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'}
     * @memberof NotificationsApiGetSubscription
     */
    readonly notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'
}

/**
 * Request parameters for getSubscriptionById operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetSubscriptionByIdRequest
 */
export interface NotificationsApiGetSubscriptionByIdRequest {
    /**
     * The identifier for the subscription that you want to get.
     * @type {string}
     * @memberof NotificationsApiGetSubscriptionById
     */
    readonly subscriptionId: string

    /**
     * The type of notification to which you want to subscribe.   For more information about notification types, see the Notifications API Use Case Guide.
     * @type {'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'}
     * @memberof NotificationsApiGetSubscriptionById
     */
    readonly notificationType: 'ANY_OFFER_CHANGED' | 'FEED_PROCESSING_FINISHED' | 'FBA_OUTBOUND_SHIPMENT_STATUS' | 'FEE_PROMOTION' | 'FULFILLMENT_ORDER_STATUS' | 'REPORT_PROCESSING_FINISHED' | 'BRANDED_ITEM_CONTENT_CHANGE' | 'ITEM_PRODUCT_TYPE_CHANGE' | 'LISTINGS_ITEM_STATUS_CHANGE' | 'LISTINGS_ITEM_ISSUES_CHANGE' | 'MFN_ORDER_STATUS_CHANGE' | 'B2B_ANY_OFFER_CHANGED' | 'ACCOUNT_STATUS_CHANGED' | 'EXTERNAL_FULFILLMENT_SHIPMENT_STATUS_CHANGE'
}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Creates a destination resource to receive notifications. The createDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiCreateDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public createDestination(requestParameters: NotificationsApiCreateDestinationRequest, options?: any) {
        return NotificationsApiFp(this.configuration).createDestination(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the createDestination operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public createSubscription(requestParameters: NotificationsApiCreateSubscriptionRequest, options?: any) {
        return NotificationsApiFp(this.configuration).createSubscription(requestParameters.notificationType, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the destination that you specify. The deleteDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiDeleteDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteDestination(requestParameters: NotificationsApiDeleteDestinationRequest, options?: any) {
        return NotificationsApiFp(this.configuration).deleteDestination(requestParameters.destinationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The deleteSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiDeleteSubscriptionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteSubscriptionById(requestParameters: NotificationsApiDeleteSubscriptionByIdRequest, options?: any) {
        return NotificationsApiFp(this.configuration).deleteSubscriptionById(requestParameters.subscriptionId, requestParameters.notificationType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the destination that you specify. The getDestination API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiGetDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getDestination(requestParameters: NotificationsApiGetDestinationRequest, options?: any) {
        return NotificationsApiFp(this.configuration).getDestination(requestParameters.destinationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about all destinations. The getDestinations API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getDestinations(options?: any) {
        return NotificationsApiFp(this.configuration).getDestinations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about subscriptions of the specified notification type. You can use this API to get subscription information when you do not have a subscription identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getSubscription(requestParameters: NotificationsApiGetSubscriptionRequest, options?: any) {
        return NotificationsApiFp(this.configuration).getSubscription(requestParameters.notificationType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a subscription for the specified notification type. The getSubscriptionById API is grantless. For more information, see \"Grantless operations\" in the Selling Partner API Developer Guide.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {NotificationsApiGetSubscriptionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getSubscriptionById(requestParameters: NotificationsApiGetSubscriptionByIdRequest, options?: any) {
        return NotificationsApiFp(this.configuration).getSubscriptionById(requestParameters.subscriptionId, requestParameters.notificationType, options).then((request) => request(this.axios, this.basePath));
    }
}
