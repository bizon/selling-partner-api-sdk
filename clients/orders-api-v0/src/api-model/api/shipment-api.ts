/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UpdateShipmentStatusErrorResponse } from '../models';
// @ts-ignore
import { UpdateShipmentStatusRequest } from '../models';
/**
 * ShipmentApi - axios parameter creator
 * @export
 */
export const ShipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the shipment status.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload Request to update the shipment status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus: async (orderId: string, payload: UpdateShipmentStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateShipmentStatus', 'orderId', orderId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateShipmentStatus', 'payload', payload)
            const localVarPath = `/orders/v0/orders/{orderId}/shipment`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentApi - functional programming interface
 * @export
 */
export const ShipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the shipment status.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload Request to update the shipment status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentStatus(orderId: string, payload: UpdateShipmentStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentStatus(orderId, payload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentApi - factory interface
 * @export
 */
export const ShipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentApiFp(configuration)
    return {
        /**
         * Update the shipment status.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload Request to update the shipment status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus(orderId: string, payload: UpdateShipmentStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateShipmentStatus(orderId, payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateShipmentStatus operation in ShipmentApi.
 * @export
 * @interface ShipmentApiUpdateShipmentStatusRequest
 */
export interface ShipmentApiUpdateShipmentStatusRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof ShipmentApiUpdateShipmentStatus
     */
    readonly orderId: string

    /**
     * Request to update the shipment status.
     * @type {UpdateShipmentStatusRequest}
     * @memberof ShipmentApiUpdateShipmentStatus
     */
    readonly payload: UpdateShipmentStatusRequest
}

/**
 * ShipmentApi - object-oriented interface
 * @export
 * @class ShipmentApi
 * @extends {BaseAPI}
 */
export class ShipmentApi extends BaseAPI {
    /**
     * Update the shipment status.
     * @param {ShipmentApiUpdateShipmentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public updateShipmentStatus(requestParameters: ShipmentApiUpdateShipmentStatusRequest, options?: any) {
        return ShipmentApiFp(this.configuration).updateShipmentStatus(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
}
