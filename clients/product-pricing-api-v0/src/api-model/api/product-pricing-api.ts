/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { GetItemOffersBatchRequest } from '../models';
// @ts-ignore
import { GetItemOffersBatchResponse } from '../models';
// @ts-ignore
import { GetListingOffersBatchRequest } from '../models';
// @ts-ignore
import { GetListingOffersBatchResponse } from '../models';
// @ts-ignore
import { GetOffersResponse } from '../models';
// @ts-ignore
import { GetPricingResponse } from '../models';
/**
 * ProductPricingApi - axios parameter creator
 * @export
 */
export const ProductPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetCompetitivePricingItemTypeEnum} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {GetCompetitivePricingCustomerTypeEnum} [customerType] Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing: async (marketplaceId: string, itemType: GetCompetitivePricingItemTypeEnum, asins?: Array<string>, skus?: Array<string>, customerType?: GetCompetitivePricingCustomerTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getCompetitivePricing', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('getCompetitivePricing', 'itemType', itemType)
            const localVarPath = `/products/pricing/v0/competitivePrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetItemOffersItemConditionEnum} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {GetItemOffersCustomerTypeEnum} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers: async (marketplaceId: string, itemCondition: GetItemOffersItemConditionEnum, asin: string, customerType?: GetItemOffersCustomerTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getItemOffers', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemCondition' is not null or undefined
            assertParamExists('getItemOffers', 'itemCondition', itemCondition)
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemOffers', 'asin', asin)
            const localVarPath = `/products/pricing/v0/items/{Asin}/offers`
                .replace(`{${"Asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffersBatch: async (getItemOffersBatchRequestBody: GetItemOffersBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getItemOffersBatchRequestBody' is not null or undefined
            assertParamExists('getItemOffersBatch', 'getItemOffersBatchRequestBody', getItemOffersBatchRequestBody)
            const localVarPath = `/batches/products/pricing/v0/itemOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getItemOffersBatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetListingOffersItemConditionEnum} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {GetListingOffersCustomerTypeEnum} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers: async (marketplaceId: string, itemCondition: GetListingOffersItemConditionEnum, sellerSKU: string, customerType?: GetListingOffersCustomerTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getListingOffers', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemCondition' is not null or undefined
            assertParamExists('getListingOffers', 'itemCondition', itemCondition)
            // verify required parameter 'sellerSKU' is not null or undefined
            assertParamExists('getListingOffers', 'sellerSKU', sellerSKU)
            const localVarPath = `/products/pricing/v0/listings/{SellerSKU}/offers`
                .replace(`{${"SellerSKU"}}`, encodeURIComponent(String(sellerSKU)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffersBatch: async (getListingOffersBatchRequestBody: GetListingOffersBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getListingOffersBatchRequestBody' is not null or undefined
            assertParamExists('getListingOffersBatch', 'getListingOffersBatchRequestBody', getListingOffersBatchRequestBody)
            const localVarPath = `/batches/products/pricing/v0/listingOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListingOffersBatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetPricingItemTypeEnum} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {GetPricingItemConditionEnum} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {GetPricingOfferTypeEnum} [offerType] Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing: async (marketplaceId: string, itemType: GetPricingItemTypeEnum, asins?: Array<string>, skus?: Array<string>, itemCondition?: GetPricingItemConditionEnum, offerType?: GetPricingOfferTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getPricing', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('getPricing', 'itemType', itemType)
            const localVarPath = `/products/pricing/v0/price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (offerType !== undefined) {
                localVarQueryParameter['OfferType'] = offerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductPricingApi - functional programming interface
 * @export
 */
export const ProductPricingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductPricingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetCompetitivePricingItemTypeEnum} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {GetCompetitivePricingCustomerTypeEnum} [customerType] Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitivePricing(marketplaceId: string, itemType: GetCompetitivePricingItemTypeEnum, asins?: Array<string>, skus?: Array<string>, customerType?: GetCompetitivePricingCustomerTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitivePricing(marketplaceId, itemType, asins, skus, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetItemOffersItemConditionEnum} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {GetItemOffersCustomerTypeEnum} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOffers(marketplaceId: string, itemCondition: GetItemOffersItemConditionEnum, asin: string, customerType?: GetItemOffersCustomerTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemOffers(marketplaceId, itemCondition, asin, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOffersBatch(getItemOffersBatchRequestBody: GetItemOffersBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItemOffersBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemOffersBatch(getItemOffersBatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetListingOffersItemConditionEnum} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {GetListingOffersCustomerTypeEnum} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingOffers(marketplaceId: string, itemCondition: GetListingOffersItemConditionEnum, sellerSKU: string, customerType?: GetListingOffersCustomerTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingOffers(marketplaceId, itemCondition, sellerSKU, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingOffersBatch(getListingOffersBatchRequestBody: GetListingOffersBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListingOffersBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingOffersBatch(getListingOffersBatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {GetPricingItemTypeEnum} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {GetPricingItemConditionEnum} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {GetPricingOfferTypeEnum} [offerType] Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricing(marketplaceId: string, itemType: GetPricingItemTypeEnum, asins?: Array<string>, skus?: Array<string>, itemCondition?: GetPricingItemConditionEnum, offerType?: GetPricingOfferTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricing(marketplaceId, itemType, asins, skus, itemCondition, offerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductPricingApi - factory interface
 * @export
 */
export const ProductPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductPricingApiFp(configuration)
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetCompetitivePricingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing(requestParameters: ProductPricingApiGetCompetitivePricingRequest, options?: AxiosRequestConfig): AxiosPromise<GetPricingResponse> {
            return localVarFp.getCompetitivePricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetItemOffersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers(requestParameters: ProductPricingApiGetItemOffersRequest, options?: AxiosRequestConfig): AxiosPromise<GetOffersResponse> {
            return localVarFp.getItemOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.asin, requestParameters.customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetItemOffersBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffersBatch(requestParameters: ProductPricingApiGetItemOffersBatchRequest, options?: AxiosRequestConfig): AxiosPromise<GetItemOffersBatchResponse> {
            return localVarFp.getItemOffersBatch(requestParameters.getItemOffersBatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetListingOffersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers(requestParameters: ProductPricingApiGetListingOffersRequest, options?: AxiosRequestConfig): AxiosPromise<GetOffersResponse> {
            return localVarFp.getListingOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.sellerSKU, requestParameters.customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetListingOffersBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffersBatch(requestParameters: ProductPricingApiGetListingOffersBatchRequest, options?: AxiosRequestConfig): AxiosPromise<GetListingOffersBatchResponse> {
            return localVarFp.getListingOffersBatch(requestParameters.getListingOffersBatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ProductPricingApiGetPricingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing(requestParameters: ProductPricingApiGetPricingRequest, options?: AxiosRequestConfig): AxiosPromise<GetPricingResponse> {
            return localVarFp.getPricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.itemCondition, requestParameters.offerType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompetitivePricing operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetCompetitivePricingRequest
 */
export interface ProductPricingApiGetCompetitivePricingRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly marketplaceId: string

    /**
     * Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
     * @type {'Asin' | 'Sku'}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly itemType: GetCompetitivePricingItemTypeEnum

    /**
     * A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly asins?: Array<string>

    /**
     * A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly skus?: Array<string>

    /**
     * Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly customerType?: GetCompetitivePricingCustomerTypeEnum
}

/**
 * Request parameters for getItemOffers operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetItemOffersRequest
 */
export interface ProductPricingApiGetItemOffersRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly marketplaceId: string

    /**
     * Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly itemCondition: GetItemOffersItemConditionEnum

    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly asin: string

    /**
     * Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly customerType?: GetItemOffersCustomerTypeEnum
}

/**
 * Request parameters for getItemOffersBatch operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetItemOffersBatchRequest
 */
export interface ProductPricingApiGetItemOffersBatchRequest {
    /**
     * 
     * @type {GetItemOffersBatchRequest}
     * @memberof ProductPricingApiGetItemOffersBatch
     */
    readonly getItemOffersBatchRequestBody: GetItemOffersBatchRequest
}

/**
 * Request parameters for getListingOffers operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetListingOffersRequest
 */
export interface ProductPricingApiGetListingOffersRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly marketplaceId: string

    /**
     * Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly itemCondition: GetListingOffersItemConditionEnum

    /**
     * Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @type {string}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly sellerSKU: string

    /**
     * Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly customerType?: GetListingOffersCustomerTypeEnum
}

/**
 * Request parameters for getListingOffersBatch operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetListingOffersBatchRequest
 */
export interface ProductPricingApiGetListingOffersBatchRequest {
    /**
     * 
     * @type {GetListingOffersBatchRequest}
     * @memberof ProductPricingApiGetListingOffersBatch
     */
    readonly getListingOffersBatchRequestBody: GetListingOffersBatchRequest
}

/**
 * Request parameters for getPricing operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetPricingRequest
 */
export interface ProductPricingApiGetPricingRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetPricing
     */
    readonly marketplaceId: string

    /**
     * Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
     * @type {'Asin' | 'Sku'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly itemType: GetPricingItemTypeEnum

    /**
     * A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetPricing
     */
    readonly asins?: Array<string>

    /**
     * A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetPricing
     */
    readonly skus?: Array<string>

    /**
     * Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly itemCondition?: GetPricingItemConditionEnum

    /**
     * Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
     * @type {'B2C' | 'B2B'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly offerType?: GetPricingOfferTypeEnum
}

/**
 * ProductPricingApi - object-oriented interface
 * @export
 * @class ProductPricingApi
 * @extends {BaseAPI}
 */
export class ProductPricingApi extends BaseAPI {
    /**
     * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetCompetitivePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getCompetitivePricing(requestParameters: ProductPricingApiGetCompetitivePricingRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getCompetitivePricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetItemOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getItemOffers(requestParameters: ProductPricingApiGetItemOffersRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getItemOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.asin, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetItemOffersBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getItemOffersBatch(requestParameters: ProductPricingApiGetItemOffersBatchRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getItemOffersBatch(requestParameters.getItemOffersBatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a single SKU listing.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetListingOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getListingOffers(requestParameters: ProductPricingApiGetListingOffersRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getListingOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.sellerSKU, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetListingOffersBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getListingOffersBatch(requestParameters: ProductPricingApiGetListingOffersBatchRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getListingOffersBatch(requestParameters.getListingOffersBatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetPricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getPricing(requestParameters: ProductPricingApiGetPricingRequest, options?: AxiosRequestConfig) {
        return ProductPricingApiFp(this.configuration).getPricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.itemCondition, requestParameters.offerType, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCompetitivePricingItemTypeEnum = {
    Asin: 'Asin',
    Sku: 'Sku'
} as const;
export type GetCompetitivePricingItemTypeEnum = typeof GetCompetitivePricingItemTypeEnum[keyof typeof GetCompetitivePricingItemTypeEnum];
/**
 * @export
 */
export const GetCompetitivePricingCustomerTypeEnum = {
    Consumer: 'Consumer',
    Business: 'Business'
} as const;
export type GetCompetitivePricingCustomerTypeEnum = typeof GetCompetitivePricingCustomerTypeEnum[keyof typeof GetCompetitivePricingCustomerTypeEnum];
/**
 * @export
 */
export const GetItemOffersItemConditionEnum = {
    New: 'New',
    Used: 'Used',
    Collectible: 'Collectible',
    Refurbished: 'Refurbished',
    Club: 'Club'
} as const;
export type GetItemOffersItemConditionEnum = typeof GetItemOffersItemConditionEnum[keyof typeof GetItemOffersItemConditionEnum];
/**
 * @export
 */
export const GetItemOffersCustomerTypeEnum = {
    Consumer: 'Consumer',
    Business: 'Business'
} as const;
export type GetItemOffersCustomerTypeEnum = typeof GetItemOffersCustomerTypeEnum[keyof typeof GetItemOffersCustomerTypeEnum];
/**
 * @export
 */
export const GetListingOffersItemConditionEnum = {
    New: 'New',
    Used: 'Used',
    Collectible: 'Collectible',
    Refurbished: 'Refurbished',
    Club: 'Club'
} as const;
export type GetListingOffersItemConditionEnum = typeof GetListingOffersItemConditionEnum[keyof typeof GetListingOffersItemConditionEnum];
/**
 * @export
 */
export const GetListingOffersCustomerTypeEnum = {
    Consumer: 'Consumer',
    Business: 'Business'
} as const;
export type GetListingOffersCustomerTypeEnum = typeof GetListingOffersCustomerTypeEnum[keyof typeof GetListingOffersCustomerTypeEnum];
/**
 * @export
 */
export const GetPricingItemTypeEnum = {
    Asin: 'Asin',
    Sku: 'Sku'
} as const;
export type GetPricingItemTypeEnum = typeof GetPricingItemTypeEnum[keyof typeof GetPricingItemTypeEnum];
/**
 * @export
 */
export const GetPricingItemConditionEnum = {
    New: 'New',
    Used: 'Used',
    Collectible: 'Collectible',
    Refurbished: 'Refurbished',
    Club: 'Club'
} as const;
export type GetPricingItemConditionEnum = typeof GetPricingItemConditionEnum[keyof typeof GetPricingItemConditionEnum];
/**
 * @export
 */
export const GetPricingOfferTypeEnum = {
    B2C: 'B2C',
    B2B: 'B2B'
} as const;
export type GetPricingOfferTypeEnum = typeof GetPricingOfferTypeEnum[keyof typeof GetPricingOfferTypeEnum];
