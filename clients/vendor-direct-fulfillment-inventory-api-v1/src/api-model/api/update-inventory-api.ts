/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Direct Fulfillment Inventory Updates
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor\'s inventory updates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubmitInventoryUpdateRequest } from '../models';
// @ts-ignore
import { SubmitInventoryUpdateResponse } from '../models';
/**
 * UpdateInventoryApi - axios parameter creator
 * @export
 */
export const UpdateInventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
         * @param {SubmitInventoryUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitInventoryUpdate: async (warehouseId: string, body: SubmitInventoryUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            assertParamExists('submitInventoryUpdate', 'warehouseId', warehouseId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitInventoryUpdate', 'body', body)
            const localVarPath = `/vendor/directFulfillment/inventory/v1/warehouses/{warehouseId}/items`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateInventoryApi - functional programming interface
 * @export
 */
export const UpdateInventoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateInventoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
         * @param {SubmitInventoryUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitInventoryUpdate(warehouseId: string, body: SubmitInventoryUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitInventoryUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitInventoryUpdate(warehouseId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateInventoryApi - factory interface
 * @export
 */
export const UpdateInventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateInventoryApiFp(configuration)
    return {
        /**
         * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} warehouseId Identifier for the warehouse for which to update inventory.
         * @param {SubmitInventoryUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitInventoryUpdate(warehouseId: string, body: SubmitInventoryUpdateRequest, options?: any): AxiosPromise<SubmitInventoryUpdateResponse> {
            return localVarFp.submitInventoryUpdate(warehouseId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for submitInventoryUpdate operation in UpdateInventoryApi.
 * @export
 * @interface UpdateInventoryApiSubmitInventoryUpdateRequest
 */
export interface UpdateInventoryApiSubmitInventoryUpdateRequest {
    /**
     * Identifier for the warehouse for which to update inventory.
     * @type {string}
     * @memberof UpdateInventoryApiSubmitInventoryUpdate
     */
    readonly warehouseId: string

    /**
     * 
     * @type {SubmitInventoryUpdateRequest}
     * @memberof UpdateInventoryApiSubmitInventoryUpdate
     */
    readonly body: SubmitInventoryUpdateRequest
}

/**
 * UpdateInventoryApi - object-oriented interface
 * @export
 * @class UpdateInventoryApi
 * @extends {BaseAPI}
 */
export class UpdateInventoryApi extends BaseAPI {
    /**
     * Submits inventory updates for the specified warehouse for either a partial or full feed of inventory items.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {UpdateInventoryApiSubmitInventoryUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateInventoryApi
     */
    public submitInventoryUpdate(requestParameters: UpdateInventoryApiSubmitInventoryUpdateRequest, options?: AxiosRequestConfig) {
        return UpdateInventoryApiFp(this.configuration).submitInventoryUpdate(requestParameters.warehouseId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
