/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Amazon External Fulfillment Shipments Processing
 * You can use the External Fulfillment Shipments API to retrieve, manage, and track shipments processed through Amazon\'s external fulfillment network. Use this API to get shipment details, monitor status changes, and access fulfillment requirements.
 *
 * The version of the OpenAPI document: 2024-09-11
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { InvoiceResponse } from '../models';
// @ts-ignore
import type { Package } from '../models';
// @ts-ignore
import type { PackageDeliveryStatus } from '../models';
// @ts-ignore
import type { Packages } from '../models';
// @ts-ignore
import type { ShipLabelsInput } from '../models';
// @ts-ignore
import type { ShipLabelsResponse } from '../models';
// @ts-ignore
import type { Shipment } from '../models';
// @ts-ignore
import type { ShipmentAcknowledgementRequest } from '../models';
// @ts-ignore
import type { ShipmentsResponse } from '../models';
// @ts-ignore
import type { ShippingOptionsResponse } from '../models';
/**
 * ExternalFulfillmentShipmentsApi - axios parameter creator
 */
export const ExternalFulfillmentShipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provide details about the packages in the specified shipment.
         * @param {string} shipmentId The ID of the shipment.
         * @param {Packages} body A list of packages in the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPackages: async (shipmentId: string, body: Packages, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('createPackages', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPackages', 'body', body)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get invoices for the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose invoice you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateInvoice: async (shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateInvoice', 'shipmentId', shipmentId)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose shipping labels you want to generate and retrieve.
         * @param {GenerateShipLabelsOperationEnum} operation Specify whether you want to generate or regenerate a label.
         * @param {string} [shippingOptionId] The ID of the shipping option whose shipping labels you want.
         * @param {ShipLabelsInput} [body] Shipping details for when shipping is not done by the marketplace channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipLabels: async (shipmentId: string, operation: GenerateShipLabelsOperationEnum, shippingOptionId?: string, body?: ShipLabelsInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateShipLabels', 'shipmentId', shipmentId)
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('generateShipLabels', 'operation', operation)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/shipLabels`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shippingOptionId !== undefined) {
                localVarQueryParameter['shippingOptionId'] = shippingOptionId;
            }

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single shipment with the ID you specify.
         * @param {string} shipmentId The ID of the shipment you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shipments created for the seller in the status you specify. Shipments can be further filtered based on the fulfillment node or the time of the shipments\' last update.
         * @param {GetShipmentsStatusEnum} status The status of shipment you want to include in the response. To retrieve all new shipments, set this value to &#x60;ACCEPTED&#x60;.
         * @param {string} [locationId] The Amazon channel location identifier for the shipments you want to retrieve.
         * @param {string} [marketplaceId] The marketplace ID associated with the location. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [channelName] The channel name associated with the location.
         * @param {string} [lastUpdatedAfter] The response includes shipments whose latest update is after the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [lastUpdatedBefore] The response includes shipments whose latest update is before the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {number} [maxResults] The maximum number of shipments to include in the response.
         * @param {string} [paginationToken] A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipments: async (status: GetShipmentsStatusEnum, locationId?: string, marketplaceId?: string, channelName?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, maxResults?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('getShipments', 'status', status)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (channelName !== undefined) {
                localVarQueryParameter['channelName'] = channelName;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = (lastUpdatedAfter as any instanceof Date) ?
                    (lastUpdatedAfter as any).toISOString() :
                    lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = (lastUpdatedBefore as any instanceof Date) ?
                    (lastUpdatedBefore as any).toISOString() :
                    lastUpdatedBefore;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm or reject the specified shipment.
         * @param {string} shipmentId The ID of the shipment you want to confirm or reject.
         * @param {ProcessShipmentOperationEnum} operation The status of the shipment.
         * @param {ShipmentAcknowledgementRequest} [body] Information about the shipment and its line items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processShipment: async (shipmentId: string, operation: ProcessShipmentOperationEnum, body?: ShipmentAcknowledgementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('processShipment', 'shipmentId', shipmentId)
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('processShipment', 'operation', operation)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve invoices for the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose invoice you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInvoice: async (shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('retrieveInvoice', 'shipmentId', shipmentId)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/invoice`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shipping options for a package in a shipment given the shipment\'s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package for which you want to retrieve shipping options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShippingOptions: async (shipmentId: string, packageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('retrieveShippingOptions', 'shipmentId', shipmentId)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('retrieveShippingOptions', 'packageId', packageId)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/shippingOptions`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details about the packages that will be used to fulfill the specified shipment.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package whose information you want to update.
         * @param {Package} body The body of the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackage: async (shipmentId: string, packageId: string, body: Package, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updatePackage', 'shipmentId', shipmentId)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('updatePackage', 'packageId', packageId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePackage', 'body', body)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status of the packages.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package whose status you want to update.
         * @param {UpdatePackageStatusStatusEnum} [status] **DEPRECATED**. Do not use. Package status is defined in the body parameter.
         * @param {PackageDeliveryStatus} [body] The body of the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackageStatus: async (shipmentId: string, packageId: string, status?: UpdatePackageStatusStatusEnum, body?: PackageDeliveryStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updatePackageStatus', 'shipmentId', shipmentId)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('updatePackageStatus', 'packageId', packageId)
            const localVarPath = `/externalFulfillment/2024-09-11/shipments/{shipmentId}/packages/{packageId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalFulfillmentShipmentsApi - functional programming interface
 */
export const ExternalFulfillmentShipmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalFulfillmentShipmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Provide details about the packages in the specified shipment.
         * @param {string} shipmentId The ID of the shipment.
         * @param {Packages} body A list of packages in the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPackages(shipmentId: string, body: Packages, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPackages(shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.createPackages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get invoices for the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose invoice you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateInvoice(shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateInvoice(shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.generateInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose shipping labels you want to generate and retrieve.
         * @param {GenerateShipLabelsOperationEnum} operation Specify whether you want to generate or regenerate a label.
         * @param {string} [shippingOptionId] The ID of the shipping option whose shipping labels you want.
         * @param {ShipLabelsInput} [body] Shipping details for when shipping is not done by the marketplace channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateShipLabels(shipmentId: string, operation: GenerateShipLabelsOperationEnum, shippingOptionId?: string, body?: ShipLabelsInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateShipLabels(shipmentId, operation, shippingOptionId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.generateShipLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single shipment with the ID you specify.
         * @param {string} shipmentId The ID of the shipment you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.getShipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of shipments created for the seller in the status you specify. Shipments can be further filtered based on the fulfillment node or the time of the shipments\' last update.
         * @param {GetShipmentsStatusEnum} status The status of shipment you want to include in the response. To retrieve all new shipments, set this value to &#x60;ACCEPTED&#x60;.
         * @param {string} [locationId] The Amazon channel location identifier for the shipments you want to retrieve.
         * @param {string} [marketplaceId] The marketplace ID associated with the location. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {string} [channelName] The channel name associated with the location.
         * @param {string} [lastUpdatedAfter] The response includes shipments whose latest update is after the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {string} [lastUpdatedBefore] The response includes shipments whose latest update is before the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
         * @param {number} [maxResults] The maximum number of shipments to include in the response.
         * @param {string} [paginationToken] A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipments(status: GetShipmentsStatusEnum, locationId?: string, marketplaceId?: string, channelName?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, maxResults?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipments(status, locationId, marketplaceId, channelName, lastUpdatedAfter, lastUpdatedBefore, maxResults, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.getShipments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm or reject the specified shipment.
         * @param {string} shipmentId The ID of the shipment you want to confirm or reject.
         * @param {ProcessShipmentOperationEnum} operation The status of the shipment.
         * @param {ShipmentAcknowledgementRequest} [body] Information about the shipment and its line items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processShipment(shipmentId: string, operation: ProcessShipmentOperationEnum, body?: ShipmentAcknowledgementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processShipment(shipmentId, operation, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.processShipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve invoices for the shipment you specify.
         * @param {string} shipmentId The ID of the shipment whose invoice you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveInvoice(shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveInvoice(shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.retrieveInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of shipping options for a package in a shipment given the shipment\'s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package for which you want to retrieve shipping options.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveShippingOptions(shipmentId: string, packageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveShippingOptions(shipmentId, packageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.retrieveShippingOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the details about the packages that will be used to fulfill the specified shipment.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package whose information you want to update.
         * @param {Package} body The body of the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePackage(shipmentId: string, packageId: string, body: Package, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePackage(shipmentId, packageId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.updatePackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the status of the packages.
         * @param {string} shipmentId The ID of the shipment to which the package belongs.
         * @param {string} packageId The ID of the package whose status you want to update.
         * @param {UpdatePackageStatusStatusEnum} [status] **DEPRECATED**. Do not use. Package status is defined in the body parameter.
         * @param {PackageDeliveryStatus} [body] The body of the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePackageStatus(shipmentId: string, packageId: string, status?: UpdatePackageStatusStatusEnum, body?: PackageDeliveryStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePackageStatus(shipmentId, packageId, status, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalFulfillmentShipmentsApi.updatePackageStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalFulfillmentShipmentsApi - factory interface
 */
export const ExternalFulfillmentShipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalFulfillmentShipmentsApiFp(configuration)
    return {
        /**
         * Provide details about the packages in the specified shipment.
         * @param {ExternalFulfillmentShipmentsApiCreatePackagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPackages(requestParameters: ExternalFulfillmentShipmentsApiCreatePackagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPackages(requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get invoices for the shipment you specify.
         * @param {ExternalFulfillmentShipmentsApiGenerateInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateInvoice(requestParameters: ExternalFulfillmentShipmentsApiGenerateInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvoiceResponse> {
            return localVarFp.generateInvoice(requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
         * @param {ExternalFulfillmentShipmentsApiGenerateShipLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipLabels(requestParameters: ExternalFulfillmentShipmentsApiGenerateShipLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipLabelsResponse> {
            return localVarFp.generateShipLabels(requestParameters.shipmentId, requestParameters.operation, requestParameters.shippingOptionId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single shipment with the ID you specify.
         * @param {ExternalFulfillmentShipmentsApiGetShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(requestParameters: ExternalFulfillmentShipmentsApiGetShipmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Shipment> {
            return localVarFp.getShipment(requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shipments created for the seller in the status you specify. Shipments can be further filtered based on the fulfillment node or the time of the shipments\' last update.
         * @param {ExternalFulfillmentShipmentsApiGetShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipments(requestParameters: ExternalFulfillmentShipmentsApiGetShipmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentsResponse> {
            return localVarFp.getShipments(requestParameters.status, requestParameters.locationId, requestParameters.marketplaceId, requestParameters.channelName, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.maxResults, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm or reject the specified shipment.
         * @param {ExternalFulfillmentShipmentsApiProcessShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processShipment(requestParameters: ExternalFulfillmentShipmentsApiProcessShipmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.processShipment(requestParameters.shipmentId, requestParameters.operation, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve invoices for the shipment you specify.
         * @param {ExternalFulfillmentShipmentsApiRetrieveInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveInvoice(requestParameters: ExternalFulfillmentShipmentsApiRetrieveInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvoiceResponse> {
            return localVarFp.retrieveInvoice(requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shipping options for a package in a shipment given the shipment\'s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
         * @param {ExternalFulfillmentShipmentsApiRetrieveShippingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShippingOptions(requestParameters: ExternalFulfillmentShipmentsApiRetrieveShippingOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShippingOptionsResponse> {
            return localVarFp.retrieveShippingOptions(requestParameters.shipmentId, requestParameters.packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details about the packages that will be used to fulfill the specified shipment.
         * @param {ExternalFulfillmentShipmentsApiUpdatePackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackage(requestParameters: ExternalFulfillmentShipmentsApiUpdatePackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePackage(requestParameters.shipmentId, requestParameters.packageId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the status of the packages.
         * @param {ExternalFulfillmentShipmentsApiUpdatePackageStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePackageStatus(requestParameters: ExternalFulfillmentShipmentsApiUpdatePackageStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePackageStatus(requestParameters.shipmentId, requestParameters.packageId, requestParameters.status, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPackages operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiCreatePackagesRequest {
    /**
     * The ID of the shipment.
     */
    readonly shipmentId: string

    /**
     * A list of packages in the shipment.
     */
    readonly body: Packages
}

/**
 * Request parameters for generateInvoice operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiGenerateInvoiceRequest {
    /**
     * The ID of the shipment whose invoice you want.
     */
    readonly shipmentId: string
}

/**
 * Request parameters for generateShipLabels operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiGenerateShipLabelsRequest {
    /**
     * The ID of the shipment whose shipping labels you want to generate and retrieve.
     */
    readonly shipmentId: string

    /**
     * Specify whether you want to generate or regenerate a label.
     */
    readonly operation: GenerateShipLabelsOperationEnum

    /**
     * The ID of the shipping option whose shipping labels you want.
     */
    readonly shippingOptionId?: string

    /**
     * Shipping details for when shipping is not done by the marketplace channel.
     */
    readonly body?: ShipLabelsInput
}

/**
 * Request parameters for getShipment operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiGetShipmentRequest {
    /**
     * The ID of the shipment you want to retrieve.
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getShipments operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiGetShipmentsRequest {
    /**
     * The status of shipment you want to include in the response. To retrieve all new shipments, set this value to &#x60;ACCEPTED&#x60;.
     */
    readonly status: GetShipmentsStatusEnum

    /**
     * The Amazon channel location identifier for the shipments you want to retrieve.
     */
    readonly locationId?: string

    /**
     * The marketplace ID associated with the location. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     */
    readonly marketplaceId?: string

    /**
     * The channel name associated with the location.
     */
    readonly channelName?: string

    /**
     * The response includes shipments whose latest update is after the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    readonly lastUpdatedAfter?: string

    /**
     * The response includes shipments whose latest update is before the specified time. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    readonly lastUpdatedBefore?: string

    /**
     * The maximum number of shipments to include in the response.
     */
    readonly maxResults?: number

    /**
     * A token that you use to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when there are multiple pages of results. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for processShipment operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiProcessShipmentRequest {
    /**
     * The ID of the shipment you want to confirm or reject.
     */
    readonly shipmentId: string

    /**
     * The status of the shipment.
     */
    readonly operation: ProcessShipmentOperationEnum

    /**
     * Information about the shipment and its line items.
     */
    readonly body?: ShipmentAcknowledgementRequest
}

/**
 * Request parameters for retrieveInvoice operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiRetrieveInvoiceRequest {
    /**
     * The ID of the shipment whose invoice you want to retrieve.
     */
    readonly shipmentId: string
}

/**
 * Request parameters for retrieveShippingOptions operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiRetrieveShippingOptionsRequest {
    /**
     * The ID of the shipment to which the package belongs.
     */
    readonly shipmentId: string

    /**
     * The ID of the package for which you want to retrieve shipping options.
     */
    readonly packageId: string
}

/**
 * Request parameters for updatePackage operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiUpdatePackageRequest {
    /**
     * The ID of the shipment to which the package belongs.
     */
    readonly shipmentId: string

    /**
     * The ID of the package whose information you want to update.
     */
    readonly packageId: string

    /**
     * The body of the request.
     */
    readonly body: Package
}

/**
 * Request parameters for updatePackageStatus operation in ExternalFulfillmentShipmentsApi.
 */
export interface ExternalFulfillmentShipmentsApiUpdatePackageStatusRequest {
    /**
     * The ID of the shipment to which the package belongs.
     */
    readonly shipmentId: string

    /**
     * The ID of the package whose status you want to update.
     */
    readonly packageId: string

    /**
     * **DEPRECATED**. Do not use. Package status is defined in the body parameter.
     */
    readonly status?: UpdatePackageStatusStatusEnum

    /**
     * The body of the request.
     */
    readonly body?: PackageDeliveryStatus
}

/**
 * ExternalFulfillmentShipmentsApi - object-oriented interface
 */
export class ExternalFulfillmentShipmentsApi extends BaseAPI {
    /**
     * Provide details about the packages in the specified shipment.
     * @param {ExternalFulfillmentShipmentsApiCreatePackagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createPackages(requestParameters: ExternalFulfillmentShipmentsApiCreatePackagesRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).createPackages(requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get invoices for the shipment you specify.
     * @param {ExternalFulfillmentShipmentsApiGenerateInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generateInvoice(requestParameters: ExternalFulfillmentShipmentsApiGenerateInvoiceRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).generateInvoice(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate and retrieve all shipping labels for one or more packages in the shipment you specify.
     * @param {ExternalFulfillmentShipmentsApiGenerateShipLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public generateShipLabels(requestParameters: ExternalFulfillmentShipmentsApiGenerateShipLabelsRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).generateShipLabels(requestParameters.shipmentId, requestParameters.operation, requestParameters.shippingOptionId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single shipment with the ID you specify.
     * @param {ExternalFulfillmentShipmentsApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShipment(requestParameters: ExternalFulfillmentShipmentsApiGetShipmentRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).getShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shipments created for the seller in the status you specify. Shipments can be further filtered based on the fulfillment node or the time of the shipments\' last update.
     * @param {ExternalFulfillmentShipmentsApiGetShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getShipments(requestParameters: ExternalFulfillmentShipmentsApiGetShipmentsRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).getShipments(requestParameters.status, requestParameters.locationId, requestParameters.marketplaceId, requestParameters.channelName, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.maxResults, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm or reject the specified shipment.
     * @param {ExternalFulfillmentShipmentsApiProcessShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public processShipment(requestParameters: ExternalFulfillmentShipmentsApiProcessShipmentRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).processShipment(requestParameters.shipmentId, requestParameters.operation, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve invoices for the shipment you specify.
     * @param {ExternalFulfillmentShipmentsApiRetrieveInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public retrieveInvoice(requestParameters: ExternalFulfillmentShipmentsApiRetrieveInvoiceRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).retrieveInvoice(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shipping options for a package in a shipment given the shipment\'s marketplace and channel. If the marketplace and channel have a pre-determined shipping option, then this operation returns an empty response.
     * @param {ExternalFulfillmentShipmentsApiRetrieveShippingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public retrieveShippingOptions(requestParameters: ExternalFulfillmentShipmentsApiRetrieveShippingOptionsRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).retrieveShippingOptions(requestParameters.shipmentId, requestParameters.packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details about the packages that will be used to fulfill the specified shipment.
     * @param {ExternalFulfillmentShipmentsApiUpdatePackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updatePackage(requestParameters: ExternalFulfillmentShipmentsApiUpdatePackageRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).updatePackage(requestParameters.shipmentId, requestParameters.packageId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the status of the packages.
     * @param {ExternalFulfillmentShipmentsApiUpdatePackageStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updatePackageStatus(requestParameters: ExternalFulfillmentShipmentsApiUpdatePackageStatusRequest, options?: RawAxiosRequestConfig) {
        return ExternalFulfillmentShipmentsApiFp(this.configuration).updatePackageStatus(requestParameters.shipmentId, requestParameters.packageId, requestParameters.status, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

export const GenerateShipLabelsOperationEnum = {
    Generate: 'GENERATE',
    Regenerate: 'REGENERATE'
} as const;
export type GenerateShipLabelsOperationEnum = typeof GenerateShipLabelsOperationEnum[keyof typeof GenerateShipLabelsOperationEnum];
export const GetShipmentsStatusEnum = {
    Created: 'CREATED',
    Accepted: 'ACCEPTED',
    Confirmed: 'CONFIRMED',
    PackageCreated: 'PACKAGE_CREATED',
    PickupSlotRetrieved: 'PICKUP_SLOT_RETRIEVED',
    InvoiceGenerated: 'INVOICE_GENERATED',
    ShiplabelGenerated: 'SHIPLABEL_GENERATED',
    Cancelled: 'CANCELLED',
    Shipped: 'SHIPPED',
    Delivered: 'DELIVERED'
} as const;
export type GetShipmentsStatusEnum = typeof GetShipmentsStatusEnum[keyof typeof GetShipmentsStatusEnum];
export const ProcessShipmentOperationEnum = {
    Confirm: 'CONFIRM',
    Reject: 'REJECT'
} as const;
export type ProcessShipmentOperationEnum = typeof ProcessShipmentOperationEnum[keyof typeof ProcessShipmentOperationEnum];
export const UpdatePackageStatusStatusEnum = {
    Shipped: 'SHIPPED'
} as const;
export type UpdatePackageStatusStatusEnum = typeof UpdatePackageStatusStatusEnum[keyof typeof UpdatePackageStatusStatusEnum];
