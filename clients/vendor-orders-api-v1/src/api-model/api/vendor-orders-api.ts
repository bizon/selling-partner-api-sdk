/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetPurchaseOrderResponse } from '../models';
// @ts-ignore
import type { GetPurchaseOrdersResponse } from '../models';
// @ts-ignore
import type { GetPurchaseOrdersStatusResponse } from '../models';
// @ts-ignore
import type { SubmitAcknowledgementRequest } from '../models';
// @ts-ignore
import type { SubmitAcknowledgementResponse } from '../models';
/**
 * VendorOrdersApi - axios parameter creator
 * @export
 */
export const VendorOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrder: async (purchaseOrderNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getPurchaseOrder', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {string} [createdAfter] Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {GetPurchaseOrdersSortOrderEnum} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
         * @param {boolean} [includeDetails] When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
         * @param {string} [changedAfter] Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [changedBefore] Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {GetPurchaseOrdersPoItemStateEnum} [poItemState] Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
         * @param {boolean} [isPOChanged] When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
         * @param {GetPurchaseOrdersPurchaseOrderStateEnum} [purchaseOrderState] Filters purchase orders based on the purchase order state.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrders: async (limit?: number, createdAfter?: string, createdBefore?: string, sortOrder?: GetPurchaseOrdersSortOrderEnum, nextToken?: string, includeDetails?: boolean, changedAfter?: string, changedBefore?: string, poItemState?: GetPurchaseOrdersPoItemStateEnum, isPOChanged?: boolean, purchaseOrderState?: GetPurchaseOrdersPurchaseOrderStateEnum, orderingVendorCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/orders/v1/purchaseOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (changedAfter !== undefined) {
                localVarQueryParameter['changedAfter'] = (changedAfter as any instanceof Date) ?
                    (changedAfter as any).toISOString() :
                    changedAfter;
            }

            if (changedBefore !== undefined) {
                localVarQueryParameter['changedBefore'] = (changedBefore as any instanceof Date) ?
                    (changedBefore as any).toISOString() :
                    changedBefore;
            }

            if (poItemState !== undefined) {
                localVarQueryParameter['poItemState'] = poItemState;
            }

            if (isPOChanged !== undefined) {
                localVarQueryParameter['isPOChanged'] = isPOChanged;
            }

            if (purchaseOrderState !== undefined) {
                localVarQueryParameter['purchaseOrderState'] = purchaseOrderState;
            }

            if (orderingVendorCode !== undefined) {
                localVarQueryParameter['orderingVendorCode'] = orderingVendorCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {GetPurchaseOrdersStatusSortOrderEnum} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more purchase orders than the specified result size limit.
         * @param {string} [createdAfter] Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedAfter] Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedBefore] Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [purchaseOrderNumber] Provides purchase order status for the specified purchase order number.
         * @param {GetPurchaseOrdersStatusPurchaseOrderStatusEnum} [purchaseOrderStatus] Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
         * @param {GetPurchaseOrdersStatusItemConfirmationStatusEnum} [itemConfirmationStatus] Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
         * @param {GetPurchaseOrdersStatusItemReceiveStatusEnum} [itemReceiveStatus] Filters purchase orders based on the purchase order\&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
         * @param {string} [shipToPartyId] Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrdersStatus: async (limit?: number, sortOrder?: GetPurchaseOrdersStatusSortOrderEnum, nextToken?: string, createdAfter?: string, createdBefore?: string, updatedAfter?: string, updatedBefore?: string, purchaseOrderNumber?: string, purchaseOrderStatus?: GetPurchaseOrdersStatusPurchaseOrderStatusEnum, itemConfirmationStatus?: GetPurchaseOrdersStatusItemConfirmationStatusEnum, itemReceiveStatus?: GetPurchaseOrdersStatusItemReceiveStatusEnum, orderingVendorCode?: string, shipToPartyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/orders/v1/purchaseOrdersStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updatedBefore'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (purchaseOrderNumber !== undefined) {
                localVarQueryParameter['purchaseOrderNumber'] = purchaseOrderNumber;
            }

            if (purchaseOrderStatus !== undefined) {
                localVarQueryParameter['purchaseOrderStatus'] = purchaseOrderStatus;
            }

            if (itemConfirmationStatus !== undefined) {
                localVarQueryParameter['itemConfirmationStatus'] = itemConfirmationStatus;
            }

            if (itemReceiveStatus !== undefined) {
                localVarQueryParameter['itemReceiveStatus'] = itemReceiveStatus;
            }

            if (orderingVendorCode !== undefined) {
                localVarQueryParameter['orderingVendorCode'] = orderingVendorCode;
            }

            if (shipToPartyId !== undefined) {
                localVarQueryParameter['shipToPartyId'] = shipToPartyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement: async (body: SubmitAcknowledgementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitAcknowledgement', 'body', body)
            const localVarPath = `/vendor/orders/v1/acknowledgements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorOrdersApi - functional programming interface
 * @export
 */
export const VendorOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrder(purchaseOrderNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrder(purchaseOrderNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOrdersApi.getPurchaseOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {string} [createdAfter] Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {GetPurchaseOrdersSortOrderEnum} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
         * @param {boolean} [includeDetails] When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
         * @param {string} [changedAfter] Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [changedBefore] Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {GetPurchaseOrdersPoItemStateEnum} [poItemState] Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
         * @param {boolean} [isPOChanged] When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
         * @param {GetPurchaseOrdersPurchaseOrderStateEnum} [purchaseOrderState] Filters purchase orders based on the purchase order state.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrders(limit?: number, createdAfter?: string, createdBefore?: string, sortOrder?: GetPurchaseOrdersSortOrderEnum, nextToken?: string, includeDetails?: boolean, changedAfter?: string, changedBefore?: string, poItemState?: GetPurchaseOrdersPoItemStateEnum, isPOChanged?: boolean, purchaseOrderState?: GetPurchaseOrdersPurchaseOrderStateEnum, orderingVendorCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrders(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOrdersApi.getPurchaseOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {GetPurchaseOrdersStatusSortOrderEnum} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more purchase orders than the specified result size limit.
         * @param {string} [createdAfter] Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedAfter] Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedBefore] Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [purchaseOrderNumber] Provides purchase order status for the specified purchase order number.
         * @param {GetPurchaseOrdersStatusPurchaseOrderStatusEnum} [purchaseOrderStatus] Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
         * @param {GetPurchaseOrdersStatusItemConfirmationStatusEnum} [itemConfirmationStatus] Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
         * @param {GetPurchaseOrdersStatusItemReceiveStatusEnum} [itemReceiveStatus] Filters purchase orders based on the purchase order\&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
         * @param {string} [shipToPartyId] Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrdersStatus(limit?: number, sortOrder?: GetPurchaseOrdersStatusSortOrderEnum, nextToken?: string, createdAfter?: string, createdBefore?: string, updatedAfter?: string, updatedBefore?: string, purchaseOrderNumber?: string, purchaseOrderStatus?: GetPurchaseOrdersStatusPurchaseOrderStatusEnum, itemConfirmationStatus?: GetPurchaseOrdersStatusItemConfirmationStatusEnum, itemReceiveStatus?: GetPurchaseOrdersStatusItemReceiveStatusEnum, orderingVendorCode?: string, shipToPartyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrdersStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrdersStatus(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, itemReceiveStatus, orderingVendorCode, shipToPartyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOrdersApi.getPurchaseOrdersStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAcknowledgement(body: SubmitAcknowledgementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitAcknowledgementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitAcknowledgement(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorOrdersApi.submitAcknowledgement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VendorOrdersApi - factory interface
 * @export
 */
export const VendorOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorOrdersApiFp(configuration)
    return {
        /**
         * Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorOrdersApiGetPurchaseOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrder(requestParameters: VendorOrdersApiGetPurchaseOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseOrderResponse> {
            return localVarFp.getPurchaseOrder(requestParameters.purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorOrdersApiGetPurchaseOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrders(requestParameters: VendorOrdersApiGetPurchaseOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseOrdersResponse> {
            return localVarFp.getPurchaseOrders(requestParameters.limit, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.includeDetails, requestParameters.changedAfter, requestParameters.changedBefore, requestParameters.poItemState, requestParameters.isPOChanged, requestParameters.purchaseOrderState, requestParameters.orderingVendorCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorOrdersApiGetPurchaseOrdersStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrdersStatus(requestParameters: VendorOrdersApiGetPurchaseOrdersStatusRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseOrdersStatusResponse> {
            return localVarFp.getPurchaseOrdersStatus(requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.purchaseOrderNumber, requestParameters.purchaseOrderStatus, requestParameters.itemConfirmationStatus, requestParameters.itemReceiveStatus, requestParameters.orderingVendorCode, requestParameters.shipToPartyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorOrdersApiSubmitAcknowledgementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement(requestParameters: VendorOrdersApiSubmitAcknowledgementRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmitAcknowledgementResponse> {
            return localVarFp.submitAcknowledgement(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPurchaseOrder operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrderRequest
 */
export interface VendorOrdersApiGetPurchaseOrderRequest {
    /**
     * The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrder
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getPurchaseOrders operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrdersRequest
 */
export interface VendorOrdersApiGetPurchaseOrdersRequest {
    /**
     * The limit to the number of records returned. Default value is 100 records.
     * @type {number}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly limit?: number

    /**
     * Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly createdAfter?: string

    /**
     * Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly createdBefore?: string

    /**
     * Sort in ascending or descending order by purchase order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly sortOrder?: GetPurchaseOrdersSortOrderEnum

    /**
     * Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly nextToken?: string

    /**
     * When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
     * @type {boolean}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly includeDetails?: boolean

    /**
     * Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly changedAfter?: string

    /**
     * Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly changedBefore?: string

    /**
     * Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     * @type {'Cancelled'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly poItemState?: GetPurchaseOrdersPoItemStateEnum

    /**
     * When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
     * @type {boolean}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly isPOChanged?: boolean

    /**
     * Filters purchase orders based on the purchase order state.
     * @type {'New' | 'Acknowledged' | 'Closed'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly purchaseOrderState?: GetPurchaseOrdersPurchaseOrderStateEnum

    /**
     * Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly orderingVendorCode?: string
}

/**
 * Request parameters for getPurchaseOrdersStatus operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrdersStatusRequest
 */
export interface VendorOrdersApiGetPurchaseOrdersStatusRequest {
    /**
     * The limit to the number of records returned. Default value is 100 records.
     * @type {number}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly limit?: number

    /**
     * Sort in ascending or descending order by purchase order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly sortOrder?: GetPurchaseOrdersStatusSortOrderEnum

    /**
     * Used for pagination when there are more purchase orders than the specified result size limit.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly nextToken?: string

    /**
     * Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly createdAfter?: string

    /**
     * Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly createdBefore?: string

    /**
     * Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly updatedAfter?: string

    /**
     * Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly updatedBefore?: string

    /**
     * Provides purchase order status for the specified purchase order number.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly purchaseOrderNumber?: string

    /**
     * Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
     * @type {'OPEN' | 'CLOSED'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly purchaseOrderStatus?: GetPurchaseOrdersStatusPurchaseOrderStatusEnum

    /**
     * Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
     * @type {'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly itemConfirmationStatus?: GetPurchaseOrdersStatusItemConfirmationStatusEnum

    /**
     * Filters purchase orders based on the purchase order\&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
     * @type {'NOT_RECEIVED' | 'PARTIALLY_RECEIVED' | 'RECEIVED'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly itemReceiveStatus?: GetPurchaseOrdersStatusItemReceiveStatusEnum

    /**
     * Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly orderingVendorCode?: string

    /**
     * Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly shipToPartyId?: string
}

/**
 * Request parameters for submitAcknowledgement operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiSubmitAcknowledgementRequest
 */
export interface VendorOrdersApiSubmitAcknowledgementRequest {
    /**
     * 
     * @type {SubmitAcknowledgementRequest}
     * @memberof VendorOrdersApiSubmitAcknowledgement
     */
    readonly body: SubmitAcknowledgementRequest
}

/**
 * VendorOrdersApi - object-oriented interface
 * @export
 * @class VendorOrdersApi
 * @extends {BaseAPI}
 */
export class VendorOrdersApi extends BaseAPI {
    /**
     * Returns a purchase order based on the `purchaseOrderNumber` value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorOrdersApiGetPurchaseOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrder(requestParameters: VendorOrdersApiGetPurchaseOrderRequest, options?: RawAxiosRequestConfig) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrder(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the `createdAfter`, `createdBefore`, `changedAfter` and `changedBefore` parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting `includeDetails` to false. You can then use the `getPurchaseOrder` operation to receive details for a specific purchase order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorOrdersApiGetPurchaseOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrders(requestParameters: VendorOrdersApiGetPurchaseOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrders(requestParameters.limit, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.includeDetails, requestParameters.changedAfter, requestParameters.changedBefore, requestParameters.poItemState, requestParameters.isPOChanged, requestParameters.purchaseOrderState, requestParameters.orderingVendorCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorOrdersApiGetPurchaseOrdersStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrdersStatus(requestParameters: VendorOrdersApiGetPurchaseOrdersStatusRequest = {}, options?: RawAxiosRequestConfig) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrdersStatus(requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.purchaseOrderNumber, requestParameters.purchaseOrderStatus, requestParameters.itemConfirmationStatus, requestParameters.itemReceiveStatus, requestParameters.orderingVendorCode, requestParameters.shipToPartyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorOrdersApiSubmitAcknowledgementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public submitAcknowledgement(requestParameters: VendorOrdersApiSubmitAcknowledgementRequest, options?: RawAxiosRequestConfig) {
        return VendorOrdersApiFp(this.configuration).submitAcknowledgement(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPurchaseOrdersSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetPurchaseOrdersSortOrderEnum = typeof GetPurchaseOrdersSortOrderEnum[keyof typeof GetPurchaseOrdersSortOrderEnum];
/**
 * @export
 */
export const GetPurchaseOrdersPoItemStateEnum = {
    Cancelled: 'Cancelled'
} as const;
export type GetPurchaseOrdersPoItemStateEnum = typeof GetPurchaseOrdersPoItemStateEnum[keyof typeof GetPurchaseOrdersPoItemStateEnum];
/**
 * @export
 */
export const GetPurchaseOrdersPurchaseOrderStateEnum = {
    New: 'New',
    Acknowledged: 'Acknowledged',
    Closed: 'Closed'
} as const;
export type GetPurchaseOrdersPurchaseOrderStateEnum = typeof GetPurchaseOrdersPurchaseOrderStateEnum[keyof typeof GetPurchaseOrdersPurchaseOrderStateEnum];
/**
 * @export
 */
export const GetPurchaseOrdersStatusSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetPurchaseOrdersStatusSortOrderEnum = typeof GetPurchaseOrdersStatusSortOrderEnum[keyof typeof GetPurchaseOrdersStatusSortOrderEnum];
/**
 * @export
 */
export const GetPurchaseOrdersStatusPurchaseOrderStatusEnum = {
    Open: 'OPEN',
    Closed: 'CLOSED'
} as const;
export type GetPurchaseOrdersStatusPurchaseOrderStatusEnum = typeof GetPurchaseOrdersStatusPurchaseOrderStatusEnum[keyof typeof GetPurchaseOrdersStatusPurchaseOrderStatusEnum];
/**
 * @export
 */
export const GetPurchaseOrdersStatusItemConfirmationStatusEnum = {
    Accepted: 'ACCEPTED',
    PartiallyAccepted: 'PARTIALLY_ACCEPTED',
    Rejected: 'REJECTED',
    Unconfirmed: 'UNCONFIRMED'
} as const;
export type GetPurchaseOrdersStatusItemConfirmationStatusEnum = typeof GetPurchaseOrdersStatusItemConfirmationStatusEnum[keyof typeof GetPurchaseOrdersStatusItemConfirmationStatusEnum];
/**
 * @export
 */
export const GetPurchaseOrdersStatusItemReceiveStatusEnum = {
    NotReceived: 'NOT_RECEIVED',
    PartiallyReceived: 'PARTIALLY_RECEIVED',
    Received: 'RECEIVED'
} as const;
export type GetPurchaseOrdersStatusItemReceiveStatusEnum = typeof GetPurchaseOrdersStatusItemReceiveStatusEnum[keyof typeof GetPurchaseOrdersStatusItemReceiveStatusEnum];
