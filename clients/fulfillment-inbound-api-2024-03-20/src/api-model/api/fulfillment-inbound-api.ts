/* tslint:disable */
/* eslint-disable */
/**
 * Fulfillment Inbound v2024-03-20
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon\'s fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CancelInboundPlanResponse } from '../models';
// @ts-ignore
import type { CancelSelfShipAppointmentRequest } from '../models';
// @ts-ignore
import type { CancelSelfShipAppointmentResponse } from '../models';
// @ts-ignore
import type { ConfirmDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { ConfirmPackingOptionResponse } from '../models';
// @ts-ignore
import type { ConfirmPlacementOptionResponse } from '../models';
// @ts-ignore
import type { ConfirmShipmentContentUpdatePreviewResponse } from '../models';
// @ts-ignore
import type { ConfirmTransportationOptionsRequest } from '../models';
// @ts-ignore
import type { ConfirmTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { ContentUpdatePreview } from '../models';
// @ts-ignore
import type { CreateInboundPlanRequest } from '../models';
// @ts-ignore
import type { CreateInboundPlanResponse } from '../models';
// @ts-ignore
import type { CreateMarketplaceItemLabelsRequest } from '../models';
// @ts-ignore
import type { CreateMarketplaceItemLabelsResponse } from '../models';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { GenerateDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { GeneratePackingOptionsResponse } from '../models';
// @ts-ignore
import type { GeneratePlacementOptionsRequest } from '../models';
// @ts-ignore
import type { GeneratePlacementOptionsResponse } from '../models';
// @ts-ignore
import type { GenerateSelfShipAppointmentSlotsRequest } from '../models';
// @ts-ignore
import type { GenerateSelfShipAppointmentSlotsResponse } from '../models';
// @ts-ignore
import type { GenerateShipmentContentUpdatePreviewsRequest } from '../models';
// @ts-ignore
import type { GenerateShipmentContentUpdatePreviewsResponse } from '../models';
// @ts-ignore
import type { GenerateTransportationOptionsRequest } from '../models';
// @ts-ignore
import type { GenerateTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { GetDeliveryChallanDocumentResponse } from '../models';
// @ts-ignore
import type { GetSelfShipAppointmentSlotsResponse } from '../models';
// @ts-ignore
import type { InboundOperationStatus } from '../models';
// @ts-ignore
import type { InboundPlan } from '../models';
// @ts-ignore
import type { ListDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanBoxesResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanItemsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanPalletsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlansResponse } from '../models';
// @ts-ignore
import type { ListItemComplianceDetailsResponse } from '../models';
// @ts-ignore
import type { ListPackingGroupBoxesResponse } from '../models';
// @ts-ignore
import type { ListPackingGroupItemsResponse } from '../models';
// @ts-ignore
import type { ListPackingOptionsResponse } from '../models';
// @ts-ignore
import type { ListPlacementOptionsResponse } from '../models';
// @ts-ignore
import type { ListPrepDetailsResponse } from '../models';
// @ts-ignore
import type { ListShipmentBoxesResponse } from '../models';
// @ts-ignore
import type { ListShipmentContentUpdatePreviewsResponse } from '../models';
// @ts-ignore
import type { ListShipmentItemsResponse } from '../models';
// @ts-ignore
import type { ListShipmentPalletsResponse } from '../models';
// @ts-ignore
import type { ListTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { ScheduleSelfShipAppointmentRequest } from '../models';
// @ts-ignore
import type { ScheduleSelfShipAppointmentResponse } from '../models';
// @ts-ignore
import type { SetPackingInformationRequest } from '../models';
// @ts-ignore
import type { SetPackingInformationResponse } from '../models';
// @ts-ignore
import type { SetPrepDetailsRequest } from '../models';
// @ts-ignore
import type { SetPrepDetailsResponse } from '../models';
// @ts-ignore
import type { Shipment } from '../models';
// @ts-ignore
import type { UpdateInboundPlanNameRequest } from '../models';
// @ts-ignore
import type { UpdateItemComplianceDetailsRequest } from '../models';
// @ts-ignore
import type { UpdateItemComplianceDetailsResponse } from '../models';
// @ts-ignore
import type { UpdateShipmentNameRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentSourceAddressRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentSourceAddressResponse } from '../models';
// @ts-ignore
import type { UpdateShipmentTrackingDetailsRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentTrackingDetailsResponse } from '../models';
/**
 * FulfillmentInboundApi - axios parameter creator
 * @export
 */
export const FulfillmentInboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelInboundPlan
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelSelfShipAppointment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, body: CancelSelfShipAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to confirm the delivery window option for.
         * @param {string} deliveryWindowOptionId The id of the delivery window option to be confirmed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, deliveryWindowOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'shipmentId', shipmentId)
            // verify required parameter 'deliveryWindowOptionId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'deliveryWindowOptionId', deliveryWindowOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"deliveryWindowOptionId"}}`, encodeURIComponent(String(deliveryWindowOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPackingOption
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingOptionId Identifier of a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption: async (inboundPlanId: string, packingOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPackingOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingOptionId' is not null or undefined
            assertParamExists('confirmPackingOption', 'packingOptionId', packingOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingOptionId"}}`, encodeURIComponent(String(packingOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPlacementOption
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption: async (inboundPlanId: string, placementOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'placementOptionId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'placementOptionId', placementOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"placementOptionId"}}`, encodeURIComponent(String(placementOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipmentContentUpdatePreview
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipmentContentUpdatePreview: async (inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'shipmentId', shipmentId)
            // verify required parameter 'contentUpdatePreviewId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'contentUpdatePreviewId', contentUpdatePreviewId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"contentUpdatePreviewId"}}`, encodeURIComponent(String(contentUpdatePreviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions: async (inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createInboundPlan
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan: async (body: CreateInboundPlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createInboundPlan', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createMarketplaceItemLabels
         * @param {CreateMarketplaceItemLabelsRequest} body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceItemLabels: async (body: CreateMarketplaceItemLabelsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createMarketplaceItemLabels', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to generate delivery window options for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateDeliveryWindowOptions', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePackingOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePlacementOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions: async (inboundPlanId: string, body: GeneratePlacementOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePlacementOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generatePlacementOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateSelfShipAppointmentSlots
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateShipmentContentUpdatePreviews
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateShipmentContentUpdatePreviewsRequest} body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipmentContentUpdatePreviews: async (inboundPlanId: string, shipmentId: string, body: GenerateShipmentContentUpdatePreviewsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions: async (inboundPlanId: string, body: GenerateTransportationOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getDeliveryChallanDocument
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundOperationStatus
         * @param {string} operationId Identifier of an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus: async (operationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getInboundOperationStatus', 'operationId', operationId)
            const localVarPath = `/inbound/fba/2024-03-20/operations/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundPlan
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getSelfShipAppointmentSlots
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getShipment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipmentContentUpdatePreview
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentContentUpdatePreview: async (inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'shipmentId', shipmentId)
            // verify required parameter 'contentUpdatePreviewId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'contentUpdatePreviewId', contentUpdatePreviewId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"contentUpdatePreviewId"}}`, encodeURIComponent(String(contentUpdatePreviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to get delivery window options for.
         * @param {number} [pageSize] The number of delivery window options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listDeliveryWindowOptions', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanBoxes', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanItems', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanPallets
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanPallets', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlans
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {ListInboundPlansStatusEnum} [status] The status of an inbound plan.
         * @param {ListInboundPlansSortByEnum} [sortBy] Sort by field.
         * @param {ListInboundPlansSortOrderEnum} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans: async (pageSize?: number, paginationToken?: string, status?: ListInboundPlansStatusEnum, sortBy?: ListInboundPlansSortByEnum, sortOrder?: ListInboundPlansSortOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listItemComplianceDetails
         * @param {Array<string>} mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails: async (mskus: Array<string>, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mskus' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'mskus', mskus)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'marketplaceId', marketplaceId)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mskus) {
                localVarQueryParameter['mskus'] = mskus;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupBoxes: async (inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingGroupBoxes', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingGroupId' is not null or undefined
            assertParamExists('listPackingGroupBoxes', 'packingGroupId', packingGroupId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingGroupId"}}`, encodeURIComponent(String(packingGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems: async (inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingGroupId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'packingGroupId', packingGroupId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingGroupId"}}`, encodeURIComponent(String(packingGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPlacementOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPlacementOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPrepDetails
         * @param {string} marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {Array<string>} mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPrepDetails: async (marketplaceId: string, mskus: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listPrepDetails', 'marketplaceId', marketplaceId)
            // verify required parameter 'mskus' is not null or undefined
            assertParamExists('listPrepDetails', 'mskus', mskus)
            const localVarPath = `/inbound/fba/2024-03-20/items/prepDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (mskus) {
                localVarQueryParameter['mskus'] = mskus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentBoxes: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentBoxes', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentBoxes', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentContentUpdatePreviews
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of content update previews to return.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentContentUpdatePreviews: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentContentUpdatePreviews', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentContentUpdatePreviews', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentItems: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentItems', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentItems', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentPallets
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentPallets: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentPallets', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentPallets', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listTransportationOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (placementOptionId !== undefined) {
                localVarQueryParameter['placementOptionId'] = placementOptionId;
            }

            if (shipmentId !== undefined) {
                localVarQueryParameter['shipmentId'] = shipmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary scheduleSelfShipAppointment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId An identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'slotId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'slotId', slotId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"slotId"}}`, encodeURIComponent(String(slotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPackingInformation
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation: async (inboundPlanId: string, body: SetPackingInformationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('setPackingInformation', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setPackingInformation', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPrepDetails
         * @param {SetPrepDetailsRequest} body The body of the request to &#x60;setPrepDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrepDetails: async (body: SetPrepDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setPrepDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/prepDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateInboundPlanName
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {UpdateInboundPlanNameRequest} body The body of the request to &#x60;updateInboundPlanName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundPlanName: async (inboundPlanId: string, body: UpdateInboundPlanNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateInboundPlanName', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateInboundPlanName', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateItemComplianceDetails
         * @param {string} marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails: async (marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentName
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentNameRequest} body The body of the request to &#x60;updateShipmentName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentName: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentName', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentName', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentName', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentSourceAddress
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentSourceAddressRequest} body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentSourceAddress: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentSourceAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentTrackingDetails
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FulfillmentInboundApi - functional programming interface
 * @export
 */
export const FulfillmentInboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FulfillmentInboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelInboundPlan
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInboundPlan(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInboundPlan(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.cancelInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelSelfShipAppointment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSelfShipAppointment(inboundPlanId: string, shipmentId: string, body: CancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSelfShipAppointment(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.cancelSelfShipAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to confirm the delivery window option for.
         * @param {string} deliveryWindowOptionId The id of the delivery window option to be confirmed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, deliveryWindowOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmDeliveryWindowOptions(inboundPlanId, shipmentId, deliveryWindowOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.confirmDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPackingOption
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingOptionId Identifier of a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPackingOption(inboundPlanId: string, packingOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPackingOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPackingOption(inboundPlanId, packingOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.confirmPackingOption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPlacementOption
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPlacementOption(inboundPlanId: string, placementOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPlacementOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPlacementOption(inboundPlanId, placementOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.confirmPlacementOption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipmentContentUpdatePreview
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmShipmentContentUpdatePreview(inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmShipmentContentUpdatePreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.confirmShipmentContentUpdatePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmTransportationOptions(inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmTransportationOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.confirmTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createInboundPlan
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInboundPlan(body: CreateInboundPlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInboundPlan(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.createInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createMarketplaceItemLabels
         * @param {CreateMarketplaceItemLabelsRequest} body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMarketplaceItemLabels(body: CreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMarketplaceItemLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMarketplaceItemLabels(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.createMarketplaceItemLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to generate delivery window options for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateDeliveryWindowOptions(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generateDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePackingOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePackingOptions(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePackingOptions(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generatePackingOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePlacementOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePlacementOptions(inboundPlanId: string, body: GeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePlacementOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generatePlacementOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateSelfShipAppointmentSlots
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generateSelfShipAppointmentSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateShipmentContentUpdatePreviews
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateShipmentContentUpdatePreviewsRequest} body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateShipmentContentUpdatePreviews(inboundPlanId: string, shipmentId: string, body: GenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateShipmentContentUpdatePreviewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateShipmentContentUpdatePreviews(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generateShipmentContentUpdatePreviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTransportationOptions(inboundPlanId: string, body: GenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTransportationOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.generateTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getDeliveryChallanDocument
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryChallanDocument(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeliveryChallanDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryChallanDocument(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getDeliveryChallanDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundOperationStatus
         * @param {string} operationId Identifier of an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundOperationStatus(operationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundOperationStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundOperationStatus(operationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getInboundOperationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundPlan
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundPlan(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundPlan(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getSelfShipAppointmentSlots
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfShipAppointmentSlots(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getSelfShipAppointmentSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getShipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipmentContentUpdatePreview
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentContentUpdatePreview(inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentUpdatePreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.getShipmentContentUpdatePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listDeliveryWindowOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to get delivery window options for.
         * @param {number} [pageSize] The number of delivery window options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDeliveryWindowOptions(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanBoxes(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanBoxes(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listInboundPlanBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanItems(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanItems(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listInboundPlanItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanPallets
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanPallets(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanPalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanPallets(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listInboundPlanPallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlans
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {ListInboundPlansStatusEnum} [status] The status of an inbound plan.
         * @param {ListInboundPlansSortByEnum} [sortBy] Sort by field.
         * @param {ListInboundPlansSortOrderEnum} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlans(pageSize?: number, paginationToken?: string, status?: ListInboundPlansStatusEnum, sortBy?: ListInboundPlansSortByEnum, sortOrder?: ListInboundPlansSortOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlans(pageSize, paginationToken, status, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listInboundPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listItemComplianceDetails
         * @param {Array<string>} mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItemComplianceDetails(mskus: Array<string>, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItemComplianceDetails(mskus, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listItemComplianceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingGroupBoxes(inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingGroupBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingGroupBoxes(inboundPlanId, packingGroupId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listPackingGroupBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingGroupItems(inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingGroupItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingGroupItems(inboundPlanId, packingGroupId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listPackingGroupItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingOptions(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listPackingOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPlacementOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlacementOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlacementOptions(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listPlacementOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPrepDetails
         * @param {string} marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {Array<string>} mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPrepDetails(marketplaceId: string, mskus: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPrepDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPrepDetails(marketplaceId, mskus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listPrepDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentBoxes
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentBoxes(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentBoxes(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listShipmentBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentContentUpdatePreviews
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of content update previews to return.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentContentUpdatePreviews(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentContentUpdatePreviewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentContentUpdatePreviews(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listShipmentContentUpdatePreviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentItems
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentItems(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentItems(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listShipmentItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentPallets
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentPallets(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentPalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentPallets(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listShipmentPallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listTransportationOptions
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransportationOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransportationOptions(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.listTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary scheduleSelfShipAppointment
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId An identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.scheduleSelfShipAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPackingInformation
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPackingInformation(inboundPlanId: string, body: SetPackingInformationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPackingInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPackingInformation(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.setPackingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPrepDetails
         * @param {SetPrepDetailsRequest} body The body of the request to &#x60;setPrepDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPrepDetails(body: SetPrepDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPrepDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPrepDetails(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.setPrepDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateInboundPlanName
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {UpdateInboundPlanNameRequest} body The body of the request to &#x60;updateInboundPlanName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInboundPlanName(inboundPlanId: string, body: UpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInboundPlanName(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.updateInboundPlanName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateItemComplianceDetails
         * @param {string} marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemComplianceDetails(marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemComplianceDetails(marketplaceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.updateItemComplianceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentName
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentNameRequest} body The body of the request to &#x60;updateShipmentName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentName(inboundPlanId: string, shipmentId: string, body: UpdateShipmentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentName(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.updateShipmentName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentSourceAddress
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentSourceAddressRequest} body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentSourceAddress(inboundPlanId: string, shipmentId: string, body: UpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentSourceAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentSourceAddress(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.updateShipmentSourceAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentTrackingDetails
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentTrackingDetails(inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentTrackingDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentTrackingDetails(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FulfillmentInboundApi.updateShipmentTrackingDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FulfillmentInboundApi - factory interface
 * @export
 */
export const FulfillmentInboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FulfillmentInboundApiFp(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelInboundPlan
         * @param {FulfillmentInboundApiCancelInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan(requestParameters: FulfillmentInboundApiCancelInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelInboundPlanResponse> {
            return localVarFp.cancelInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary cancelSelfShipAppointment
         * @param {FulfillmentInboundApiCancelSelfShipAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment(requestParameters: FulfillmentInboundApiCancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelSelfShipAppointmentResponse> {
            return localVarFp.cancelSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmDeliveryWindowOptions
         * @param {FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmDeliveryWindowOptions(requestParameters: FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmDeliveryWindowOptionsResponse> {
            return localVarFp.confirmDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.deliveryWindowOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPackingOption
         * @param {FulfillmentInboundApiConfirmPackingOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption(requestParameters: FulfillmentInboundApiConfirmPackingOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmPackingOptionResponse> {
            return localVarFp.confirmPackingOption(requestParameters.inboundPlanId, requestParameters.packingOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmPlacementOption
         * @param {FulfillmentInboundApiConfirmPlacementOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption(requestParameters: FulfillmentInboundApiConfirmPlacementOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmPlacementOptionResponse> {
            return localVarFp.confirmPlacementOption(requestParameters.inboundPlanId, requestParameters.placementOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipmentContentUpdatePreview
         * @param {FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipmentContentUpdatePreview(requestParameters: FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmShipmentContentUpdatePreviewResponse> {
            return localVarFp.confirmShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmTransportationOptions
         * @param {FulfillmentInboundApiConfirmTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions(requestParameters: FulfillmentInboundApiConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmTransportationOptionsResponse> {
            return localVarFp.confirmTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createInboundPlan
         * @param {FulfillmentInboundApiCreateInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan(requestParameters: FulfillmentInboundApiCreateInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateInboundPlanResponse> {
            return localVarFp.createInboundPlan(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary createMarketplaceItemLabels
         * @param {FulfillmentInboundApiCreateMarketplaceItemLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceItemLabels(requestParameters: FulfillmentInboundApiCreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateMarketplaceItemLabelsResponse> {
            return localVarFp.createMarketplaceItemLabels(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateDeliveryWindowOptions
         * @param {FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDeliveryWindowOptions(requestParameters: FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateDeliveryWindowOptionsResponse> {
            return localVarFp.generateDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePackingOptions
         * @param {FulfillmentInboundApiGeneratePackingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions(requestParameters: FulfillmentInboundApiGeneratePackingOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneratePackingOptionsResponse> {
            return localVarFp.generatePackingOptions(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generatePlacementOptions
         * @param {FulfillmentInboundApiGeneratePlacementOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions(requestParameters: FulfillmentInboundApiGeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneratePlacementOptionsResponse> {
            return localVarFp.generatePlacementOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateSelfShipAppointmentSlots
         * @param {FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots(requestParameters: FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateSelfShipAppointmentSlotsResponse> {
            return localVarFp.generateSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateShipmentContentUpdatePreviews
         * @param {FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipmentContentUpdatePreviews(requestParameters: FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateShipmentContentUpdatePreviewsResponse> {
            return localVarFp.generateShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary generateTransportationOptions
         * @param {FulfillmentInboundApiGenerateTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions(requestParameters: FulfillmentInboundApiGenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateTransportationOptionsResponse> {
            return localVarFp.generateTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getDeliveryChallanDocument
         * @param {FulfillmentInboundApiGetDeliveryChallanDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument(requestParameters: FulfillmentInboundApiGetDeliveryChallanDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetDeliveryChallanDocumentResponse> {
            return localVarFp.getDeliveryChallanDocument(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundOperationStatus
         * @param {FulfillmentInboundApiGetInboundOperationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus(requestParameters: FulfillmentInboundApiGetInboundOperationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundOperationStatus> {
            return localVarFp.getInboundOperationStatus(requestParameters.operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getInboundPlan
         * @param {FulfillmentInboundApiGetInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan(requestParameters: FulfillmentInboundApiGetInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundPlan> {
            return localVarFp.getInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getSelfShipAppointmentSlots
         * @param {FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots(requestParameters: FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetSelfShipAppointmentSlotsResponse> {
            return localVarFp.getSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipment
         * @param {FulfillmentInboundApiGetShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(requestParameters: FulfillmentInboundApiGetShipmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Shipment> {
            return localVarFp.getShipment(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getShipmentContentUpdatePreview
         * @param {FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentContentUpdatePreview(requestParameters: FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContentUpdatePreview> {
            return localVarFp.getShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listDeliveryWindowOptions
         * @param {FulfillmentInboundApiListDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryWindowOptions(requestParameters: FulfillmentInboundApiListDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListDeliveryWindowOptionsResponse> {
            return localVarFp.listDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanBoxes
         * @param {FulfillmentInboundApiListInboundPlanBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes(requestParameters: FulfillmentInboundApiListInboundPlanBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanBoxesResponse> {
            return localVarFp.listInboundPlanBoxes(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanItems
         * @param {FulfillmentInboundApiListInboundPlanItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems(requestParameters: FulfillmentInboundApiListInboundPlanItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanItemsResponse> {
            return localVarFp.listInboundPlanItems(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlanPallets
         * @param {FulfillmentInboundApiListInboundPlanPalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets(requestParameters: FulfillmentInboundApiListInboundPlanPalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanPalletsResponse> {
            return localVarFp.listInboundPlanPallets(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listInboundPlans
         * @param {FulfillmentInboundApiListInboundPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans(requestParameters: FulfillmentInboundApiListInboundPlansRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlansResponse> {
            return localVarFp.listInboundPlans(requestParameters.pageSize, requestParameters.paginationToken, requestParameters.status, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listItemComplianceDetails
         * @param {FulfillmentInboundApiListItemComplianceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails(requestParameters: FulfillmentInboundApiListItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListItemComplianceDetailsResponse> {
            return localVarFp.listItemComplianceDetails(requestParameters.mskus, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupBoxes
         * @param {FulfillmentInboundApiListPackingGroupBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupBoxes(requestParameters: FulfillmentInboundApiListPackingGroupBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingGroupBoxesResponse> {
            return localVarFp.listPackingGroupBoxes(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingGroupItems
         * @param {FulfillmentInboundApiListPackingGroupItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems(requestParameters: FulfillmentInboundApiListPackingGroupItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingGroupItemsResponse> {
            return localVarFp.listPackingGroupItems(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPackingOptions
         * @param {FulfillmentInboundApiListPackingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions(requestParameters: FulfillmentInboundApiListPackingOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingOptionsResponse> {
            return localVarFp.listPackingOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPlacementOptions
         * @param {FulfillmentInboundApiListPlacementOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions(requestParameters: FulfillmentInboundApiListPlacementOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPlacementOptionsResponse> {
            return localVarFp.listPlacementOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listPrepDetails
         * @param {FulfillmentInboundApiListPrepDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPrepDetails(requestParameters: FulfillmentInboundApiListPrepDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPrepDetailsResponse> {
            return localVarFp.listPrepDetails(requestParameters.marketplaceId, requestParameters.mskus, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentBoxes
         * @param {FulfillmentInboundApiListShipmentBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentBoxes(requestParameters: FulfillmentInboundApiListShipmentBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentBoxesResponse> {
            return localVarFp.listShipmentBoxes(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentContentUpdatePreviews
         * @param {FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentContentUpdatePreviews(requestParameters: FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentContentUpdatePreviewsResponse> {
            return localVarFp.listShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentItems
         * @param {FulfillmentInboundApiListShipmentItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentItems(requestParameters: FulfillmentInboundApiListShipmentItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentItemsResponse> {
            return localVarFp.listShipmentItems(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listShipmentPallets
         * @param {FulfillmentInboundApiListShipmentPalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentPallets(requestParameters: FulfillmentInboundApiListShipmentPalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentPalletsResponse> {
            return localVarFp.listShipmentPallets(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary listTransportationOptions
         * @param {FulfillmentInboundApiListTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions(requestParameters: FulfillmentInboundApiListTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTransportationOptionsResponse> {
            return localVarFp.listTransportationOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, requestParameters.placementOptionId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary scheduleSelfShipAppointment
         * @param {FulfillmentInboundApiScheduleSelfShipAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment(requestParameters: FulfillmentInboundApiScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScheduleSelfShipAppointmentResponse> {
            return localVarFp.scheduleSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPackingInformation
         * @param {FulfillmentInboundApiSetPackingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation(requestParameters: FulfillmentInboundApiSetPackingInformationRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetPackingInformationResponse> {
            return localVarFp.setPackingInformation(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary setPrepDetails
         * @param {FulfillmentInboundApiSetPrepDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrepDetails(requestParameters: FulfillmentInboundApiSetPrepDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetPrepDetailsResponse> {
            return localVarFp.setPrepDetails(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateInboundPlanName
         * @param {FulfillmentInboundApiUpdateInboundPlanNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundPlanName(requestParameters: FulfillmentInboundApiUpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInboundPlanName(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateItemComplianceDetails
         * @param {FulfillmentInboundApiUpdateItemComplianceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails(requestParameters: FulfillmentInboundApiUpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateItemComplianceDetailsResponse> {
            return localVarFp.updateItemComplianceDetails(requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentName
         * @param {FulfillmentInboundApiUpdateShipmentNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentName(requestParameters: FulfillmentInboundApiUpdateShipmentNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateShipmentName(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentSourceAddress
         * @param {FulfillmentInboundApiUpdateShipmentSourceAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentSourceAddress(requestParameters: FulfillmentInboundApiUpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateShipmentSourceAddressResponse> {
            return localVarFp.updateShipmentSourceAddress(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentTrackingDetails
         * @param {FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails(requestParameters: FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateShipmentTrackingDetailsResponse> {
            return localVarFp.updateShipmentTrackingDetails(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelInboundPlan operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiCancelInboundPlanRequest
 */
export interface FulfillmentInboundApiCancelInboundPlanRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiCancelInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for cancelSelfShipAppointment operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiCancelSelfShipAppointmentRequest
 */
export interface FulfillmentInboundApiCancelSelfShipAppointmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiCancelSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiCancelSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
     * @type {CancelSelfShipAppointmentRequest}
     * @memberof FulfillmentInboundApiCancelSelfShipAppointment
     */
    readonly body: CancelSelfShipAppointmentRequest
}

/**
 * Request parameters for confirmDeliveryWindowOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest
 */
export interface FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to confirm the delivery window option for.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmDeliveryWindowOptions
     */
    readonly shipmentId: string

    /**
     * The id of the delivery window option to be confirmed.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmDeliveryWindowOptions
     */
    readonly deliveryWindowOptionId: string
}

/**
 * Request parameters for confirmPackingOption operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiConfirmPackingOptionRequest
 */
export interface FulfillmentInboundApiConfirmPackingOptionRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmPackingOption
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing option.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmPackingOption
     */
    readonly packingOptionId: string
}

/**
 * Request parameters for confirmPlacementOption operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiConfirmPlacementOptionRequest
 */
export interface FulfillmentInboundApiConfirmPlacementOptionRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmPlacementOption
     */
    readonly inboundPlanId: string

    /**
     * The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmPlacementOption
     */
    readonly placementOptionId: string
}

/**
 * Request parameters for confirmShipmentContentUpdatePreview operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest
 */
export interface FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly shipmentId: string

    /**
     * Identifier of a content update preview.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly contentUpdatePreviewId: string
}

/**
 * Request parameters for confirmTransportationOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiConfirmTransportationOptionsRequest
 */
export interface FulfillmentInboundApiConfirmTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiConfirmTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;confirmTransportationOptions&#x60;.
     * @type {ConfirmTransportationOptionsRequest}
     * @memberof FulfillmentInboundApiConfirmTransportationOptions
     */
    readonly body: ConfirmTransportationOptionsRequest
}

/**
 * Request parameters for createInboundPlan operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiCreateInboundPlanRequest
 */
export interface FulfillmentInboundApiCreateInboundPlanRequest {
    /**
     * The body of the request to &#x60;createInboundPlan&#x60;.
     * @type {CreateInboundPlanRequest}
     * @memberof FulfillmentInboundApiCreateInboundPlan
     */
    readonly body: CreateInboundPlanRequest
}

/**
 * Request parameters for createMarketplaceItemLabels operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiCreateMarketplaceItemLabelsRequest
 */
export interface FulfillmentInboundApiCreateMarketplaceItemLabelsRequest {
    /**
     * The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
     * @type {CreateMarketplaceItemLabelsRequest}
     * @memberof FulfillmentInboundApiCreateMarketplaceItemLabels
     */
    readonly body: CreateMarketplaceItemLabelsRequest
}

/**
 * Request parameters for generateDeliveryWindowOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest
 */
export interface FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to generate delivery window options for.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateDeliveryWindowOptions
     */
    readonly shipmentId: string
}

/**
 * Request parameters for generatePackingOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGeneratePackingOptionsRequest
 */
export interface FulfillmentInboundApiGeneratePackingOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGeneratePackingOptions
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for generatePlacementOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGeneratePlacementOptionsRequest
 */
export interface FulfillmentInboundApiGeneratePlacementOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGeneratePlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generatePlacementOptions&#x60;.
     * @type {GeneratePlacementOptionsRequest}
     * @memberof FulfillmentInboundApiGeneratePlacementOptions
     */
    readonly body: GeneratePlacementOptionsRequest
}

/**
 * Request parameters for generateSelfShipAppointmentSlots operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest
 */
export interface FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
     * @type {GenerateSelfShipAppointmentSlotsRequest}
     * @memberof FulfillmentInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly body: GenerateSelfShipAppointmentSlotsRequest
}

/**
 * Request parameters for generateShipmentContentUpdatePreviews operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest
 */
export interface FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
     * @type {GenerateShipmentContentUpdatePreviewsRequest}
     * @memberof FulfillmentInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly body: GenerateShipmentContentUpdatePreviewsRequest
}

/**
 * Request parameters for generateTransportationOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGenerateTransportationOptionsRequest
 */
export interface FulfillmentInboundApiGenerateTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGenerateTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generateTransportationOptions&#x60;.
     * @type {GenerateTransportationOptionsRequest}
     * @memberof FulfillmentInboundApiGenerateTransportationOptions
     */
    readonly body: GenerateTransportationOptionsRequest
}

/**
 * Request parameters for getDeliveryChallanDocument operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetDeliveryChallanDocumentRequest
 */
export interface FulfillmentInboundApiGetDeliveryChallanDocumentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGetDeliveryChallanDocument
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGetDeliveryChallanDocument
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getInboundOperationStatus operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetInboundOperationStatusRequest
 */
export interface FulfillmentInboundApiGetInboundOperationStatusRequest {
    /**
     * Identifier of an asynchronous operation.
     * @type {string}
     * @memberof FulfillmentInboundApiGetInboundOperationStatus
     */
    readonly operationId: string
}

/**
 * Request parameters for getInboundPlan operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetInboundPlanRequest
 */
export interface FulfillmentInboundApiGetInboundPlanRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGetInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for getSelfShipAppointmentSlots operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest
 */
export interface FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGetSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGetSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The number of self ship appointment slots to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiGetSelfShipAppointmentSlots
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiGetSelfShipAppointmentSlots
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for getShipment operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetShipmentRequest
 */
export interface FulfillmentInboundApiGetShipmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGetShipment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGetShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getShipmentContentUpdatePreview operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest
 */
export interface FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiGetShipmentContentUpdatePreview
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiGetShipmentContentUpdatePreview
     */
    readonly shipmentId: string

    /**
     * Identifier of a content update preview.
     * @type {string}
     * @memberof FulfillmentInboundApiGetShipmentContentUpdatePreview
     */
    readonly contentUpdatePreviewId: string
}

/**
 * Request parameters for listDeliveryWindowOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListDeliveryWindowOptionsRequest
 */
export interface FulfillmentInboundApiListDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to get delivery window options for.
     * @type {string}
     * @memberof FulfillmentInboundApiListDeliveryWindowOptions
     */
    readonly shipmentId: string

    /**
     * The number of delivery window options to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListDeliveryWindowOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListDeliveryWindowOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanBoxes operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListInboundPlanBoxesRequest
 */
export interface FulfillmentInboundApiListInboundPlanBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanBoxes
     */
    readonly inboundPlanId: string

    /**
     * The number of boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListInboundPlanBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanItems operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListInboundPlanItemsRequest
 */
export interface FulfillmentInboundApiListInboundPlanItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanItems
     */
    readonly inboundPlanId: string

    /**
     * The number of items to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListInboundPlanItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanPallets operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListInboundPlanPalletsRequest
 */
export interface FulfillmentInboundApiListInboundPlanPalletsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanPallets
     */
    readonly inboundPlanId: string

    /**
     * The number of pallets to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListInboundPlanPallets
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlanPallets
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlans operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListInboundPlansRequest
 */
export interface FulfillmentInboundApiListInboundPlansRequest {
    /**
     * The number of inbound plans to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListInboundPlans
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListInboundPlans
     */
    readonly paginationToken?: string

    /**
     * The status of an inbound plan.
     * @type {'ACTIVE' | 'VOIDED' | 'SHIPPED'}
     * @memberof FulfillmentInboundApiListInboundPlans
     */
    readonly status?: ListInboundPlansStatusEnum

    /**
     * Sort by field.
     * @type {'LAST_UPDATED_TIME' | 'CREATION_TIME'}
     * @memberof FulfillmentInboundApiListInboundPlans
     */
    readonly sortBy?: ListInboundPlansSortByEnum

    /**
     * The sort order.
     * @type {'ASC' | 'DESC'}
     * @memberof FulfillmentInboundApiListInboundPlans
     */
    readonly sortOrder?: ListInboundPlansSortOrderEnum
}

/**
 * Request parameters for listItemComplianceDetails operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListItemComplianceDetailsRequest
 */
export interface FulfillmentInboundApiListItemComplianceDetailsRequest {
    /**
     * A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
     * @type {Array<string>}
     * @memberof FulfillmentInboundApiListItemComplianceDetails
     */
    readonly mskus: Array<string>

    /**
     * The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof FulfillmentInboundApiListItemComplianceDetails
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listPackingGroupBoxes operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListPackingGroupBoxesRequest
 */
export interface FulfillmentInboundApiListPackingGroupBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupBoxes
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing group.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupBoxes
     */
    readonly packingGroupId: string

    /**
     * The number of packing group boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListPackingGroupBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPackingGroupItems operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListPackingGroupItemsRequest
 */
export interface FulfillmentInboundApiListPackingGroupItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupItems
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing group.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupItems
     */
    readonly packingGroupId: string

    /**
     * The number of packing group items to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListPackingGroupItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingGroupItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPackingOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListPackingOptionsRequest
 */
export interface FulfillmentInboundApiListPackingOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of packing options to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListPackingOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListPackingOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPlacementOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListPlacementOptionsRequest
 */
export interface FulfillmentInboundApiListPlacementOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListPlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of placement options to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListPlacementOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListPlacementOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPrepDetails operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListPrepDetailsRequest
 */
export interface FulfillmentInboundApiListPrepDetailsRequest {
    /**
     * The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof FulfillmentInboundApiListPrepDetails
     */
    readonly marketplaceId: string

    /**
     * A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
     * @type {Array<string>}
     * @memberof FulfillmentInboundApiListPrepDetails
     */
    readonly mskus: Array<string>
}

/**
 * Request parameters for listShipmentBoxes operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListShipmentBoxesRequest
 */
export interface FulfillmentInboundApiListShipmentBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentBoxes
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentBoxes
     */
    readonly shipmentId: string

    /**
     * The number of boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListShipmentBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentContentUpdatePreviews operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest
 */
export interface FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentContentUpdatePreviews
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentContentUpdatePreviews
     */
    readonly shipmentId: string

    /**
     * The number of content update previews to return.
     * @type {number}
     * @memberof FulfillmentInboundApiListShipmentContentUpdatePreviews
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentContentUpdatePreviews
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentItems operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListShipmentItemsRequest
 */
export interface FulfillmentInboundApiListShipmentItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentItems
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentItems
     */
    readonly shipmentId: string

    /**
     * The number of items to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListShipmentItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentPallets operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListShipmentPalletsRequest
 */
export interface FulfillmentInboundApiListShipmentPalletsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentPallets
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentPallets
     */
    readonly shipmentId: string

    /**
     * The number of pallets to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListShipmentPallets
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListShipmentPallets
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listTransportationOptions operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiListTransportationOptionsRequest
 */
export interface FulfillmentInboundApiListTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiListTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of transportation options to return in the response matching the given query.
     * @type {number}
     * @memberof FulfillmentInboundApiListTransportationOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FulfillmentInboundApiListTransportationOptions
     */
    readonly paginationToken?: string

    /**
     * The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
     * @type {string}
     * @memberof FulfillmentInboundApiListTransportationOptions
     */
    readonly placementOptionId?: string

    /**
     * The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
     * @type {string}
     * @memberof FulfillmentInboundApiListTransportationOptions
     */
    readonly shipmentId?: string
}

/**
 * Request parameters for scheduleSelfShipAppointment operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiScheduleSelfShipAppointmentRequest
 */
export interface FulfillmentInboundApiScheduleSelfShipAppointmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiScheduleSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiScheduleSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * An identifier to a self-ship appointment slot.
     * @type {string}
     * @memberof FulfillmentInboundApiScheduleSelfShipAppointment
     */
    readonly slotId: string

    /**
     * The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
     * @type {ScheduleSelfShipAppointmentRequest}
     * @memberof FulfillmentInboundApiScheduleSelfShipAppointment
     */
    readonly body: ScheduleSelfShipAppointmentRequest
}

/**
 * Request parameters for setPackingInformation operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiSetPackingInformationRequest
 */
export interface FulfillmentInboundApiSetPackingInformationRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiSetPackingInformation
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;setPackingInformation&#x60;.
     * @type {SetPackingInformationRequest}
     * @memberof FulfillmentInboundApiSetPackingInformation
     */
    readonly body: SetPackingInformationRequest
}

/**
 * Request parameters for setPrepDetails operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiSetPrepDetailsRequest
 */
export interface FulfillmentInboundApiSetPrepDetailsRequest {
    /**
     * The body of the request to &#x60;setPrepDetails&#x60;.
     * @type {SetPrepDetailsRequest}
     * @memberof FulfillmentInboundApiSetPrepDetails
     */
    readonly body: SetPrepDetailsRequest
}

/**
 * Request parameters for updateInboundPlanName operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiUpdateInboundPlanNameRequest
 */
export interface FulfillmentInboundApiUpdateInboundPlanNameRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateInboundPlanName
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;updateInboundPlanName&#x60;.
     * @type {UpdateInboundPlanNameRequest}
     * @memberof FulfillmentInboundApiUpdateInboundPlanName
     */
    readonly body: UpdateInboundPlanNameRequest
}

/**
 * Request parameters for updateItemComplianceDetails operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiUpdateItemComplianceDetailsRequest
 */
export interface FulfillmentInboundApiUpdateItemComplianceDetailsRequest {
    /**
     * The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateItemComplianceDetails
     */
    readonly marketplaceId: string

    /**
     * The body of the request to &#x60;updateItemComplianceDetails&#x60;.
     * @type {UpdateItemComplianceDetailsRequest}
     * @memberof FulfillmentInboundApiUpdateItemComplianceDetails
     */
    readonly body: UpdateItemComplianceDetailsRequest
}

/**
 * Request parameters for updateShipmentName operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiUpdateShipmentNameRequest
 */
export interface FulfillmentInboundApiUpdateShipmentNameRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentName
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentName
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentName&#x60;.
     * @type {UpdateShipmentNameRequest}
     * @memberof FulfillmentInboundApiUpdateShipmentName
     */
    readonly body: UpdateShipmentNameRequest
}

/**
 * Request parameters for updateShipmentSourceAddress operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiUpdateShipmentSourceAddressRequest
 */
export interface FulfillmentInboundApiUpdateShipmentSourceAddressRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentSourceAddress
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentSourceAddress
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
     * @type {UpdateShipmentSourceAddressRequest}
     * @memberof FulfillmentInboundApiUpdateShipmentSourceAddress
     */
    readonly body: UpdateShipmentSourceAddressRequest
}

/**
 * Request parameters for updateShipmentTrackingDetails operation in FulfillmentInboundApi.
 * @export
 * @interface FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest
 */
export interface FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentTrackingDetails
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FulfillmentInboundApiUpdateShipmentTrackingDetails
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
     * @type {UpdateShipmentTrackingDetailsRequest}
     * @memberof FulfillmentInboundApiUpdateShipmentTrackingDetails
     */
    readonly body: UpdateShipmentTrackingDetailsRequest
}

/**
 * FulfillmentInboundApi - object-oriented interface
 * @export
 * @class FulfillmentInboundApi
 * @extends {BaseAPI}
 */
export class FulfillmentInboundApi extends BaseAPI {
    /**
     * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary cancelInboundPlan
     * @param {FulfillmentInboundApiCancelInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public cancelInboundPlan(requestParameters: FulfillmentInboundApiCancelInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).cancelInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary cancelSelfShipAppointment
     * @param {FulfillmentInboundApiCancelSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public cancelSelfShipAppointment(requestParameters: FulfillmentInboundApiCancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).cancelSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmDeliveryWindowOptions
     * @param {FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public confirmDeliveryWindowOptions(requestParameters: FulfillmentInboundApiConfirmDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).confirmDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.deliveryWindowOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmPackingOption
     * @param {FulfillmentInboundApiConfirmPackingOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public confirmPackingOption(requestParameters: FulfillmentInboundApiConfirmPackingOptionRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).confirmPackingOption(requestParameters.inboundPlanId, requestParameters.packingOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmPlacementOption
     * @param {FulfillmentInboundApiConfirmPlacementOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public confirmPlacementOption(requestParameters: FulfillmentInboundApiConfirmPlacementOptionRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).confirmPlacementOption(requestParameters.inboundPlanId, requestParameters.placementOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmShipmentContentUpdatePreview
     * @param {FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public confirmShipmentContentUpdatePreview(requestParameters: FulfillmentInboundApiConfirmShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).confirmShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmTransportationOptions
     * @param {FulfillmentInboundApiConfirmTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public confirmTransportationOptions(requestParameters: FulfillmentInboundApiConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).confirmTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary createInboundPlan
     * @param {FulfillmentInboundApiCreateInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public createInboundPlan(requestParameters: FulfillmentInboundApiCreateInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).createInboundPlan(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary createMarketplaceItemLabels
     * @param {FulfillmentInboundApiCreateMarketplaceItemLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public createMarketplaceItemLabels(requestParameters: FulfillmentInboundApiCreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).createMarketplaceItemLabels(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generateDeliveryWindowOptions
     * @param {FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generateDeliveryWindowOptions(requestParameters: FulfillmentInboundApiGenerateDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generateDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generatePackingOptions
     * @param {FulfillmentInboundApiGeneratePackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generatePackingOptions(requestParameters: FulfillmentInboundApiGeneratePackingOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generatePackingOptions(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generatePlacementOptions
     * @param {FulfillmentInboundApiGeneratePlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generatePlacementOptions(requestParameters: FulfillmentInboundApiGeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generatePlacementOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generateSelfShipAppointmentSlots
     * @param {FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generateSelfShipAppointmentSlots(requestParameters: FulfillmentInboundApiGenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generateSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generateShipmentContentUpdatePreviews
     * @param {FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generateShipmentContentUpdatePreviews(requestParameters: FulfillmentInboundApiGenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generateShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary generateTransportationOptions
     * @param {FulfillmentInboundApiGenerateTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public generateTransportationOptions(requestParameters: FulfillmentInboundApiGenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).generateTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getDeliveryChallanDocument
     * @param {FulfillmentInboundApiGetDeliveryChallanDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getDeliveryChallanDocument(requestParameters: FulfillmentInboundApiGetDeliveryChallanDocumentRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getDeliveryChallanDocument(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getInboundOperationStatus
     * @param {FulfillmentInboundApiGetInboundOperationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getInboundOperationStatus(requestParameters: FulfillmentInboundApiGetInboundOperationStatusRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getInboundOperationStatus(requestParameters.operationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getInboundPlan
     * @param {FulfillmentInboundApiGetInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getInboundPlan(requestParameters: FulfillmentInboundApiGetInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getSelfShipAppointmentSlots
     * @param {FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getSelfShipAppointmentSlots(requestParameters: FulfillmentInboundApiGetSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getShipment
     * @param {FulfillmentInboundApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getShipment(requestParameters: FulfillmentInboundApiGetShipmentRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getShipment(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getShipmentContentUpdatePreview
     * @param {FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public getShipmentContentUpdatePreview(requestParameters: FulfillmentInboundApiGetShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).getShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listDeliveryWindowOptions
     * @param {FulfillmentInboundApiListDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listDeliveryWindowOptions(requestParameters: FulfillmentInboundApiListDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listInboundPlanBoxes
     * @param {FulfillmentInboundApiListInboundPlanBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listInboundPlanBoxes(requestParameters: FulfillmentInboundApiListInboundPlanBoxesRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listInboundPlanBoxes(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listInboundPlanItems
     * @param {FulfillmentInboundApiListInboundPlanItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listInboundPlanItems(requestParameters: FulfillmentInboundApiListInboundPlanItemsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listInboundPlanItems(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listInboundPlanPallets
     * @param {FulfillmentInboundApiListInboundPlanPalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listInboundPlanPallets(requestParameters: FulfillmentInboundApiListInboundPlanPalletsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listInboundPlanPallets(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listInboundPlans
     * @param {FulfillmentInboundApiListInboundPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listInboundPlans(requestParameters: FulfillmentInboundApiListInboundPlansRequest = {}, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listInboundPlans(requestParameters.pageSize, requestParameters.paginationToken, requestParameters.status, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listItemComplianceDetails
     * @param {FulfillmentInboundApiListItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listItemComplianceDetails(requestParameters: FulfillmentInboundApiListItemComplianceDetailsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listItemComplianceDetails(requestParameters.mskus, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listPackingGroupBoxes
     * @param {FulfillmentInboundApiListPackingGroupBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listPackingGroupBoxes(requestParameters: FulfillmentInboundApiListPackingGroupBoxesRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listPackingGroupBoxes(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listPackingGroupItems
     * @param {FulfillmentInboundApiListPackingGroupItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listPackingGroupItems(requestParameters: FulfillmentInboundApiListPackingGroupItemsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listPackingGroupItems(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listPackingOptions
     * @param {FulfillmentInboundApiListPackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listPackingOptions(requestParameters: FulfillmentInboundApiListPackingOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listPackingOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listPlacementOptions
     * @param {FulfillmentInboundApiListPlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listPlacementOptions(requestParameters: FulfillmentInboundApiListPlacementOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listPlacementOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listPrepDetails
     * @param {FulfillmentInboundApiListPrepDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listPrepDetails(requestParameters: FulfillmentInboundApiListPrepDetailsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listPrepDetails(requestParameters.marketplaceId, requestParameters.mskus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listShipmentBoxes
     * @param {FulfillmentInboundApiListShipmentBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listShipmentBoxes(requestParameters: FulfillmentInboundApiListShipmentBoxesRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listShipmentBoxes(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listShipmentContentUpdatePreviews
     * @param {FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listShipmentContentUpdatePreviews(requestParameters: FulfillmentInboundApiListShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listShipmentItems
     * @param {FulfillmentInboundApiListShipmentItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listShipmentItems(requestParameters: FulfillmentInboundApiListShipmentItemsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listShipmentItems(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listShipmentPallets
     * @param {FulfillmentInboundApiListShipmentPalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listShipmentPallets(requestParameters: FulfillmentInboundApiListShipmentPalletsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listShipmentPallets(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary listTransportationOptions
     * @param {FulfillmentInboundApiListTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public listTransportationOptions(requestParameters: FulfillmentInboundApiListTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).listTransportationOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, requestParameters.placementOptionId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary scheduleSelfShipAppointment
     * @param {FulfillmentInboundApiScheduleSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public scheduleSelfShipAppointment(requestParameters: FulfillmentInboundApiScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).scheduleSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary setPackingInformation
     * @param {FulfillmentInboundApiSetPackingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public setPackingInformation(requestParameters: FulfillmentInboundApiSetPackingInformationRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).setPackingInformation(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary setPrepDetails
     * @param {FulfillmentInboundApiSetPrepDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public setPrepDetails(requestParameters: FulfillmentInboundApiSetPrepDetailsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).setPrepDetails(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateInboundPlanName
     * @param {FulfillmentInboundApiUpdateInboundPlanNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public updateInboundPlanName(requestParameters: FulfillmentInboundApiUpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).updateInboundPlanName(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateItemComplianceDetails
     * @param {FulfillmentInboundApiUpdateItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public updateItemComplianceDetails(requestParameters: FulfillmentInboundApiUpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).updateItemComplianceDetails(requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateShipmentName
     * @param {FulfillmentInboundApiUpdateShipmentNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public updateShipmentName(requestParameters: FulfillmentInboundApiUpdateShipmentNameRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).updateShipmentName(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateShipmentSourceAddress
     * @param {FulfillmentInboundApiUpdateShipmentSourceAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public updateShipmentSourceAddress(requestParameters: FulfillmentInboundApiUpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).updateShipmentSourceAddress(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateShipmentTrackingDetails
     * @param {FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentInboundApi
     */
    public updateShipmentTrackingDetails(requestParameters: FulfillmentInboundApiUpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig) {
        return FulfillmentInboundApiFp(this.configuration).updateShipmentTrackingDetails(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListInboundPlansStatusEnum = {
    Active: 'ACTIVE',
    Voided: 'VOIDED',
    Shipped: 'SHIPPED'
} as const;
export type ListInboundPlansStatusEnum = typeof ListInboundPlansStatusEnum[keyof typeof ListInboundPlansStatusEnum];
/**
 * @export
 */
export const ListInboundPlansSortByEnum = {
    LastUpdatedTime: 'LAST_UPDATED_TIME',
    CreationTime: 'CREATION_TIME'
} as const;
export type ListInboundPlansSortByEnum = typeof ListInboundPlansSortByEnum[keyof typeof ListInboundPlansSortByEnum];
/**
 * @export
 */
export const ListInboundPlansSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type ListInboundPlansSortOrderEnum = typeof ListInboundPlansSortOrderEnum[keyof typeof ListInboundPlansSortOrderEnum];
