/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data
 * The Selling Partner API for Vendor Direct Fulfillment Sandbox Test Data provides programmatic access to vendor direct fulfillment sandbox test data.
 *
 * The version of the OpenAPI document: 2021-10-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorList } from '../models';
// @ts-ignore
import { TransactionStatus } from '../models';
/**
 * VendorDFSandboxtransactionstatusApi - axios parameter creator
 * @export
 */
export const VendorDFSandboxtransactionstatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data.
         * @param {string} transactionId The transaction identifier returned in the response to the generateOrderScenarios operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderScenarios: async (transactionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getOrderScenarios', 'transactionId', transactionId)
            const localVarPath = `/vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorDFSandboxtransactionstatusApi - functional programming interface
 * @export
 */
export const VendorDFSandboxtransactionstatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorDFSandboxtransactionstatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data.
         * @param {string} transactionId The transaction identifier returned in the response to the generateOrderScenarios operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderScenarios(transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderScenarios(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorDFSandboxtransactionstatusApi - factory interface
 * @export
 */
export const VendorDFSandboxtransactionstatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorDFSandboxtransactionstatusApiFp(configuration)
    return {
        /**
         * Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data.
         * @param {string} transactionId The transaction identifier returned in the response to the generateOrderScenarios operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderScenarios(transactionId: string, options?: any): AxiosPromise<TransactionStatus> {
            return localVarFp.getOrderScenarios(transactionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrderScenarios operation in VendorDFSandboxtransactionstatusApi.
 * @export
 * @interface VendorDFSandboxtransactionstatusApiGetOrderScenariosRequest
 */
export interface VendorDFSandboxtransactionstatusApiGetOrderScenariosRequest {
    /**
     * The transaction identifier returned in the response to the generateOrderScenarios operation.
     * @type {string}
     * @memberof VendorDFSandboxtransactionstatusApiGetOrderScenarios
     */
    readonly transactionId: string
}

/**
 * VendorDFSandboxtransactionstatusApi - object-oriented interface
 * @export
 * @class VendorDFSandboxtransactionstatusApi
 * @extends {BaseAPI}
 */
export class VendorDFSandboxtransactionstatusApi extends BaseAPI {
    /**
     * Returns the status of the transaction indicated by the specified transactionId. If the transaction was successful, also returns the requested test order data.
     * @param {VendorDFSandboxtransactionstatusApiGetOrderScenariosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorDFSandboxtransactionstatusApi
     */
    public getOrderScenarios(requestParameters: VendorDFSandboxtransactionstatusApiGetOrderScenariosRequest, options?: any) {
        return VendorDFSandboxtransactionstatusApiFp(this.configuration).getOrderScenarios(requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }
}
