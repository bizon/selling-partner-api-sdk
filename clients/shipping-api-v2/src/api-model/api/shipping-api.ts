/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancelShipmentResponse } from '../models';
// @ts-ignore
import { DirectPurchaseRequest } from '../models';
// @ts-ignore
import { DirectPurchaseResponse } from '../models';
// @ts-ignore
import { ErrorList } from '../models';
// @ts-ignore
import { GenerateCollectionFormRequest } from '../models';
// @ts-ignore
import { GenerateCollectionFormResponse } from '../models';
// @ts-ignore
import { GetAccessPointsResponse } from '../models';
// @ts-ignore
import { GetAdditionalInputsResponse } from '../models';
// @ts-ignore
import { GetCarrierAccountFormInputsResponse } from '../models';
// @ts-ignore
import { GetCarrierAccountsRequest } from '../models';
// @ts-ignore
import { GetCarrierAccountsResponse } from '../models';
// @ts-ignore
import { GetCollectionFormHistoryRequest } from '../models';
// @ts-ignore
import { GetCollectionFormHistoryResponse } from '../models';
// @ts-ignore
import { GetCollectionFormResponse } from '../models';
// @ts-ignore
import { GetRatesRequest } from '../models';
// @ts-ignore
import { GetRatesResponse } from '../models';
// @ts-ignore
import { GetShipmentDocumentsResponse } from '../models';
// @ts-ignore
import { GetTrackingResponse } from '../models';
// @ts-ignore
import { GetUnmanifestedShipmentsRequest } from '../models';
// @ts-ignore
import { GetUnmanifestedShipmentsResponse } from '../models';
// @ts-ignore
import { LinkCarrierAccountRequest } from '../models';
// @ts-ignore
import { LinkCarrierAccountResponse } from '../models';
// @ts-ignore
import { OneClickShipmentRequest } from '../models';
// @ts-ignore
import { OneClickShipmentResponse } from '../models';
// @ts-ignore
import { PurchaseShipmentRequest } from '../models';
// @ts-ignore
import { PurchaseShipmentResponse } from '../models';
// @ts-ignore
import { UnlinkCarrierAccountRequest } from '../models';
// @ts-ignore
import { UnlinkCarrierAccountResponse } from '../models';
/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: async (shipmentId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipment', 'shipmentId', shipmentId)
            const localVarPath = `/shipping/v2/shipments/{shipmentId}/cancel`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DirectPurchaseRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {string} [locale] The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directPurchaseShipment: async (body: DirectPurchaseRequest, xAmznIdempotencyKey?: string, locale?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('directPurchaseShipment', 'body', body)
            const localVarPath = `/shipping/v2/shipments/directPurchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznIdempotencyKey != null) {
                localVarHeaderParameter['x-amzn-IdempotencyKey'] = String(xAmznIdempotencyKey);
            }

            if (locale != null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GenerateCollectionFormRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCollectionForm: async (body: GenerateCollectionFormRequest, xAmznIdempotencyKey?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateCollectionForm', 'body', body)
            const localVarPath = `/shipping/v2/collectionForms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznIdempotencyKey != null) {
                localVarHeaderParameter['x-amzn-IdempotencyKey'] = String(xAmznIdempotencyKey);
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>} accessPointTypes 
         * @param {string} countryCode 
         * @param {string} postalCode 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessPoints: async (accessPointTypes: Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>, countryCode: string, postalCode: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessPointTypes' is not null or undefined
            assertParamExists('getAccessPoints', 'accessPointTypes', accessPointTypes)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('getAccessPoints', 'countryCode', countryCode)
            // verify required parameter 'postalCode' is not null or undefined
            assertParamExists('getAccessPoints', 'postalCode', postalCode)
            const localVarPath = `/shipping/v2/accessPoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessPointTypes) {
                localVarQueryParameter['accessPointTypes'] = accessPointTypes.join(COLLECTION_FORMATS.csv);
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (postalCode !== undefined) {
                localVarQueryParameter['postalCode'] = postalCode;
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} requestToken The request token returned in the response to the getRates operation.
         * @param {string} rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInputs: async (requestToken: string, rateId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestToken' is not null or undefined
            assertParamExists('getAdditionalInputs', 'requestToken', requestToken)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('getAdditionalInputs', 'rateId', rateId)
            const localVarPath = `/shipping/v2/shipments/additionalInputs/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestToken !== undefined) {
                localVarQueryParameter['requestToken'] = requestToken;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierAccountFormInputs: async (xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping/v2/carrierAccountFormInputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetCarrierAccountsRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierAccounts: async (body: GetCarrierAccountsRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getCarrierAccounts', 'body', body)
            const localVarPath = `/shipping/v2/carrierAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} collectionFormId collection form Id to reprint a collection.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionForm: async (collectionFormId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionFormId' is not null or undefined
            assertParamExists('getCollectionForm', 'collectionFormId', collectionFormId)
            const localVarPath = `/shipping/v2/collectionForms/{collectionFormId}`
                .replace(`{${"collectionFormId"}}`, encodeURIComponent(String(collectionFormId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetCollectionFormHistoryRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionFormHistory: async (body: GetCollectionFormHistoryRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getCollectionFormHistory', 'body', body)
            const localVarPath = `/shipping/v2/collectionForms/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetRatesRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates: async (body: GetRatesRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getRates', 'body', body)
            const localVarPath = `/shipping/v2/shipments/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
         * @param {string} packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation.
         * @param {string} [format] The file format of the document. Must be one of the supported formats returned by the getRates operation.
         * @param {number} [dpi] The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDocuments: async (shipmentId: string, packageClientReferenceId: string, format?: string, dpi?: number, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipmentDocuments', 'shipmentId', shipmentId)
            // verify required parameter 'packageClientReferenceId' is not null or undefined
            assertParamExists('getShipmentDocuments', 'packageClientReferenceId', packageClientReferenceId)
            const localVarPath = `/shipping/v2/shipments/{shipmentId}/documents`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageClientReferenceId !== undefined) {
                localVarQueryParameter['packageClientReferenceId'] = packageClientReferenceId;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (dpi !== undefined) {
                localVarQueryParameter['dpi'] = dpi;
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
         * @param {string} carrierId A carrier identifier originally returned by the getRates operation for the selected rate.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTracking: async (trackingId: string, carrierId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackingId' is not null or undefined
            assertParamExists('getTracking', 'trackingId', trackingId)
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getTracking', 'carrierId', carrierId)
            const localVarPath = `/shipping/v2/tracking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (trackingId !== undefined) {
                localVarQueryParameter['trackingId'] = trackingId;
            }

            if (carrierId !== undefined) {
                localVarQueryParameter['carrierId'] = carrierId;
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetUnmanifestedShipmentsRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnmanifestedShipments: async (body: GetUnmanifestedShipmentsRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getUnmanifestedShipments', 'body', body)
            const localVarPath = `/shipping/v2/unmanifestedShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} carrierId The unique identifier associated with the carrier account.
         * @param {LinkCarrierAccountRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkCarrierAccount: async (carrierId: string, body: LinkCarrierAccountRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('linkCarrierAccount', 'carrierId', carrierId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('linkCarrierAccount', 'body', body)
            const localVarPath = `/shipping/v2/carrierAccounts/{carrierId}`
                .replace(`{${"carrierId"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {OneClickShipmentRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oneClickShipment: async (body: OneClickShipmentRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('oneClickShipment', 'body', body)
            const localVarPath = `/shipping/v2/oneClickShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {PurchaseShipmentRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment: async (body: PurchaseShipmentRequest, xAmznIdempotencyKey?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('purchaseShipment', 'body', body)
            const localVarPath = `/shipping/v2/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznIdempotencyKey != null) {
                localVarHeaderParameter['x-amzn-IdempotencyKey'] = String(xAmznIdempotencyKey);
            }

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} carrierId carrier Id to unlink with merchant.
         * @param {UnlinkCarrierAccountRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkCarrierAccount: async (carrierId: string, body: UnlinkCarrierAccountRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('unlinkCarrierAccount', 'carrierId', carrierId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('unlinkCarrierAccount', 'body', body)
            const localVarPath = `/shipping/v2/carrierAccounts/{carrierId}/unlink`
                .replace(`{${"carrierId"}}`, encodeURIComponent(String(carrierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznShippingBusinessId != null) {
                localVarHeaderParameter['x-amzn-shipping-business-id'] = String(xAmznShippingBusinessId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(shipmentId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipment(shipmentId, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DirectPurchaseRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {string} [locale] The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directPurchaseShipment(body: DirectPurchaseRequest, xAmznIdempotencyKey?: string, locale?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectPurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directPurchaseShipment(body, xAmznIdempotencyKey, locale, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GenerateCollectionFormRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateCollectionForm(body: GenerateCollectionFormRequest, xAmznIdempotencyKey?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateCollectionFormResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateCollectionForm(body, xAmznIdempotencyKey, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>} accessPointTypes 
         * @param {string} countryCode 
         * @param {string} postalCode 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessPoints(accessPointTypes: Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>, countryCode: string, postalCode: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccessPointsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessPoints(accessPointTypes, countryCode, postalCode, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} requestToken The request token returned in the response to the getRates operation.
         * @param {string} rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalInputs(requestToken: string, rateId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdditionalInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalInputs(requestToken, rateId, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarrierAccountFormInputs(xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierAccountFormInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarrierAccountFormInputs(xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetCarrierAccountsRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarrierAccounts(body: GetCarrierAccountsRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarrierAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarrierAccounts(body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} collectionFormId collection form Id to reprint a collection.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionForm(collectionFormId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCollectionFormResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionForm(collectionFormId, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetCollectionFormHistoryRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionFormHistory(body: GetCollectionFormHistoryRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCollectionFormHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionFormHistory(body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetRatesRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRates(body: GetRatesRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRates(body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} shipmentId The shipment identifier originally returned by the purchaseShipment operation.
         * @param {string} packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation.
         * @param {string} [format] The file format of the document. Must be one of the supported formats returned by the getRates operation.
         * @param {number} [dpi] The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentDocuments(shipmentId: string, packageClientReferenceId: string, format?: string, dpi?: number, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipmentDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentDocuments(shipmentId, packageClientReferenceId, format, dpi, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
         * @param {string} carrierId A carrier identifier originally returned by the getRates operation for the selected rate.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTracking(trackingId: string, carrierId: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTrackingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTracking(trackingId, carrierId, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetUnmanifestedShipmentsRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnmanifestedShipments(body: GetUnmanifestedShipmentsRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUnmanifestedShipmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnmanifestedShipments(body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} carrierId The unique identifier associated with the carrier account.
         * @param {LinkCarrierAccountRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkCarrierAccount(carrierId: string, body: LinkCarrierAccountRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkCarrierAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkCarrierAccount(carrierId, body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {OneClickShipmentRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oneClickShipment(body: OneClickShipmentRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OneClickShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oneClickShipment(body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {PurchaseShipmentRequest} body 
         * @param {string} [xAmznIdempotencyKey] A unique value which the server uses to recognize subsequent retries of the same request.
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseShipment(body: PurchaseShipmentRequest, xAmznIdempotencyKey?: string, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseShipment(body, xAmznIdempotencyKey, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} carrierId carrier Id to unlink with merchant.
         * @param {UnlinkCarrierAccountRequest} body 
         * @param {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'} [xAmznShippingBusinessId] Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkCarrierAccount(carrierId: string, body: UnlinkCarrierAccountRequest, xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnlinkCarrierAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkCarrierAccount(carrierId, body, xAmznShippingBusinessId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiCancelShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(requestParameters: ShippingApiCancelShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipment(requestParameters.shipmentId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiDirectPurchaseShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directPurchaseShipment(requestParameters: ShippingApiDirectPurchaseShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<DirectPurchaseResponse> {
            return localVarFp.directPurchaseShipment(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.locale, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGenerateCollectionFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCollectionForm(requestParameters: ShippingApiGenerateCollectionFormRequest, options?: AxiosRequestConfig): AxiosPromise<GenerateCollectionFormResponse> {
            return localVarFp.generateCollectionForm(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetAccessPointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessPoints(requestParameters: ShippingApiGetAccessPointsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAccessPointsResponse> {
            return localVarFp.getAccessPoints(requestParameters.accessPointTypes, requestParameters.countryCode, requestParameters.postalCode, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetAdditionalInputsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInputs(requestParameters: ShippingApiGetAdditionalInputsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAdditionalInputsResponse> {
            return localVarFp.getAdditionalInputs(requestParameters.requestToken, requestParameters.rateId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetCarrierAccountFormInputsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierAccountFormInputs(requestParameters: ShippingApiGetCarrierAccountFormInputsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetCarrierAccountFormInputsResponse> {
            return localVarFp.getCarrierAccountFormInputs(requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetCarrierAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierAccounts(requestParameters: ShippingApiGetCarrierAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<GetCarrierAccountsResponse> {
            return localVarFp.getCarrierAccounts(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetCollectionFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionForm(requestParameters: ShippingApiGetCollectionFormRequest, options?: AxiosRequestConfig): AxiosPromise<GetCollectionFormResponse> {
            return localVarFp.getCollectionForm(requestParameters.collectionFormId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetCollectionFormHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionFormHistory(requestParameters: ShippingApiGetCollectionFormHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<GetCollectionFormHistoryResponse> {
            return localVarFp.getCollectionFormHistory(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates(requestParameters: ShippingApiGetRatesRequest, options?: AxiosRequestConfig): AxiosPromise<GetRatesResponse> {
            return localVarFp.getRates(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetShipmentDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDocuments(requestParameters: ShippingApiGetShipmentDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<GetShipmentDocumentsResponse> {
            return localVarFp.getShipmentDocuments(requestParameters.shipmentId, requestParameters.packageClientReferenceId, requestParameters.format, requestParameters.dpi, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTracking(requestParameters: ShippingApiGetTrackingRequest, options?: AxiosRequestConfig): AxiosPromise<GetTrackingResponse> {
            return localVarFp.getTracking(requestParameters.trackingId, requestParameters.carrierId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiGetUnmanifestedShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnmanifestedShipments(requestParameters: ShippingApiGetUnmanifestedShipmentsRequest, options?: AxiosRequestConfig): AxiosPromise<GetUnmanifestedShipmentsResponse> {
            return localVarFp.getUnmanifestedShipments(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiLinkCarrierAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkCarrierAccount(requestParameters: ShippingApiLinkCarrierAccountRequest, options?: AxiosRequestConfig): AxiosPromise<LinkCarrierAccountResponse> {
            return localVarFp.linkCarrierAccount(requestParameters.carrierId, requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiOneClickShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oneClickShipment(requestParameters: ShippingApiOneClickShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<OneClickShipmentResponse> {
            return localVarFp.oneClickShipment(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiPurchaseShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment(requestParameters: ShippingApiPurchaseShipmentRequest, options?: AxiosRequestConfig): AxiosPromise<PurchaseShipmentResponse> {
            return localVarFp.purchaseShipment(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ShippingApiUnlinkCarrierAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkCarrierAccount(requestParameters: ShippingApiUnlinkCarrierAccountRequest, options?: AxiosRequestConfig): AxiosPromise<UnlinkCarrierAccountResponse> {
            return localVarFp.unlinkCarrierAccount(requestParameters.carrierId, requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiCancelShipmentRequest
 */
export interface ShippingApiCancelShipmentRequest {
    /**
     * The shipment identifier originally returned by the purchaseShipment operation.
     * @type {string}
     * @memberof ShippingApiCancelShipment
     */
    readonly shipmentId: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiCancelShipment
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for directPurchaseShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiDirectPurchaseShipmentRequest
 */
export interface ShippingApiDirectPurchaseShipmentRequest {
    /**
     * 
     * @type {DirectPurchaseRequest}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly body: DirectPurchaseRequest

    /**
     * A unique value which the server uses to recognize subsequent retries of the same request.
     * @type {string}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly xAmznIdempotencyKey?: string

    /**
     * The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. 
     * @type {string}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly locale?: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for generateCollectionForm operation in ShippingApi.
 * @export
 * @interface ShippingApiGenerateCollectionFormRequest
 */
export interface ShippingApiGenerateCollectionFormRequest {
    /**
     * 
     * @type {GenerateCollectionFormRequest}
     * @memberof ShippingApiGenerateCollectionForm
     */
    readonly body: GenerateCollectionFormRequest

    /**
     * A unique value which the server uses to recognize subsequent retries of the same request.
     * @type {string}
     * @memberof ShippingApiGenerateCollectionForm
     */
    readonly xAmznIdempotencyKey?: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGenerateCollectionForm
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getAccessPoints operation in ShippingApi.
 * @export
 * @interface ShippingApiGetAccessPointsRequest
 */
export interface ShippingApiGetAccessPointsRequest {
    /**
     * 
     * @type {Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>}
     * @memberof ShippingApiGetAccessPoints
     */
    readonly accessPointTypes: Array<'HELIX' | 'CAMPUS_LOCKER' | 'OMNI_LOCKER' | 'ODIN_LOCKER' | 'DOBBY_LOCKER' | 'CORE_LOCKER' | '3P' | 'CAMPUS_ROOM'>

    /**
     * 
     * @type {string}
     * @memberof ShippingApiGetAccessPoints
     */
    readonly countryCode: string

    /**
     * 
     * @type {string}
     * @memberof ShippingApiGetAccessPoints
     */
    readonly postalCode: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetAccessPoints
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getAdditionalInputs operation in ShippingApi.
 * @export
 * @interface ShippingApiGetAdditionalInputsRequest
 */
export interface ShippingApiGetAdditionalInputsRequest {
    /**
     * The request token returned in the response to the getRates operation.
     * @type {string}
     * @memberof ShippingApiGetAdditionalInputs
     */
    readonly requestToken: string

    /**
     * The rate identifier for the shipping offering (rate) returned in the response to the getRates operation.
     * @type {string}
     * @memberof ShippingApiGetAdditionalInputs
     */
    readonly rateId: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetAdditionalInputs
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getCarrierAccountFormInputs operation in ShippingApi.
 * @export
 * @interface ShippingApiGetCarrierAccountFormInputsRequest
 */
export interface ShippingApiGetCarrierAccountFormInputsRequest {
    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetCarrierAccountFormInputs
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getCarrierAccounts operation in ShippingApi.
 * @export
 * @interface ShippingApiGetCarrierAccountsRequest
 */
export interface ShippingApiGetCarrierAccountsRequest {
    /**
     * 
     * @type {GetCarrierAccountsRequest}
     * @memberof ShippingApiGetCarrierAccounts
     */
    readonly body: GetCarrierAccountsRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetCarrierAccounts
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getCollectionForm operation in ShippingApi.
 * @export
 * @interface ShippingApiGetCollectionFormRequest
 */
export interface ShippingApiGetCollectionFormRequest {
    /**
     * collection form Id to reprint a collection.
     * @type {string}
     * @memberof ShippingApiGetCollectionForm
     */
    readonly collectionFormId: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetCollectionForm
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getCollectionFormHistory operation in ShippingApi.
 * @export
 * @interface ShippingApiGetCollectionFormHistoryRequest
 */
export interface ShippingApiGetCollectionFormHistoryRequest {
    /**
     * 
     * @type {GetCollectionFormHistoryRequest}
     * @memberof ShippingApiGetCollectionFormHistory
     */
    readonly body: GetCollectionFormHistoryRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetCollectionFormHistory
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getRates operation in ShippingApi.
 * @export
 * @interface ShippingApiGetRatesRequest
 */
export interface ShippingApiGetRatesRequest {
    /**
     * 
     * @type {GetRatesRequest}
     * @memberof ShippingApiGetRates
     */
    readonly body: GetRatesRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetRates
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getShipmentDocuments operation in ShippingApi.
 * @export
 * @interface ShippingApiGetShipmentDocumentsRequest
 */
export interface ShippingApiGetShipmentDocumentsRequest {
    /**
     * The shipment identifier originally returned by the purchaseShipment operation.
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly shipmentId: string

    /**
     * The package client reference identifier originally provided in the request body parameter for the getRates operation.
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly packageClientReferenceId: string

    /**
     * The file format of the document. Must be one of the supported formats returned by the getRates operation.
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly format?: string

    /**
     * The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation.
     * @type {number}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly dpi?: number

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getTracking operation in ShippingApi.
 * @export
 * @interface ShippingApiGetTrackingRequest
 */
export interface ShippingApiGetTrackingRequest {
    /**
     * A carrier-generated tracking identifier originally returned by the purchaseShipment operation.
     * @type {string}
     * @memberof ShippingApiGetTracking
     */
    readonly trackingId: string

    /**
     * A carrier identifier originally returned by the getRates operation for the selected rate.
     * @type {string}
     * @memberof ShippingApiGetTracking
     */
    readonly carrierId: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetTracking
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for getUnmanifestedShipments operation in ShippingApi.
 * @export
 * @interface ShippingApiGetUnmanifestedShipmentsRequest
 */
export interface ShippingApiGetUnmanifestedShipmentsRequest {
    /**
     * 
     * @type {GetUnmanifestedShipmentsRequest}
     * @memberof ShippingApiGetUnmanifestedShipments
     */
    readonly body: GetUnmanifestedShipmentsRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiGetUnmanifestedShipments
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for linkCarrierAccount operation in ShippingApi.
 * @export
 * @interface ShippingApiLinkCarrierAccountRequest
 */
export interface ShippingApiLinkCarrierAccountRequest {
    /**
     * The unique identifier associated with the carrier account.
     * @type {string}
     * @memberof ShippingApiLinkCarrierAccount
     */
    readonly carrierId: string

    /**
     * 
     * @type {LinkCarrierAccountRequest}
     * @memberof ShippingApiLinkCarrierAccount
     */
    readonly body: LinkCarrierAccountRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiLinkCarrierAccount
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for oneClickShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiOneClickShipmentRequest
 */
export interface ShippingApiOneClickShipmentRequest {
    /**
     * 
     * @type {OneClickShipmentRequest}
     * @memberof ShippingApiOneClickShipment
     */
    readonly body: OneClickShipmentRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiOneClickShipment
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for purchaseShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiPurchaseShipmentRequest
 */
export interface ShippingApiPurchaseShipmentRequest {
    /**
     * 
     * @type {PurchaseShipmentRequest}
     * @memberof ShippingApiPurchaseShipment
     */
    readonly body: PurchaseShipmentRequest

    /**
     * A unique value which the server uses to recognize subsequent retries of the same request.
     * @type {string}
     * @memberof ShippingApiPurchaseShipment
     */
    readonly xAmznIdempotencyKey?: string

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiPurchaseShipment
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * Request parameters for unlinkCarrierAccount operation in ShippingApi.
 * @export
 * @interface ShippingApiUnlinkCarrierAccountRequest
 */
export interface ShippingApiUnlinkCarrierAccountRequest {
    /**
     * carrier Id to unlink with merchant.
     * @type {string}
     * @memberof ShippingApiUnlinkCarrierAccount
     */
    readonly carrierId: string

    /**
     * 
     * @type {UnlinkCarrierAccountRequest}
     * @memberof ShippingApiUnlinkCarrierAccount
     */
    readonly body: UnlinkCarrierAccountRequest

    /**
     * Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
     * @type {'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'}
     * @memberof ShippingApiUnlinkCarrierAccount
     */
    readonly xAmznShippingBusinessId?: 'AmazonShipping_US' | 'AmazonShipping_IN' | 'AmazonShipping_UK' | 'AmazonShipping_UAE' | 'AmazonShipping_SA' | 'AmazonShipping_EG' | 'AmazonShipping_IT' | 'AmazonShipping_ES' | 'AmazonShipping_FR' | 'AmazonShipping_JP'
}

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiCancelShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public cancelShipment(requestParameters: ShippingApiCancelShipmentRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).cancelShipment(requestParameters.shipmentId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiDirectPurchaseShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public directPurchaseShipment(requestParameters: ShippingApiDirectPurchaseShipmentRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).directPurchaseShipment(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.locale, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGenerateCollectionFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public generateCollectionForm(requestParameters: ShippingApiGenerateCollectionFormRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).generateCollectionForm(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetAccessPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getAccessPoints(requestParameters: ShippingApiGetAccessPointsRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getAccessPoints(requestParameters.accessPointTypes, requestParameters.countryCode, requestParameters.postalCode, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetAdditionalInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getAdditionalInputs(requestParameters: ShippingApiGetAdditionalInputsRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getAdditionalInputs(requestParameters.requestToken, requestParameters.rateId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetCarrierAccountFormInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getCarrierAccountFormInputs(requestParameters: ShippingApiGetCarrierAccountFormInputsRequest = {}, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getCarrierAccountFormInputs(requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetCarrierAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getCarrierAccounts(requestParameters: ShippingApiGetCarrierAccountsRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getCarrierAccounts(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetCollectionFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getCollectionForm(requestParameters: ShippingApiGetCollectionFormRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getCollectionForm(requestParameters.collectionFormId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetCollectionFormHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getCollectionFormHistory(requestParameters: ShippingApiGetCollectionFormHistoryRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getCollectionFormHistory(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getRates(requestParameters: ShippingApiGetRatesRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getRates(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetShipmentDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShipmentDocuments(requestParameters: ShippingApiGetShipmentDocumentsRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getShipmentDocuments(requestParameters.shipmentId, requestParameters.packageClientReferenceId, requestParameters.format, requestParameters.dpi, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getTracking(requestParameters: ShippingApiGetTrackingRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getTracking(requestParameters.trackingId, requestParameters.carrierId, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiGetUnmanifestedShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getUnmanifestedShipments(requestParameters: ShippingApiGetUnmanifestedShipmentsRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).getUnmanifestedShipments(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiLinkCarrierAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public linkCarrierAccount(requestParameters: ShippingApiLinkCarrierAccountRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).linkCarrierAccount(requestParameters.carrierId, requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiOneClickShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public oneClickShipment(requestParameters: ShippingApiOneClickShipmentRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).oneClickShipment(requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \"TOKEN_EXPIRED\". If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiPurchaseShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public purchaseShipment(requestParameters: ShippingApiPurchaseShipmentRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).purchaseShipment(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ShippingApiUnlinkCarrierAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public unlinkCarrierAccount(requestParameters: ShippingApiUnlinkCarrierAccountRequest, options?: AxiosRequestConfig) {
        return ShippingApiFp(this.configuration).unlinkCarrierAccount(requestParameters.carrierId, requestParameters.body, requestParameters.xAmznShippingBusinessId, options).then((request) => request(this.axios, this.basePath));
    }
}
