/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon\'s fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CancelInboundPlanResponse } from '../models';
// @ts-ignore
import type { CancelSelfShipAppointmentRequest } from '../models';
// @ts-ignore
import type { CancelSelfShipAppointmentResponse } from '../models';
// @ts-ignore
import type { ConfirmDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { ConfirmPackingOptionResponse } from '../models';
// @ts-ignore
import type { ConfirmPlacementOptionResponse } from '../models';
// @ts-ignore
import type { ConfirmShipmentContentUpdatePreviewResponse } from '../models';
// @ts-ignore
import type { ConfirmTransportationOptionsRequest } from '../models';
// @ts-ignore
import type { ConfirmTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { ContentUpdatePreview } from '../models';
// @ts-ignore
import type { CreateInboundPlanRequest } from '../models';
// @ts-ignore
import type { CreateInboundPlanResponse } from '../models';
// @ts-ignore
import type { CreateMarketplaceItemLabelsRequest } from '../models';
// @ts-ignore
import type { CreateMarketplaceItemLabelsResponse } from '../models';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { GenerateDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { GeneratePackingOptionsResponse } from '../models';
// @ts-ignore
import type { GeneratePlacementOptionsRequest } from '../models';
// @ts-ignore
import type { GeneratePlacementOptionsResponse } from '../models';
// @ts-ignore
import type { GenerateSelfShipAppointmentSlotsRequest } from '../models';
// @ts-ignore
import type { GenerateSelfShipAppointmentSlotsResponse } from '../models';
// @ts-ignore
import type { GenerateShipmentContentUpdatePreviewsRequest } from '../models';
// @ts-ignore
import type { GenerateShipmentContentUpdatePreviewsResponse } from '../models';
// @ts-ignore
import type { GenerateTransportationOptionsRequest } from '../models';
// @ts-ignore
import type { GenerateTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { GetDeliveryChallanDocumentResponse } from '../models';
// @ts-ignore
import type { GetSelfShipAppointmentSlotsResponse } from '../models';
// @ts-ignore
import type { InboundOperationStatus } from '../models';
// @ts-ignore
import type { InboundPlan } from '../models';
// @ts-ignore
import type { ListDeliveryWindowOptionsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanBoxesResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanItemsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlanPalletsResponse } from '../models';
// @ts-ignore
import type { ListInboundPlansResponse } from '../models';
// @ts-ignore
import type { ListItemComplianceDetailsResponse } from '../models';
// @ts-ignore
import type { ListPackingGroupBoxesResponse } from '../models';
// @ts-ignore
import type { ListPackingGroupItemsResponse } from '../models';
// @ts-ignore
import type { ListPackingOptionsResponse } from '../models';
// @ts-ignore
import type { ListPlacementOptionsResponse } from '../models';
// @ts-ignore
import type { ListShipmentBoxesResponse } from '../models';
// @ts-ignore
import type { ListShipmentContentUpdatePreviewsResponse } from '../models';
// @ts-ignore
import type { ListShipmentItemsResponse } from '../models';
// @ts-ignore
import type { ListShipmentPalletsResponse } from '../models';
// @ts-ignore
import type { ListTransportationOptionsResponse } from '../models';
// @ts-ignore
import type { ScheduleSelfShipAppointmentRequest } from '../models';
// @ts-ignore
import type { ScheduleSelfShipAppointmentResponse } from '../models';
// @ts-ignore
import type { SetPackingInformationRequest } from '../models';
// @ts-ignore
import type { SetPackingInformationResponse } from '../models';
// @ts-ignore
import type { Shipment } from '../models';
// @ts-ignore
import type { UpdateInboundPlanNameRequest } from '../models';
// @ts-ignore
import type { UpdateItemComplianceDetailsRequest } from '../models';
// @ts-ignore
import type { UpdateItemComplianceDetailsResponse } from '../models';
// @ts-ignore
import type { UpdateShipmentNameRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentSourceAddressRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentSourceAddressResponse } from '../models';
// @ts-ignore
import type { UpdateShipmentTrackingDetailsRequest } from '../models';
// @ts-ignore
import type { UpdateShipmentTrackingDetailsResponse } from '../models';
/**
 * FbaInboundApi - axios parameter creator
 * @export
 */
export const FbaInboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, body: CancelSelfShipAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to confirm the delivery window option for.
         * @param {string} deliveryWindowOptionId The id of the delivery window option to be confirmed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, deliveryWindowOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'shipmentId', shipmentId)
            // verify required parameter 'deliveryWindowOptionId' is not null or undefined
            assertParamExists('confirmDeliveryWindowOptions', 'deliveryWindowOptionId', deliveryWindowOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"deliveryWindowOptionId"}}`, encodeURIComponent(String(deliveryWindowOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingOptionId Identifier of a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption: async (inboundPlanId: string, packingOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPackingOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingOptionId' is not null or undefined
            assertParamExists('confirmPackingOption', 'packingOptionId', packingOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingOptionId"}}`, encodeURIComponent(String(packingOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption: async (inboundPlanId: string, placementOptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'placementOptionId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'placementOptionId', placementOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"placementOptionId"}}`, encodeURIComponent(String(placementOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipmentContentUpdatePreview: async (inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'shipmentId', shipmentId)
            // verify required parameter 'contentUpdatePreviewId' is not null or undefined
            assertParamExists('confirmShipmentContentUpdatePreview', 'contentUpdatePreviewId', contentUpdatePreviewId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"contentUpdatePreviewId"}}`, encodeURIComponent(String(contentUpdatePreviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions: async (inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan: async (body: CreateInboundPlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createInboundPlan', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For a given marketplace - creates labels for a list of mskus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {CreateMarketplaceItemLabelsRequest} body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceItemLabels: async (body: CreateMarketplaceItemLabelsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createMarketplaceItemLabels', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to generate delivery window options for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateDeliveryWindowOptions', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions: async (inboundPlanId: string, body: GeneratePlacementOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePlacementOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generatePlacementOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateShipmentContentUpdatePreviewsRequest} body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipmentContentUpdatePreviews: async (inboundPlanId: string, shipmentId: string, body: GenerateShipmentContentUpdatePreviewsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateShipmentContentUpdatePreviews', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions: async (inboundPlanId: string, body: GenerateTransportationOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} operationId Identifier of an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus: async (operationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getInboundOperationStatus', 'operationId', operationId)
            const localVarPath = `/inbound/fba/2024-03-20/operations/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan: async (inboundPlanId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (inboundPlanId: string, shipmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getShipment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentContentUpdatePreview: async (inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'shipmentId', shipmentId)
            // verify required parameter 'contentUpdatePreviewId' is not null or undefined
            assertParamExists('getShipmentContentUpdatePreview', 'contentUpdatePreviewId', contentUpdatePreviewId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"contentUpdatePreviewId"}}`, encodeURIComponent(String(contentUpdatePreviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to get delivery window options for.
         * @param {number} [pageSize] The number of delivery window options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryWindowOptions: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listDeliveryWindowOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listDeliveryWindowOptions', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanBoxes', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanItems', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanPallets', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {ListInboundPlansStatusEnum} [status] The status of an inbound plan.
         * @param {ListInboundPlansSortByEnum} [sortBy] Sort by field.
         * @param {ListInboundPlansSortOrderEnum} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans: async (pageSize?: number, paginationToken?: string, status?: ListInboundPlansStatusEnum, sortBy?: ListInboundPlansSortByEnum, sortOrder?: ListInboundPlansSortOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {Array<string>} mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails: async (mskus: Array<string>, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mskus' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'mskus', mskus)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'marketplaceId', marketplaceId)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mskus) {
                localVarQueryParameter['mskus'] = mskus;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupBoxes: async (inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingGroupBoxes', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingGroupId' is not null or undefined
            assertParamExists('listPackingGroupBoxes', 'packingGroupId', packingGroupId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingGroupId"}}`, encodeURIComponent(String(packingGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems: async (inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingGroupId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'packingGroupId', packingGroupId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingGroupId"}}`, encodeURIComponent(String(packingGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPlacementOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentBoxes: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentBoxes', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentBoxes', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of content update previews to return.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentContentUpdatePreviews: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentContentUpdatePreviews', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentContentUpdatePreviews', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentItems: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentItems', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentItems', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentPallets: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listShipmentPallets', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('listShipmentPallets', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listTransportationOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (placementOptionId !== undefined) {
                localVarQueryParameter['placementOptionId'] = placementOptionId;
            }

            if (shipmentId !== undefined) {
                localVarQueryParameter['shipmentId'] = shipmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId An identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'slotId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'slotId', slotId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"slotId"}}`, encodeURIComponent(String(slotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation: async (inboundPlanId: string, body: SetPackingInformationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('setPackingInformation', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setPackingInformation', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {UpdateInboundPlanNameRequest} body The body of the request to &#x60;updateInboundPlanName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundPlanName: async (inboundPlanId: string, body: UpdateInboundPlanNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateInboundPlanName', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateInboundPlanName', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails: async (marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentNameRequest} body The body of the request to &#x60;updateShipmentName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentName: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentName', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentName', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentName', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentSourceAddressRequest} body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentSourceAddress: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentSourceAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentSourceAddress', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FbaInboundApi - functional programming interface
 * @export
 */
export const FbaInboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FbaInboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInboundPlan(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInboundPlan(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.cancelInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSelfShipAppointment(inboundPlanId: string, shipmentId: string, body: CancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSelfShipAppointment(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.cancelSelfShipAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to confirm the delivery window option for.
         * @param {string} deliveryWindowOptionId The id of the delivery window option to be confirmed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, deliveryWindowOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmDeliveryWindowOptions(inboundPlanId, shipmentId, deliveryWindowOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.confirmDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingOptionId Identifier of a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPackingOption(inboundPlanId: string, packingOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPackingOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPackingOption(inboundPlanId, packingOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.confirmPackingOption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPlacementOption(inboundPlanId: string, placementOptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPlacementOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPlacementOption(inboundPlanId, placementOptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.confirmPlacementOption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmShipmentContentUpdatePreview(inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmShipmentContentUpdatePreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.confirmShipmentContentUpdatePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmTransportationOptions(inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmTransportationOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.confirmTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInboundPlan(body: CreateInboundPlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInboundPlan(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.createInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * For a given marketplace - creates labels for a list of mskus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {CreateMarketplaceItemLabelsRequest} body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMarketplaceItemLabels(body: CreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMarketplaceItemLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMarketplaceItemLabels(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.createMarketplaceItemLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to generate delivery window options for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateDeliveryWindowOptions(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generateDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePackingOptions(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePackingOptions(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generatePackingOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePlacementOptions(inboundPlanId: string, body: GeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePlacementOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generatePlacementOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generateSelfShipAppointmentSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateShipmentContentUpdatePreviewsRequest} body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateShipmentContentUpdatePreviews(inboundPlanId: string, shipmentId: string, body: GenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateShipmentContentUpdatePreviewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateShipmentContentUpdatePreviews(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generateShipmentContentUpdatePreviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTransportationOptions(inboundPlanId: string, body: GenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTransportationOptions(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.generateTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryChallanDocument(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeliveryChallanDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryChallanDocument(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getDeliveryChallanDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} operationId Identifier of an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundOperationStatus(operationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundOperationStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundOperationStatus(operationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getInboundOperationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundPlan(inboundPlanId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundPlan(inboundPlanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getInboundPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfShipAppointmentSlots(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getSelfShipAppointmentSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(inboundPlanId: string, shipmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(inboundPlanId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getShipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} contentUpdatePreviewId Identifier of a content update preview.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentContentUpdatePreview(inboundPlanId: string, shipmentId: string, contentUpdatePreviewId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentUpdatePreview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentContentUpdatePreview(inboundPlanId, shipmentId, contentUpdatePreviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.getShipmentContentUpdatePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId The shipment to get delivery window options for.
         * @param {number} [pageSize] The number of delivery window options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeliveryWindowOptions(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDeliveryWindowOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDeliveryWindowOptions(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listDeliveryWindowOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanBoxes(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanBoxes(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listInboundPlanBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanItems(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanItems(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listInboundPlanItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanPallets(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanPalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanPallets(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listInboundPlanPallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {ListInboundPlansStatusEnum} [status] The status of an inbound plan.
         * @param {ListInboundPlansSortByEnum} [sortBy] Sort by field.
         * @param {ListInboundPlansSortOrderEnum} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlans(pageSize?: number, paginationToken?: string, status?: ListInboundPlansStatusEnum, sortBy?: ListInboundPlansSortByEnum, sortOrder?: ListInboundPlansSortOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlans(pageSize, paginationToken, status, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listInboundPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {Array<string>} mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItemComplianceDetails(mskus: Array<string>, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItemComplianceDetails(mskus, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listItemComplianceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingGroupBoxes(inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingGroupBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingGroupBoxes(inboundPlanId, packingGroupId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listPackingGroupBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} packingGroupId Identifier of a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingGroupItems(inboundPlanId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingGroupItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingGroupItems(inboundPlanId, packingGroupId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listPackingGroupItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingOptions(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listPackingOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlacementOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlacementOptions(inboundPlanId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listPlacementOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentBoxes(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentBoxes(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listShipmentBoxes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of content update previews to return.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentContentUpdatePreviews(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentContentUpdatePreviewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentContentUpdatePreviews(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listShipmentContentUpdatePreviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentItems(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentItems(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listShipmentItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentPallets(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentPalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentPallets(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listShipmentPallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransportationOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransportationOptions(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.listTransportationOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId An identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.scheduleSelfShipAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPackingInformation(inboundPlanId: string, body: SetPackingInformationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPackingInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPackingInformation(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.setPackingInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {UpdateInboundPlanNameRequest} body The body of the request to &#x60;updateInboundPlanName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInboundPlanName(inboundPlanId: string, body: UpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInboundPlanName(inboundPlanId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.updateInboundPlanName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemComplianceDetails(marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemComplianceDetails(marketplaceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.updateItemComplianceDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentNameRequest} body The body of the request to &#x60;updateShipmentName&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentName(inboundPlanId: string, shipmentId: string, body: UpdateShipmentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentName(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.updateShipmentName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentSourceAddressRequest} body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentSourceAddress(inboundPlanId: string, shipmentId: string, body: UpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentSourceAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentSourceAddress(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.updateShipmentSourceAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {string} inboundPlanId Identifier of an inbound plan.
         * @param {string} shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentTrackingDetails(inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentTrackingDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentTrackingDetails(inboundPlanId, shipmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FbaInboundApi.updateShipmentTrackingDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FbaInboundApi - factory interface
 * @export
 */
export const FbaInboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FbaInboundApiFp(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiCancelInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan(requestParameters: FbaInboundApiCancelInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelInboundPlanResponse> {
            return localVarFp.cancelInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiCancelSelfShipAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment(requestParameters: FbaInboundApiCancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelSelfShipAppointmentResponse> {
            return localVarFp.cancelSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiConfirmDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmDeliveryWindowOptions(requestParameters: FbaInboundApiConfirmDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmDeliveryWindowOptionsResponse> {
            return localVarFp.confirmDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.deliveryWindowOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiConfirmPackingOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption(requestParameters: FbaInboundApiConfirmPackingOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmPackingOptionResponse> {
            return localVarFp.confirmPackingOption(requestParameters.inboundPlanId, requestParameters.packingOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiConfirmPlacementOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption(requestParameters: FbaInboundApiConfirmPlacementOptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmPlacementOptionResponse> {
            return localVarFp.confirmPlacementOption(requestParameters.inboundPlanId, requestParameters.placementOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiConfirmShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipmentContentUpdatePreview(requestParameters: FbaInboundApiConfirmShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmShipmentContentUpdatePreviewResponse> {
            return localVarFp.confirmShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiConfirmTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions(requestParameters: FbaInboundApiConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConfirmTransportationOptionsResponse> {
            return localVarFp.confirmTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiCreateInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan(requestParameters: FbaInboundApiCreateInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateInboundPlanResponse> {
            return localVarFp.createInboundPlan(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * For a given marketplace - creates labels for a list of mskus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiCreateMarketplaceItemLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceItemLabels(requestParameters: FbaInboundApiCreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateMarketplaceItemLabelsResponse> {
            return localVarFp.createMarketplaceItemLabels(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGenerateDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDeliveryWindowOptions(requestParameters: FbaInboundApiGenerateDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateDeliveryWindowOptionsResponse> {
            return localVarFp.generateDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGeneratePackingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions(requestParameters: FbaInboundApiGeneratePackingOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneratePackingOptionsResponse> {
            return localVarFp.generatePackingOptions(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGeneratePlacementOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions(requestParameters: FbaInboundApiGeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneratePlacementOptionsResponse> {
            return localVarFp.generatePlacementOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGenerateSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots(requestParameters: FbaInboundApiGenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateSelfShipAppointmentSlotsResponse> {
            return localVarFp.generateSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShipmentContentUpdatePreviews(requestParameters: FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateShipmentContentUpdatePreviewsResponse> {
            return localVarFp.generateShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGenerateTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions(requestParameters: FbaInboundApiGenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenerateTransportationOptionsResponse> {
            return localVarFp.generateTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetDeliveryChallanDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument(requestParameters: FbaInboundApiGetDeliveryChallanDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetDeliveryChallanDocumentResponse> {
            return localVarFp.getDeliveryChallanDocument(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetInboundOperationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus(requestParameters: FbaInboundApiGetInboundOperationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundOperationStatus> {
            return localVarFp.getInboundOperationStatus(requestParameters.operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetInboundPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan(requestParameters: FbaInboundApiGetInboundPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<InboundPlan> {
            return localVarFp.getInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots(requestParameters: FbaInboundApiGetSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetSelfShipAppointmentSlotsResponse> {
            return localVarFp.getSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetShipmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(requestParameters: FbaInboundApiGetShipmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Shipment> {
            return localVarFp.getShipment(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiGetShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentContentUpdatePreview(requestParameters: FbaInboundApiGetShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContentUpdatePreview> {
            return localVarFp.getShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListDeliveryWindowOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryWindowOptions(requestParameters: FbaInboundApiListDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListDeliveryWindowOptionsResponse> {
            return localVarFp.listDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListInboundPlanBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes(requestParameters: FbaInboundApiListInboundPlanBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanBoxesResponse> {
            return localVarFp.listInboundPlanBoxes(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListInboundPlanItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems(requestParameters: FbaInboundApiListInboundPlanItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanItemsResponse> {
            return localVarFp.listInboundPlanItems(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListInboundPlanPalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets(requestParameters: FbaInboundApiListInboundPlanPalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlanPalletsResponse> {
            return localVarFp.listInboundPlanPallets(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListInboundPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans(requestParameters: FbaInboundApiListInboundPlansRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListInboundPlansResponse> {
            return localVarFp.listInboundPlans(requestParameters.pageSize, requestParameters.paginationToken, requestParameters.status, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListItemComplianceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails(requestParameters: FbaInboundApiListItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListItemComplianceDetailsResponse> {
            return localVarFp.listItemComplianceDetails(requestParameters.mskus, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListPackingGroupBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupBoxes(requestParameters: FbaInboundApiListPackingGroupBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingGroupBoxesResponse> {
            return localVarFp.listPackingGroupBoxes(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListPackingGroupItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems(requestParameters: FbaInboundApiListPackingGroupItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingGroupItemsResponse> {
            return localVarFp.listPackingGroupItems(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListPackingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions(requestParameters: FbaInboundApiListPackingOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPackingOptionsResponse> {
            return localVarFp.listPackingOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListPlacementOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions(requestParameters: FbaInboundApiListPlacementOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPlacementOptionsResponse> {
            return localVarFp.listPlacementOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListShipmentBoxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentBoxes(requestParameters: FbaInboundApiListShipmentBoxesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentBoxesResponse> {
            return localVarFp.listShipmentBoxes(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentContentUpdatePreviews(requestParameters: FbaInboundApiListShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentContentUpdatePreviewsResponse> {
            return localVarFp.listShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListShipmentItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentItems(requestParameters: FbaInboundApiListShipmentItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentItemsResponse> {
            return localVarFp.listShipmentItems(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListShipmentPalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentPallets(requestParameters: FbaInboundApiListShipmentPalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentPalletsResponse> {
            return localVarFp.listShipmentPallets(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiListTransportationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions(requestParameters: FbaInboundApiListTransportationOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTransportationOptionsResponse> {
            return localVarFp.listTransportationOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, requestParameters.placementOptionId, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiScheduleSelfShipAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment(requestParameters: FbaInboundApiScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScheduleSelfShipAppointmentResponse> {
            return localVarFp.scheduleSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiSetPackingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation(requestParameters: FbaInboundApiSetPackingInformationRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetPackingInformationResponse> {
            return localVarFp.setPackingInformation(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiUpdateInboundPlanNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInboundPlanName(requestParameters: FbaInboundApiUpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInboundPlanName(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiUpdateItemComplianceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails(requestParameters: FbaInboundApiUpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateItemComplianceDetailsResponse> {
            return localVarFp.updateItemComplianceDetails(requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiUpdateShipmentNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentName(requestParameters: FbaInboundApiUpdateShipmentNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateShipmentName(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiUpdateShipmentSourceAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentSourceAddress(requestParameters: FbaInboundApiUpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateShipmentSourceAddressResponse> {
            return localVarFp.updateShipmentSourceAddress(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
         * @param {FbaInboundApiUpdateShipmentTrackingDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails(requestParameters: FbaInboundApiUpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateShipmentTrackingDetailsResponse> {
            return localVarFp.updateShipmentTrackingDetails(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCancelInboundPlanRequest
 */
export interface FbaInboundApiCancelInboundPlanRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiCancelInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for cancelSelfShipAppointment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCancelSelfShipAppointmentRequest
 */
export interface FbaInboundApiCancelSelfShipAppointmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
     * @type {CancelSelfShipAppointmentRequest}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly body: CancelSelfShipAppointmentRequest
}

/**
 * Request parameters for confirmDeliveryWindowOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmDeliveryWindowOptionsRequest
 */
export interface FbaInboundApiConfirmDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to confirm the delivery window option for.
     * @type {string}
     * @memberof FbaInboundApiConfirmDeliveryWindowOptions
     */
    readonly shipmentId: string

    /**
     * The id of the delivery window option to be confirmed.
     * @type {string}
     * @memberof FbaInboundApiConfirmDeliveryWindowOptions
     */
    readonly deliveryWindowOptionId: string
}

/**
 * Request parameters for confirmPackingOption operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmPackingOptionRequest
 */
export interface FbaInboundApiConfirmPackingOptionRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmPackingOption
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing option.
     * @type {string}
     * @memberof FbaInboundApiConfirmPackingOption
     */
    readonly packingOptionId: string
}

/**
 * Request parameters for confirmPlacementOption operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmPlacementOptionRequest
 */
export interface FbaInboundApiConfirmPlacementOptionRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmPlacementOption
     */
    readonly inboundPlanId: string

    /**
     * The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof FbaInboundApiConfirmPlacementOption
     */
    readonly placementOptionId: string
}

/**
 * Request parameters for confirmShipmentContentUpdatePreview operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmShipmentContentUpdatePreviewRequest
 */
export interface FbaInboundApiConfirmShipmentContentUpdatePreviewRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly shipmentId: string

    /**
     * Identifier of a content update preview.
     * @type {string}
     * @memberof FbaInboundApiConfirmShipmentContentUpdatePreview
     */
    readonly contentUpdatePreviewId: string
}

/**
 * Request parameters for confirmTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmTransportationOptionsRequest
 */
export interface FbaInboundApiConfirmTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;confirmTransportationOptions&#x60;.
     * @type {ConfirmTransportationOptionsRequest}
     * @memberof FbaInboundApiConfirmTransportationOptions
     */
    readonly body: ConfirmTransportationOptionsRequest
}

/**
 * Request parameters for createInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCreateInboundPlanRequest
 */
export interface FbaInboundApiCreateInboundPlanRequest {
    /**
     * The body of the request to &#x60;createInboundPlan&#x60;.
     * @type {CreateInboundPlanRequest}
     * @memberof FbaInboundApiCreateInboundPlan
     */
    readonly body: CreateInboundPlanRequest
}

/**
 * Request parameters for createMarketplaceItemLabels operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCreateMarketplaceItemLabelsRequest
 */
export interface FbaInboundApiCreateMarketplaceItemLabelsRequest {
    /**
     * The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
     * @type {CreateMarketplaceItemLabelsRequest}
     * @memberof FbaInboundApiCreateMarketplaceItemLabels
     */
    readonly body: CreateMarketplaceItemLabelsRequest
}

/**
 * Request parameters for generateDeliveryWindowOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateDeliveryWindowOptionsRequest
 */
export interface FbaInboundApiGenerateDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to generate delivery window options for.
     * @type {string}
     * @memberof FbaInboundApiGenerateDeliveryWindowOptions
     */
    readonly shipmentId: string
}

/**
 * Request parameters for generatePackingOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGeneratePackingOptionsRequest
 */
export interface FbaInboundApiGeneratePackingOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGeneratePackingOptions
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for generatePlacementOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGeneratePlacementOptionsRequest
 */
export interface FbaInboundApiGeneratePlacementOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGeneratePlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generatePlacementOptions&#x60;.
     * @type {GeneratePlacementOptionsRequest}
     * @memberof FbaInboundApiGeneratePlacementOptions
     */
    readonly body: GeneratePlacementOptionsRequest
}

/**
 * Request parameters for generateSelfShipAppointmentSlots operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateSelfShipAppointmentSlotsRequest
 */
export interface FbaInboundApiGenerateSelfShipAppointmentSlotsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
     * @type {GenerateSelfShipAppointmentSlotsRequest}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly body: GenerateSelfShipAppointmentSlotsRequest
}

/**
 * Request parameters for generateShipmentContentUpdatePreviews operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest
 */
export interface FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
     * @type {GenerateShipmentContentUpdatePreviewsRequest}
     * @memberof FbaInboundApiGenerateShipmentContentUpdatePreviews
     */
    readonly body: GenerateShipmentContentUpdatePreviewsRequest
}

/**
 * Request parameters for generateTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateTransportationOptionsRequest
 */
export interface FbaInboundApiGenerateTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generateTransportationOptions&#x60;.
     * @type {GenerateTransportationOptionsRequest}
     * @memberof FbaInboundApiGenerateTransportationOptions
     */
    readonly body: GenerateTransportationOptionsRequest
}

/**
 * Request parameters for getDeliveryChallanDocument operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetDeliveryChallanDocumentRequest
 */
export interface FbaInboundApiGetDeliveryChallanDocumentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetDeliveryChallanDocument
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetDeliveryChallanDocument
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getInboundOperationStatus operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetInboundOperationStatusRequest
 */
export interface FbaInboundApiGetInboundOperationStatusRequest {
    /**
     * Identifier of an asynchronous operation.
     * @type {string}
     * @memberof FbaInboundApiGetInboundOperationStatus
     */
    readonly operationId: string
}

/**
 * Request parameters for getInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetInboundPlanRequest
 */
export interface FbaInboundApiGetInboundPlanRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for getSelfShipAppointmentSlots operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetSelfShipAppointmentSlotsRequest
 */
export interface FbaInboundApiGetSelfShipAppointmentSlotsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The number of self ship appointment slots to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for getShipment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetShipmentRequest
 */
export interface FbaInboundApiGetShipmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetShipment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getShipmentContentUpdatePreview operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetShipmentContentUpdatePreviewRequest
 */
export interface FbaInboundApiGetShipmentContentUpdatePreviewRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetShipmentContentUpdatePreview
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetShipmentContentUpdatePreview
     */
    readonly shipmentId: string

    /**
     * Identifier of a content update preview.
     * @type {string}
     * @memberof FbaInboundApiGetShipmentContentUpdatePreview
     */
    readonly contentUpdatePreviewId: string
}

/**
 * Request parameters for listDeliveryWindowOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListDeliveryWindowOptionsRequest
 */
export interface FbaInboundApiListDeliveryWindowOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListDeliveryWindowOptions
     */
    readonly inboundPlanId: string

    /**
     * The shipment to get delivery window options for.
     * @type {string}
     * @memberof FbaInboundApiListDeliveryWindowOptions
     */
    readonly shipmentId: string

    /**
     * The number of delivery window options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListDeliveryWindowOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListDeliveryWindowOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanBoxes operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanBoxesRequest
 */
export interface FbaInboundApiListInboundPlanBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly inboundPlanId: string

    /**
     * The number of boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanItems operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanItemsRequest
 */
export interface FbaInboundApiListInboundPlanItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly inboundPlanId: string

    /**
     * The number of items to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanPallets operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanPalletsRequest
 */
export interface FbaInboundApiListInboundPlanPalletsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly inboundPlanId: string

    /**
     * The number of pallets to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlans operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlansRequest
 */
export interface FbaInboundApiListInboundPlansRequest {
    /**
     * The number of inbound plans to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly paginationToken?: string

    /**
     * The status of an inbound plan.
     * @type {'ACTIVE' | 'VOIDED' | 'SHIPPED'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly status?: ListInboundPlansStatusEnum

    /**
     * Sort by field.
     * @type {'LAST_UPDATED_TIME' | 'CREATION_TIME'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly sortBy?: ListInboundPlansSortByEnum

    /**
     * The sort order.
     * @type {'ASC' | 'DESC'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly sortOrder?: ListInboundPlansSortOrderEnum
}

/**
 * Request parameters for listItemComplianceDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListItemComplianceDetailsRequest
 */
export interface FbaInboundApiListItemComplianceDetailsRequest {
    /**
     * List of merchant SKUs - a merchant-supplied identifier for a specific SKU.
     * @type {Array<string>}
     * @memberof FbaInboundApiListItemComplianceDetails
     */
    readonly mskus: Array<string>

    /**
     * The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
     * @type {string}
     * @memberof FbaInboundApiListItemComplianceDetails
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listPackingGroupBoxes operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPackingGroupBoxesRequest
 */
export interface FbaInboundApiListPackingGroupBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupBoxes
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing group.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupBoxes
     */
    readonly packingGroupId: string

    /**
     * The number of packing group boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPackingGroupBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPackingGroupItems operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPackingGroupItemsRequest
 */
export interface FbaInboundApiListPackingGroupItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a packing group.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly packingGroupId: string

    /**
     * The number of packing group items to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPackingOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPackingOptionsRequest
 */
export interface FbaInboundApiListPackingOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of packing options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPlacementOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPlacementOptionsRequest
 */
export interface FbaInboundApiListPlacementOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of placement options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentBoxes operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListShipmentBoxesRequest
 */
export interface FbaInboundApiListShipmentBoxesRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListShipmentBoxes
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiListShipmentBoxes
     */
    readonly shipmentId: string

    /**
     * The number of boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListShipmentBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListShipmentBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentContentUpdatePreviews operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListShipmentContentUpdatePreviewsRequest
 */
export interface FbaInboundApiListShipmentContentUpdatePreviewsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListShipmentContentUpdatePreviews
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiListShipmentContentUpdatePreviews
     */
    readonly shipmentId: string

    /**
     * The number of content update previews to return.
     * @type {number}
     * @memberof FbaInboundApiListShipmentContentUpdatePreviews
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListShipmentContentUpdatePreviews
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentItems operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListShipmentItemsRequest
 */
export interface FbaInboundApiListShipmentItemsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListShipmentItems
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiListShipmentItems
     */
    readonly shipmentId: string

    /**
     * The number of items to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListShipmentItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListShipmentItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listShipmentPallets operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListShipmentPalletsRequest
 */
export interface FbaInboundApiListShipmentPalletsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListShipmentPallets
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiListShipmentPallets
     */
    readonly shipmentId: string

    /**
     * The number of pallets to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListShipmentPallets
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListShipmentPallets
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListTransportationOptionsRequest
 */
export interface FbaInboundApiListTransportationOptionsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of transportation options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly paginationToken?: string

    /**
     * The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly placementOptionId?: string

    /**
     * The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly shipmentId?: string
}

/**
 * Request parameters for scheduleSelfShipAppointment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiScheduleSelfShipAppointmentRequest
 */
export interface FbaInboundApiScheduleSelfShipAppointmentRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * An identifier to a self-ship appointment slot.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly slotId: string

    /**
     * The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
     * @type {ScheduleSelfShipAppointmentRequest}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly body: ScheduleSelfShipAppointmentRequest
}

/**
 * Request parameters for setPackingInformation operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiSetPackingInformationRequest
 */
export interface FbaInboundApiSetPackingInformationRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiSetPackingInformation
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;setPackingInformation&#x60;.
     * @type {SetPackingInformationRequest}
     * @memberof FbaInboundApiSetPackingInformation
     */
    readonly body: SetPackingInformationRequest
}

/**
 * Request parameters for updateInboundPlanName operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateInboundPlanNameRequest
 */
export interface FbaInboundApiUpdateInboundPlanNameRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateInboundPlanName
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;updateInboundPlanName&#x60;.
     * @type {UpdateInboundPlanNameRequest}
     * @memberof FbaInboundApiUpdateInboundPlanName
     */
    readonly body: UpdateInboundPlanNameRequest
}

/**
 * Request parameters for updateItemComplianceDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateItemComplianceDetailsRequest
 */
export interface FbaInboundApiUpdateItemComplianceDetailsRequest {
    /**
     * The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
     * @type {string}
     * @memberof FbaInboundApiUpdateItemComplianceDetails
     */
    readonly marketplaceId: string

    /**
     * The body of the request to &#x60;updateItemComplianceDetails&#x60;.
     * @type {UpdateItemComplianceDetailsRequest}
     * @memberof FbaInboundApiUpdateItemComplianceDetails
     */
    readonly body: UpdateItemComplianceDetailsRequest
}

/**
 * Request parameters for updateShipmentName operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateShipmentNameRequest
 */
export interface FbaInboundApiUpdateShipmentNameRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentName
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentName
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentName&#x60;.
     * @type {UpdateShipmentNameRequest}
     * @memberof FbaInboundApiUpdateShipmentName
     */
    readonly body: UpdateShipmentNameRequest
}

/**
 * Request parameters for updateShipmentSourceAddress operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateShipmentSourceAddressRequest
 */
export interface FbaInboundApiUpdateShipmentSourceAddressRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentSourceAddress
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentSourceAddress
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
     * @type {UpdateShipmentSourceAddressRequest}
     * @memberof FbaInboundApiUpdateShipmentSourceAddress
     */
    readonly body: UpdateShipmentSourceAddressRequest
}

/**
 * Request parameters for updateShipmentTrackingDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateShipmentTrackingDetailsRequest
 */
export interface FbaInboundApiUpdateShipmentTrackingDetailsRequest {
    /**
     * Identifier of an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly inboundPlanId: string

    /**
     * Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
     * @type {UpdateShipmentTrackingDetailsRequest}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly body: UpdateShipmentTrackingDetailsRequest
}

/**
 * FbaInboundApi - object-oriented interface
 * @export
 * @class FbaInboundApi
 * @extends {BaseAPI}
 */
export class FbaInboundApi extends BaseAPI {
    /**
     * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiCancelInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public cancelInboundPlan(requestParameters: FbaInboundApiCancelInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).cancelInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiCancelSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public cancelSelfShipAppointment(requestParameters: FbaInboundApiCancelSelfShipAppointmentRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).cancelSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiConfirmDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmDeliveryWindowOptions(requestParameters: FbaInboundApiConfirmDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).confirmDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.deliveryWindowOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiConfirmPackingOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmPackingOption(requestParameters: FbaInboundApiConfirmPackingOptionRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).confirmPackingOption(requestParameters.inboundPlanId, requestParameters.packingOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiConfirmPlacementOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmPlacementOption(requestParameters: FbaInboundApiConfirmPlacementOptionRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).confirmPlacementOption(requestParameters.inboundPlanId, requestParameters.placementOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiConfirmShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmShipmentContentUpdatePreview(requestParameters: FbaInboundApiConfirmShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).confirmShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiConfirmTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmTransportationOptions(requestParameters: FbaInboundApiConfirmTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).confirmTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiCreateInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public createInboundPlan(requestParameters: FbaInboundApiCreateInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).createInboundPlan(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For a given marketplace - creates labels for a list of mskus.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiCreateMarketplaceItemLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public createMarketplaceItemLabels(requestParameters: FbaInboundApiCreateMarketplaceItemLabelsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).createMarketplaceItemLabels(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGenerateDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateDeliveryWindowOptions(requestParameters: FbaInboundApiGenerateDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generateDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGeneratePackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generatePackingOptions(requestParameters: FbaInboundApiGeneratePackingOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generatePackingOptions(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGeneratePlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generatePlacementOptions(requestParameters: FbaInboundApiGeneratePlacementOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generatePlacementOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGenerateSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateSelfShipAppointmentSlots(requestParameters: FbaInboundApiGenerateSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generateSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateShipmentContentUpdatePreviews(requestParameters: FbaInboundApiGenerateShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generateShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGenerateTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateTransportationOptions(requestParameters: FbaInboundApiGenerateTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).generateTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetDeliveryChallanDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getDeliveryChallanDocument(requestParameters: FbaInboundApiGetDeliveryChallanDocumentRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getDeliveryChallanDocument(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetInboundOperationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getInboundOperationStatus(requestParameters: FbaInboundApiGetInboundOperationStatusRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getInboundOperationStatus(requestParameters.operationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getInboundPlan(requestParameters: FbaInboundApiGetInboundPlanRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getSelfShipAppointmentSlots(requestParameters: FbaInboundApiGetSelfShipAppointmentSlotsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getShipment(requestParameters: FbaInboundApiGetShipmentRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getShipment(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiGetShipmentContentUpdatePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getShipmentContentUpdatePreview(requestParameters: FbaInboundApiGetShipmentContentUpdatePreviewRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).getShipmentContentUpdatePreview(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.contentUpdatePreviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListDeliveryWindowOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listDeliveryWindowOptions(requestParameters: FbaInboundApiListDeliveryWindowOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listDeliveryWindowOptions(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListInboundPlanBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanBoxes(requestParameters: FbaInboundApiListInboundPlanBoxesRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listInboundPlanBoxes(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListInboundPlanItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanItems(requestParameters: FbaInboundApiListInboundPlanItemsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listInboundPlanItems(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListInboundPlanPalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanPallets(requestParameters: FbaInboundApiListInboundPlanPalletsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listInboundPlanPallets(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListInboundPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlans(requestParameters: FbaInboundApiListInboundPlansRequest = {}, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listInboundPlans(requestParameters.pageSize, requestParameters.paginationToken, requestParameters.status, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listItemComplianceDetails(requestParameters: FbaInboundApiListItemComplianceDetailsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listItemComplianceDetails(requestParameters.mskus, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListPackingGroupBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPackingGroupBoxes(requestParameters: FbaInboundApiListPackingGroupBoxesRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listPackingGroupBoxes(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListPackingGroupItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPackingGroupItems(requestParameters: FbaInboundApiListPackingGroupItemsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listPackingGroupItems(requestParameters.inboundPlanId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListPackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPackingOptions(requestParameters: FbaInboundApiListPackingOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listPackingOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListPlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPlacementOptions(requestParameters: FbaInboundApiListPlacementOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listPlacementOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListShipmentBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listShipmentBoxes(requestParameters: FbaInboundApiListShipmentBoxesRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listShipmentBoxes(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListShipmentContentUpdatePreviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listShipmentContentUpdatePreviews(requestParameters: FbaInboundApiListShipmentContentUpdatePreviewsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listShipmentContentUpdatePreviews(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListShipmentItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listShipmentItems(requestParameters: FbaInboundApiListShipmentItemsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listShipmentItems(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListShipmentPalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listShipmentPallets(requestParameters: FbaInboundApiListShipmentPalletsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listShipmentPallets(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiListTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listTransportationOptions(requestParameters: FbaInboundApiListTransportationOptionsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).listTransportationOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, requestParameters.placementOptionId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiScheduleSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public scheduleSelfShipAppointment(requestParameters: FbaInboundApiScheduleSelfShipAppointmentRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).scheduleSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiSetPackingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public setPackingInformation(requestParameters: FbaInboundApiSetPackingInformationRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).setPackingInformation(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiUpdateInboundPlanNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateInboundPlanName(requestParameters: FbaInboundApiUpdateInboundPlanNameRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).updateInboundPlanName(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiUpdateItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateItemComplianceDetails(requestParameters: FbaInboundApiUpdateItemComplianceDetailsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).updateItemComplianceDetails(requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiUpdateShipmentNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateShipmentName(requestParameters: FbaInboundApiUpdateShipmentNameRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).updateShipmentName(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiUpdateShipmentSourceAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateShipmentSourceAddress(requestParameters: FbaInboundApiUpdateShipmentSourceAddressRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).updateShipmentSourceAddress(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
     * @param {FbaInboundApiUpdateShipmentTrackingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateShipmentTrackingDetails(requestParameters: FbaInboundApiUpdateShipmentTrackingDetailsRequest, options?: RawAxiosRequestConfig) {
        return FbaInboundApiFp(this.configuration).updateShipmentTrackingDetails(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListInboundPlansStatusEnum = {
    Active: 'ACTIVE',
    Voided: 'VOIDED',
    Shipped: 'SHIPPED'
} as const;
export type ListInboundPlansStatusEnum = typeof ListInboundPlansStatusEnum[keyof typeof ListInboundPlansStatusEnum];
/**
 * @export
 */
export const ListInboundPlansSortByEnum = {
    LastUpdatedTime: 'LAST_UPDATED_TIME',
    CreationTime: 'CREATION_TIME'
} as const;
export type ListInboundPlansSortByEnum = typeof ListInboundPlansSortByEnum[keyof typeof ListInboundPlansSortByEnum];
/**
 * @export
 */
export const ListInboundPlansSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type ListInboundPlansSortOrderEnum = typeof ListInboundPlansSortOrderEnum[keyof typeof ListInboundPlansSortOrderEnum];
