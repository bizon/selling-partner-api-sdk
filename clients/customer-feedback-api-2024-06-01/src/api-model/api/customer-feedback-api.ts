/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for CustomerFeedback
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BrowseNodeResponse } from '../models';
// @ts-ignore
import type { BrowseNodeReturnTopicsResponse } from '../models';
// @ts-ignore
import type { BrowseNodeReturnTrendsResponse } from '../models';
// @ts-ignore
import type { BrowseNodeReviewTopicsResponse } from '../models';
// @ts-ignore
import type { BrowseNodeReviewTrendsResponse } from '../models';
// @ts-ignore
import type { ErrorList } from '../models';
// @ts-ignore
import type { ItemReviewTopicsResponse } from '../models';
// @ts-ignore
import type { ItemReviewTrendsResponse } from '../models';
/**
 * CustomerFeedbackApi - axios parameter creator
 * @export
 */
export const CustomerFeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the topics that customers mention when they return items in a browse node.
         * @param {string} browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReturnTopics: async (browseNodeId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'browseNodeId' is not null or undefined
            assertParamExists('getBrowseNodeReturnTopics', 'browseNodeId', browseNodeId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getBrowseNodeReturnTopics', 'marketplaceId', marketplaceId)
            const localVarPath = `/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics`
                .replace(`{${"browseNodeId"}}`, encodeURIComponent(String(browseNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the trends of topics that customers mention when they return items in a browse node.
         * @param {string} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReturnTrends: async (browseNodeId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'browseNodeId' is not null or undefined
            assertParamExists('getBrowseNodeReturnTrends', 'browseNodeId', browseNodeId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getBrowseNodeReturnTrends', 'marketplaceId', marketplaceId)
            const localVarPath = `/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends`
                .replace(`{${"browseNodeId"}}`, encodeURIComponent(String(browseNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a browse node\'s ten most positive and ten most negative review topics.
         * @param {string} browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {string} sortBy The metric by which to sort the data in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReviewTopics: async (browseNodeId: string, marketplaceId: string, sortBy: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'browseNodeId' is not null or undefined
            assertParamExists('getBrowseNodeReviewTopics', 'browseNodeId', browseNodeId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getBrowseNodeReviewTopics', 'marketplaceId', marketplaceId)
            // verify required parameter 'sortBy' is not null or undefined
            assertParamExists('getBrowseNodeReviewTopics', 'sortBy', sortBy)
            const localVarPath = `/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics`
                .replace(`{${"browseNodeId"}}`, encodeURIComponent(String(browseNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the positive and negative review trends of items in a browse node for the past six months.
         * @param {string} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReviewTrends: async (browseNodeId: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'browseNodeId' is not null or undefined
            assertParamExists('getBrowseNodeReviewTrends', 'browseNodeId', browseNodeId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getBrowseNodeReviewTrends', 'marketplaceId', marketplaceId)
            const localVarPath = `/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends`
                .replace(`{${"browseNodeId"}}`, encodeURIComponent(String(browseNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemBrowseNode: async (asin: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemBrowseNode', 'asin', asin)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getItemBrowseNode', 'marketplaceId', marketplaceId)
            const localVarPath = `/customerFeedback/2024-06-01/items/{asin}/browseNode`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an item\'s ten most positive and ten most negative review topics.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {string} sortBy The metric by which to sort data in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemReviewTopics: async (asin: string, marketplaceId: string, sortBy: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemReviewTopics', 'asin', asin)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getItemReviewTopics', 'marketplaceId', marketplaceId)
            // verify required parameter 'sortBy' is not null or undefined
            assertParamExists('getItemReviewTopics', 'sortBy', sortBy)
            const localVarPath = `/customerFeedback/2024-06-01/items/{asin}/reviews/topics`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an item\'s positive and negative review trends for the past six months.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemReviewTrends: async (asin: string, marketplaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemReviewTrends', 'asin', asin)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getItemReviewTrends', 'marketplaceId', marketplaceId)
            const localVarPath = `/customerFeedback/2024-06-01/items/{asin}/reviews/trends`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerFeedbackApi - functional programming interface
 * @export
 */
export const CustomerFeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerFeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the topics that customers mention when they return items in a browse node.
         * @param {string} browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowseNodeReturnTopics(browseNodeId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowseNodeReturnTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowseNodeReturnTopics(browseNodeId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getBrowseNodeReturnTopics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the trends of topics that customers mention when they return items in a browse node.
         * @param {string} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowseNodeReturnTrends(browseNodeId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowseNodeReturnTrendsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowseNodeReturnTrends(browseNodeId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getBrowseNodeReturnTrends']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a browse node\'s ten most positive and ten most negative review topics.
         * @param {string} browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {string} sortBy The metric by which to sort the data in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowseNodeReviewTopics(browseNodeId: string, marketplaceId: string, sortBy: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowseNodeReviewTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowseNodeReviewTopics(browseNodeId, marketplaceId, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getBrowseNodeReviewTopics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the positive and negative review trends of items in a browse node for the past six months.
         * @param {string} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
         * @param {string} marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowseNodeReviewTrends(browseNodeId: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowseNodeReviewTrendsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowseNodeReviewTrends(browseNodeId, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getBrowseNodeReviewTrends']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemBrowseNode(asin: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowseNodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemBrowseNode(asin, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getItemBrowseNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an item\'s ten most positive and ten most negative review topics.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {string} sortBy The metric by which to sort data in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemReviewTopics(asin: string, marketplaceId: string, sortBy: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemReviewTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemReviewTopics(asin, marketplaceId, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getItemReviewTopics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an item\'s positive and negative review trends for the past six months.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.
         * @param {string} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemReviewTrends(asin: string, marketplaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemReviewTrendsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemReviewTrends(asin, marketplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeedbackApi.getItemReviewTrends']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerFeedbackApi - factory interface
 * @export
 */
export const CustomerFeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerFeedbackApiFp(configuration)
    return {
        /**
         * Retrieve the topics that customers mention when they return items in a browse node.
         * @param {CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReturnTopics(requestParameters: CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrowseNodeReturnTopicsResponse> {
            return localVarFp.getBrowseNodeReturnTopics(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the trends of topics that customers mention when they return items in a browse node.
         * @param {CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReturnTrends(requestParameters: CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrowseNodeReturnTrendsResponse> {
            return localVarFp.getBrowseNodeReturnTrends(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a browse node\'s ten most positive and ten most negative review topics.
         * @param {CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReviewTopics(requestParameters: CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrowseNodeReviewTopicsResponse> {
            return localVarFp.getBrowseNodeReviewTopics(requestParameters.browseNodeId, requestParameters.marketplaceId, requestParameters.sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the positive and negative review trends of items in a browse node for the past six months.
         * @param {CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowseNodeReviewTrends(requestParameters: CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrowseNodeReviewTrendsResponse> {
            return localVarFp.getBrowseNodeReviewTrends(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
         * @param {CustomerFeedbackApiGetItemBrowseNodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemBrowseNode(requestParameters: CustomerFeedbackApiGetItemBrowseNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrowseNodeResponse> {
            return localVarFp.getItemBrowseNode(requestParameters.asin, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an item\'s ten most positive and ten most negative review topics.
         * @param {CustomerFeedbackApiGetItemReviewTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemReviewTopics(requestParameters: CustomerFeedbackApiGetItemReviewTopicsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ItemReviewTopicsResponse> {
            return localVarFp.getItemReviewTopics(requestParameters.asin, requestParameters.marketplaceId, requestParameters.sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an item\'s positive and negative review trends for the past six months.
         * @param {CustomerFeedbackApiGetItemReviewTrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemReviewTrends(requestParameters: CustomerFeedbackApiGetItemReviewTrendsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ItemReviewTrendsResponse> {
            return localVarFp.getItemReviewTrends(requestParameters.asin, requestParameters.marketplaceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBrowseNodeReturnTopics operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest
 */
export interface CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest {
    /**
     * A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReturnTopics
     */
    readonly browseNodeId: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReturnTopics
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getBrowseNodeReturnTrends operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest
 */
export interface CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest {
    /**
     * A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReturnTrends
     */
    readonly browseNodeId: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReturnTrends
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getBrowseNodeReviewTopics operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest
 */
export interface CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest {
    /**
     * The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReviewTopics
     */
    readonly browseNodeId: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReviewTopics
     */
    readonly marketplaceId: string

    /**
     * The metric by which to sort the data in the response.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReviewTopics
     */
    readonly sortBy: string
}

/**
 * Request parameters for getBrowseNodeReviewTrends operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest
 */
export interface CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest {
    /**
     * A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReviewTrends
     */
    readonly browseNodeId: string

    /**
     * The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof CustomerFeedbackApiGetBrowseNodeReviewTrends
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getItemBrowseNode operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetItemBrowseNodeRequest
 */
export interface CustomerFeedbackApiGetItemBrowseNodeRequest {
    /**
     * The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemBrowseNode
     */
    readonly asin: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemBrowseNode
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getItemReviewTopics operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetItemReviewTopicsRequest
 */
export interface CustomerFeedbackApiGetItemReviewTopicsRequest {
    /**
     * The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemReviewTopics
     */
    readonly asin: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemReviewTopics
     */
    readonly marketplaceId: string

    /**
     * The metric by which to sort data in the response.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemReviewTopics
     */
    readonly sortBy: string
}

/**
 * Request parameters for getItemReviewTrends operation in CustomerFeedbackApi.
 * @export
 * @interface CustomerFeedbackApiGetItemReviewTrendsRequest
 */
export interface CustomerFeedbackApiGetItemReviewTrendsRequest {
    /**
     * The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemReviewTrends
     */
    readonly asin: string

    /**
     * The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @type {string}
     * @memberof CustomerFeedbackApiGetItemReviewTrends
     */
    readonly marketplaceId: string
}

/**
 * CustomerFeedbackApi - object-oriented interface
 * @export
 * @class CustomerFeedbackApi
 * @extends {BaseAPI}
 */
export class CustomerFeedbackApi extends BaseAPI {
    /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     * @param {CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getBrowseNodeReturnTopics(requestParameters: CustomerFeedbackApiGetBrowseNodeReturnTopicsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getBrowseNodeReturnTopics(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     * @param {CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getBrowseNodeReturnTrends(requestParameters: CustomerFeedbackApiGetBrowseNodeReturnTrendsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getBrowseNodeReturnTrends(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a browse node\'s ten most positive and ten most negative review topics.
     * @param {CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getBrowseNodeReviewTopics(requestParameters: CustomerFeedbackApiGetBrowseNodeReviewTopicsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getBrowseNodeReviewTopics(requestParameters.browseNodeId, requestParameters.marketplaceId, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     * @param {CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getBrowseNodeReviewTrends(requestParameters: CustomerFeedbackApiGetBrowseNodeReviewTrendsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getBrowseNodeReviewTrends(requestParameters.browseNodeId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
     * @param {CustomerFeedbackApiGetItemBrowseNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getItemBrowseNode(requestParameters: CustomerFeedbackApiGetItemBrowseNodeRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getItemBrowseNode(requestParameters.asin, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an item\'s ten most positive and ten most negative review topics.
     * @param {CustomerFeedbackApiGetItemReviewTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getItemReviewTopics(requestParameters: CustomerFeedbackApiGetItemReviewTopicsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getItemReviewTopics(requestParameters.asin, requestParameters.marketplaceId, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an item\'s positive and negative review trends for the past six months.
     * @param {CustomerFeedbackApiGetItemReviewTrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeedbackApi
     */
    public getItemReviewTrends(requestParameters: CustomerFeedbackApiGetItemReviewTrendsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeedbackApiFp(this.configuration).getItemReviewTrends(requestParameters.asin, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }
}

