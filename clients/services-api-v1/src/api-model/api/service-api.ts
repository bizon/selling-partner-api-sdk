/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddAppointmentRequest } from '../models';
// @ts-ignore
import { CancelServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import { CompleteServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import { GetServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import { GetServiceJobsResponse } from '../models';
// @ts-ignore
import { RescheduleAppointmentRequest } from '../models';
// @ts-ignore
import { SetAppointmentResponse } from '../models';
/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, body: AddAppointmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId: async (serviceJobId: string, cancellationReasonCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'cancellationReasonCode' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'cancellationReasonCode', cancellationReasonCode)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/cancellations`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cancellationReasonCode !== undefined) {
                localVarQueryParameter['cancellationReasonCode'] = cancellationReasonCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId: async (serviceJobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('completeServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/completions`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId: async (serviceJobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('getServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces. 
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20. 
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [createdBefore] A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs: async (marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getServiceJobs', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/serviceJobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceOrderIds) {
                localVarQueryParameter['serviceOrderIds'] = serviceOrderIds.join(COLLECTION_FORMATS.csv);
            }

            if (serviceJobStatus) {
                localVarQueryParameter['serviceJobStatus'] = serviceJobStatus.join(COLLECTION_FORMATS.csv);
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = createdBefore;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = lastUpdatedBefore;
            }

            if (scheduleStartDate !== undefined) {
                localVarQueryParameter['scheduleStartDate'] = scheduleStartDate;
            }

            if (scheduleEndDate !== undefined) {
                localVarQueryParameter['scheduleEndDate'] = scheduleEndDate;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppointmentForServiceJobByServiceJobId(serviceJobId: string, body: AddAppointmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelServiceJobByServiceJobId(serviceJobId: string, cancellationReasonCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeServiceJobByServiceJobId(serviceJobId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeServiceJobByServiceJobId(serviceJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobByServiceJobId(serviceJobId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobByServiceJobId(serviceJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces. 
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20. 
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [createdBefore] A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobs(marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceApiFp(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId(serviceJobId: string, body: AddAppointmentRequest, options?: any): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId(serviceJobId: string, cancellationReasonCode: string, options?: any): AxiosPromise<CancelServiceJobByServiceJobIdResponse> {
            return localVarFp.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId(serviceJobId: string, options?: any): AxiosPromise<CompleteServiceJobByServiceJobIdResponse> {
            return localVarFp.completeServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId(serviceJobId: string, options?: any): AxiosPromise<GetServiceJobByServiceJobIdResponse> {
            return localVarFp.getServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces. 
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20. 
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [createdBefore] A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs(marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, options?: any): AxiosPromise<GetServiceJobsResponse> {
            return localVarFp.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options?: any): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * Add appointment operation input details.
     * @type {AddAppointmentRequest}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly body: AddAppointmentRequest
}

/**
 * Request parameters for cancelServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCancelServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCancelServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * A cancel reason code that specifies the reason for cancelling a service job.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly cancellationReasonCode: string
}

/**
 * Request parameters for completeServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCompleteServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCompleteServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCompleteServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for getServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobByServiceJobIdRequest
 */
export interface ServiceApiGetServiceJobByServiceJobIdRequest {
    /**
     * A service job identifier.
     * @type {string}
     * @memberof ServiceApiGetServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for getServiceJobs operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobsRequest
 */
export interface ServiceApiGetServiceJobsRequest {
    /**
     * Used to select jobs that were placed in the specified marketplaces. 
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly marketplaceIds: Array<string>

    /**
     * List of service order ids for the query you want to perform.Max values supported 20. 
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceOrderIds?: Array<string>

    /**
     * A list of one or more job status by which to filter the list of jobs.
     * @type {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>

    /**
     * String returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageToken?: string

    /**
     * A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. 
     * @type {number}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageSize?: number

    /**
     * Sort fields on which you want to sort the output.
     * @type {'JOB_DATE' | 'JOB_STATUS'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortField?: 'JOB_DATE' | 'JOB_STATUS'

    /**
     * Sort order for the query you want to perform.
     * @type {'ASC' | 'DESC'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * A date used for selecting jobs created after (or at) a specified time must be in ISO 8601 format. Required if LastUpdatedAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdAfter?: string

    /**
     * A date used for selecting jobs created before (or at) a specified time must be in ISO 8601 format. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdBefore?: string

    /**
     * A date used for selecting jobs updated after (or at) a specified time must be in ISO 8601 format. Required if createdAfter is not specified.Specifying both CreatedAfter and LastUpdatedAfter returns an error. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedAfter?: string

    /**
     * A date used for selecting jobs updated before (or at) a specified time must be in ISO 8601 format. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedBefore?: string

    /**
     * A date used for filtering jobs schedule after (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleStartDate?: string

    /**
     * A date used for filtering jobs schedule before (or at) a specified time must be in ISO 8601 format. schedule end date should not be earlier than schedule start date. 
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleEndDate?: string
}

/**
 * Request parameters for rescheduleAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * An existing appointment identifier for the Service Job.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly appointmentId: string

    /**
     * Reschedule appointment operation input details.
     * @type {RescheduleAppointmentRequest}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly body: RescheduleAppointmentRequest
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public addAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).addAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiCancelServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public cancelServiceJobByServiceJobId(requestParameters: ServiceApiCancelServiceJobByServiceJobIdRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).cancelServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.cancellationReasonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiCompleteServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public completeServiceJobByServiceJobId(requestParameters: ServiceApiCompleteServiceJobByServiceJobIdRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).completeServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiGetServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobByServiceJobId(requestParameters: ServiceApiGetServiceJobByServiceJobIdRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiGetServiceJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobs(requestParameters: ServiceApiGetServiceJobsRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getServiceJobs(requestParameters.marketplaceIds, requestParameters.serviceOrderIds, requestParameters.serviceJobStatus, requestParameters.pageToken, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortOrder, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.scheduleStartDate, requestParameters.scheduleEndDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public rescheduleAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).rescheduleAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
