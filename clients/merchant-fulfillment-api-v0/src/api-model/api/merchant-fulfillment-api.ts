/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancelShipmentResponse } from '../models';
// @ts-ignore
import { CreateShipmentRequest } from '../models';
// @ts-ignore
import { CreateShipmentResponse } from '../models';
// @ts-ignore
import { GetAdditionalSellerInputsRequest } from '../models';
// @ts-ignore
import { GetAdditionalSellerInputsResponse } from '../models';
// @ts-ignore
import { GetEligibleShipmentServicesRequest } from '../models';
// @ts-ignore
import { GetEligibleShipmentServicesResponse } from '../models';
// @ts-ignore
import { GetShipmentResponse } from '../models';
/**
 * MerchantFulfillmentApi - axios parameter creator
 * @export
 */
export const MerchantFulfillmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipment', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipmentOld: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipmentOld', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}/cancel`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment: async (body: CreateShipmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createShipment', 'body', body)
            const localVarPath = `/mfn/v0/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputs: async (body: GetAdditionalSellerInputsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAdditionalSellerInputs', 'body', body)
            const localVarPath = `/mfn/v0/additionalSellerInputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputsOld: async (body: GetAdditionalSellerInputsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAdditionalSellerInputsOld', 'body', body)
            const localVarPath = `/mfn/v0/sellerInputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServices: async (body: GetEligibleShipmentServicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getEligibleShipmentServices', 'body', body)
            const localVarPath = `/mfn/v0/eligibleShippingServices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServicesOld: async (body: GetEligibleShipmentServicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getEligibleShipmentServicesOld', 'body', body)
            const localVarPath = `/mfn/v0/eligibleServices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantFulfillmentApi - functional programming interface
 * @export
 */
export const MerchantFulfillmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantFulfillmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(shipmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipmentOld(shipmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipmentOld(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipment(body: CreateShipmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipment(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalSellerInputs(body: GetAdditionalSellerInputsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdditionalSellerInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalSellerInputs(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalSellerInputsOld(body: GetAdditionalSellerInputsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdditionalSellerInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalSellerInputsOld(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEligibleShipmentServices(body: GetEligibleShipmentServicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEligibleShipmentServicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEligibleShipmentServices(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEligibleShipmentServicesOld(body: GetEligibleShipmentServicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEligibleShipmentServicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEligibleShipmentServicesOld(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(shipmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantFulfillmentApi - factory interface
 * @export
 */
export const MerchantFulfillmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantFulfillmentApiFp(configuration)
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipmentOld(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipmentOld(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment(body: CreateShipmentRequest, options?: any): AxiosPromise<CreateShipmentResponse> {
            return localVarFp.createShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputs(body: GetAdditionalSellerInputsRequest, options?: any): AxiosPromise<GetAdditionalSellerInputsResponse> {
            return localVarFp.getAdditionalSellerInputs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputsOld(body: GetAdditionalSellerInputsRequest, options?: any): AxiosPromise<GetAdditionalSellerInputsResponse> {
            return localVarFp.getAdditionalSellerInputsOld(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServices(body: GetEligibleShipmentServicesRequest, options?: any): AxiosPromise<GetEligibleShipmentServicesResponse> {
            return localVarFp.getEligibleShipmentServices(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServicesOld(body: GetEligibleShipmentServicesRequest, options?: any): AxiosPromise<GetEligibleShipmentServicesResponse> {
            return localVarFp.getEligibleShipmentServicesOld(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(shipmentId: string, options?: any): AxiosPromise<GetShipmentResponse> {
            return localVarFp.getShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCancelShipmentRequest
 */
export interface MerchantFulfillmentApiCancelShipmentRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment to cancel.
     * @type {string}
     * @memberof MerchantFulfillmentApiCancelShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for cancelShipmentOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCancelShipmentOldRequest
 */
export interface MerchantFulfillmentApiCancelShipmentOldRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment to cancel.
     * @type {string}
     * @memberof MerchantFulfillmentApiCancelShipmentOld
     */
    readonly shipmentId: string
}

/**
 * Request parameters for createShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCreateShipmentRequest
 */
export interface MerchantFulfillmentApiCreateShipmentRequest {
    /**
     * 
     * @type {CreateShipmentRequest}
     * @memberof MerchantFulfillmentApiCreateShipment
     */
    readonly body: CreateShipmentRequest
}

/**
 * Request parameters for getAdditionalSellerInputs operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetAdditionalSellerInputsRequest
 */
export interface MerchantFulfillmentApiGetAdditionalSellerInputsRequest {
    /**
     * 
     * @type {GetAdditionalSellerInputsRequest}
     * @memberof MerchantFulfillmentApiGetAdditionalSellerInputs
     */
    readonly body: GetAdditionalSellerInputsRequest
}

/**
 * Request parameters for getAdditionalSellerInputsOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest
 */
export interface MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest {
    /**
     * 
     * @type {GetAdditionalSellerInputsRequest}
     * @memberof MerchantFulfillmentApiGetAdditionalSellerInputsOld
     */
    readonly body: GetAdditionalSellerInputsRequest
}

/**
 * Request parameters for getEligibleShipmentServices operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetEligibleShipmentServicesRequest
 */
export interface MerchantFulfillmentApiGetEligibleShipmentServicesRequest {
    /**
     * 
     * @type {GetEligibleShipmentServicesRequest}
     * @memberof MerchantFulfillmentApiGetEligibleShipmentServices
     */
    readonly body: GetEligibleShipmentServicesRequest
}

/**
 * Request parameters for getEligibleShipmentServicesOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest
 */
export interface MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest {
    /**
     * 
     * @type {GetEligibleShipmentServicesRequest}
     * @memberof MerchantFulfillmentApiGetEligibleShipmentServicesOld
     */
    readonly body: GetEligibleShipmentServicesRequest
}

/**
 * Request parameters for getShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetShipmentRequest
 */
export interface MerchantFulfillmentApiGetShipmentRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment.
     * @type {string}
     * @memberof MerchantFulfillmentApiGetShipment
     */
    readonly shipmentId: string
}

/**
 * MerchantFulfillmentApi - object-oriented interface
 * @export
 * @class MerchantFulfillmentApi
 * @extends {BaseAPI}
 */
export class MerchantFulfillmentApi extends BaseAPI {
    /**
     * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCancelShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public cancelShipment(requestParameters: MerchantFulfillmentApiCancelShipmentRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).cancelShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCancelShipmentOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public cancelShipmentOld(requestParameters: MerchantFulfillmentApiCancelShipmentOldRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).cancelShipmentOld(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCreateShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public createShipment(requestParameters: MerchantFulfillmentApiCreateShipmentRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).createShipment(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetAdditionalSellerInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getAdditionalSellerInputs(requestParameters: MerchantFulfillmentApiGetAdditionalSellerInputsRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).getAdditionalSellerInputs(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getAdditionalSellerInputsOld(requestParameters: MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).getAdditionalSellerInputsOld(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetEligibleShipmentServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getEligibleShipmentServices(requestParameters: MerchantFulfillmentApiGetEligibleShipmentServicesRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).getEligibleShipmentServices(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getEligibleShipmentServicesOld(requestParameters: MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).getEligibleShipmentServicesOld(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getShipment(requestParameters: MerchantFulfillmentApiGetShipmentRequest, options?: AxiosRequestConfig) {
        return MerchantFulfillmentApiFp(this.configuration).getShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }
}
