/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetShipmentDetailsResponse } from '../models';
// @ts-ignore
import { SubmitShipmentConfirmationsRequest } from '../models';
// @ts-ignore
import { SubmitShipmentConfirmationsResponse } from '../models';
// @ts-ignore
import { SubmitShipments } from '../models';
/**
 * VendorShippingApi - axios parameter creator
 * @export
 */
export const VendorShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 50 records.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more shipments than the specified result size limit.
         * @param {string} [createdAfter] Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [createdBefore] Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentConfirmedBefore] Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentConfirmedAfter] Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [packageLabelCreatedBefore] Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [packageLabelCreatedAfter] Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shippedBefore] Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shippedAfter] Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [estimatedDeliveryBefore] Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [estimatedDeliveryAfter] Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentDeliveryBefore] Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentDeliveryAfter] Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [requestedPickUpBefore] Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [requestedPickUpAfter] Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [scheduledPickUpBefore] Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [scheduledPickUpAfter] Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [currentShipmentStatus] Get Shipment Details by passing Current shipment status.
         * @param {string} [vendorShipmentIdentifier] Get Shipment Details by passing Vendor Shipment ID
         * @param {string} [buyerReferenceNumber] Get Shipment Details by passing buyer Reference ID
         * @param {string} [buyerWarehouseCode] Get Shipping Details based on buyer warehouse code. This value should be same as \&#39;shipToParty.partyId\&#39; in the Shipment.
         * @param {string} [sellerWarehouseCode] Get Shipping Details based on vendor warehouse code. This value should be same as \&#39;sellingParty.partyId\&#39; in the Shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDetails: async (limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, createdAfter?: string, createdBefore?: string, shipmentConfirmedBefore?: string, shipmentConfirmedAfter?: string, packageLabelCreatedBefore?: string, packageLabelCreatedAfter?: string, shippedBefore?: string, shippedAfter?: string, estimatedDeliveryBefore?: string, estimatedDeliveryAfter?: string, shipmentDeliveryBefore?: string, shipmentDeliveryAfter?: string, requestedPickUpBefore?: string, requestedPickUpAfter?: string, scheduledPickUpBefore?: string, scheduledPickUpAfter?: string, currentShipmentStatus?: string, vendorShipmentIdentifier?: string, buyerReferenceNumber?: string, buyerWarehouseCode?: string, sellerWarehouseCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/shipping/v1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (shipmentConfirmedBefore !== undefined) {
                localVarQueryParameter['shipmentConfirmedBefore'] = (shipmentConfirmedBefore as any instanceof Date) ?
                    (shipmentConfirmedBefore as any).toISOString() :
                    shipmentConfirmedBefore;
            }

            if (shipmentConfirmedAfter !== undefined) {
                localVarQueryParameter['shipmentConfirmedAfter'] = (shipmentConfirmedAfter as any instanceof Date) ?
                    (shipmentConfirmedAfter as any).toISOString() :
                    shipmentConfirmedAfter;
            }

            if (packageLabelCreatedBefore !== undefined) {
                localVarQueryParameter['packageLabelCreatedBefore'] = (packageLabelCreatedBefore as any instanceof Date) ?
                    (packageLabelCreatedBefore as any).toISOString() :
                    packageLabelCreatedBefore;
            }

            if (packageLabelCreatedAfter !== undefined) {
                localVarQueryParameter['packageLabelCreatedAfter'] = (packageLabelCreatedAfter as any instanceof Date) ?
                    (packageLabelCreatedAfter as any).toISOString() :
                    packageLabelCreatedAfter;
            }

            if (shippedBefore !== undefined) {
                localVarQueryParameter['shippedBefore'] = (shippedBefore as any instanceof Date) ?
                    (shippedBefore as any).toISOString() :
                    shippedBefore;
            }

            if (shippedAfter !== undefined) {
                localVarQueryParameter['shippedAfter'] = (shippedAfter as any instanceof Date) ?
                    (shippedAfter as any).toISOString() :
                    shippedAfter;
            }

            if (estimatedDeliveryBefore !== undefined) {
                localVarQueryParameter['estimatedDeliveryBefore'] = (estimatedDeliveryBefore as any instanceof Date) ?
                    (estimatedDeliveryBefore as any).toISOString() :
                    estimatedDeliveryBefore;
            }

            if (estimatedDeliveryAfter !== undefined) {
                localVarQueryParameter['estimatedDeliveryAfter'] = (estimatedDeliveryAfter as any instanceof Date) ?
                    (estimatedDeliveryAfter as any).toISOString() :
                    estimatedDeliveryAfter;
            }

            if (shipmentDeliveryBefore !== undefined) {
                localVarQueryParameter['shipmentDeliveryBefore'] = (shipmentDeliveryBefore as any instanceof Date) ?
                    (shipmentDeliveryBefore as any).toISOString() :
                    shipmentDeliveryBefore;
            }

            if (shipmentDeliveryAfter !== undefined) {
                localVarQueryParameter['shipmentDeliveryAfter'] = (shipmentDeliveryAfter as any instanceof Date) ?
                    (shipmentDeliveryAfter as any).toISOString() :
                    shipmentDeliveryAfter;
            }

            if (requestedPickUpBefore !== undefined) {
                localVarQueryParameter['requestedPickUpBefore'] = (requestedPickUpBefore as any instanceof Date) ?
                    (requestedPickUpBefore as any).toISOString() :
                    requestedPickUpBefore;
            }

            if (requestedPickUpAfter !== undefined) {
                localVarQueryParameter['requestedPickUpAfter'] = (requestedPickUpAfter as any instanceof Date) ?
                    (requestedPickUpAfter as any).toISOString() :
                    requestedPickUpAfter;
            }

            if (scheduledPickUpBefore !== undefined) {
                localVarQueryParameter['scheduledPickUpBefore'] = (scheduledPickUpBefore as any instanceof Date) ?
                    (scheduledPickUpBefore as any).toISOString() :
                    scheduledPickUpBefore;
            }

            if (scheduledPickUpAfter !== undefined) {
                localVarQueryParameter['scheduledPickUpAfter'] = (scheduledPickUpAfter as any instanceof Date) ?
                    (scheduledPickUpAfter as any).toISOString() :
                    scheduledPickUpAfter;
            }

            if (currentShipmentStatus !== undefined) {
                localVarQueryParameter['currentShipmentStatus'] = currentShipmentStatus;
            }

            if (vendorShipmentIdentifier !== undefined) {
                localVarQueryParameter['vendorShipmentIdentifier'] = vendorShipmentIdentifier;
            }

            if (buyerReferenceNumber !== undefined) {
                localVarQueryParameter['buyerReferenceNumber'] = buyerReferenceNumber;
            }

            if (buyerWarehouseCode !== undefined) {
                localVarQueryParameter['buyerWarehouseCode'] = buyerWarehouseCode;
            }

            if (sellerWarehouseCode !== undefined) {
                localVarQueryParameter['sellerWarehouseCode'] = sellerWarehouseCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShipmentConfirmationsRequest} body A request to submit shipment confirmation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations: async (body: SubmitShipmentConfirmationsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShipmentConfirmations', 'body', body)
            const localVarPath = `/vendor/shipping/v1/shipmentConfirmations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShipments} body A request to submit shipment request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipments: async (body: SubmitShipments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShipments', 'body', body)
            const localVarPath = `/vendor/shipping/v1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorShippingApi - functional programming interface
 * @export
 */
export const VendorShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [limit] The limit to the number of records returned. Default value is 50 records.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more shipments than the specified result size limit.
         * @param {string} [createdAfter] Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [createdBefore] Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentConfirmedBefore] Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentConfirmedAfter] Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [packageLabelCreatedBefore] Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [packageLabelCreatedAfter] Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shippedBefore] Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shippedAfter] Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [estimatedDeliveryBefore] Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [estimatedDeliveryAfter] Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentDeliveryBefore] Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [shipmentDeliveryAfter] Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [requestedPickUpBefore] Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [requestedPickUpAfter] Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [scheduledPickUpBefore] Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [scheduledPickUpAfter] Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
         * @param {string} [currentShipmentStatus] Get Shipment Details by passing Current shipment status.
         * @param {string} [vendorShipmentIdentifier] Get Shipment Details by passing Vendor Shipment ID
         * @param {string} [buyerReferenceNumber] Get Shipment Details by passing buyer Reference ID
         * @param {string} [buyerWarehouseCode] Get Shipping Details based on buyer warehouse code. This value should be same as \&#39;shipToParty.partyId\&#39; in the Shipment.
         * @param {string} [sellerWarehouseCode] Get Shipping Details based on vendor warehouse code. This value should be same as \&#39;sellingParty.partyId\&#39; in the Shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentDetails(limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, createdAfter?: string, createdBefore?: string, shipmentConfirmedBefore?: string, shipmentConfirmedAfter?: string, packageLabelCreatedBefore?: string, packageLabelCreatedAfter?: string, shippedBefore?: string, shippedAfter?: string, estimatedDeliveryBefore?: string, estimatedDeliveryAfter?: string, shipmentDeliveryBefore?: string, shipmentDeliveryAfter?: string, requestedPickUpBefore?: string, requestedPickUpAfter?: string, scheduledPickUpBefore?: string, scheduledPickUpAfter?: string, currentShipmentStatus?: string, vendorShipmentIdentifier?: string, buyerReferenceNumber?: string, buyerWarehouseCode?: string, sellerWarehouseCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipmentDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentDetails(limit, sortOrder, nextToken, createdAfter, createdBefore, shipmentConfirmedBefore, shipmentConfirmedAfter, packageLabelCreatedBefore, packageLabelCreatedAfter, shippedBefore, shippedAfter, estimatedDeliveryBefore, estimatedDeliveryAfter, shipmentDeliveryBefore, shipmentDeliveryAfter, requestedPickUpBefore, requestedPickUpAfter, scheduledPickUpBefore, scheduledPickUpAfter, currentShipmentStatus, vendorShipmentIdentifier, buyerReferenceNumber, buyerWarehouseCode, sellerWarehouseCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShipmentConfirmationsRequest} body A request to submit shipment confirmation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShipmentConfirmations(body: SubmitShipmentConfirmationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShipmentConfirmationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShipmentConfirmations(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShipments} body A request to submit shipment request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShipments(body: SubmitShipments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShipmentConfirmationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShipments(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorShippingApi - factory interface
 * @export
 */
export const VendorShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorShippingApiFp(configuration)
    return {
        /**
         * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorShippingApiGetShipmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDetails(requestParameters: VendorShippingApiGetShipmentDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetShipmentDetailsResponse> {
            return localVarFp.getShipmentDetails(requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipmentConfirmedBefore, requestParameters.shipmentConfirmedAfter, requestParameters.packageLabelCreatedBefore, requestParameters.packageLabelCreatedAfter, requestParameters.shippedBefore, requestParameters.shippedAfter, requestParameters.estimatedDeliveryBefore, requestParameters.estimatedDeliveryAfter, requestParameters.shipmentDeliveryBefore, requestParameters.shipmentDeliveryAfter, requestParameters.requestedPickUpBefore, requestParameters.requestedPickUpAfter, requestParameters.scheduledPickUpBefore, requestParameters.scheduledPickUpAfter, requestParameters.currentShipmentStatus, requestParameters.vendorShipmentIdentifier, requestParameters.buyerReferenceNumber, requestParameters.buyerWarehouseCode, requestParameters.sellerWarehouseCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorShippingApiSubmitShipmentConfirmationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations(requestParameters: VendorShippingApiSubmitShipmentConfirmationsRequest, options?: AxiosRequestConfig): AxiosPromise<SubmitShipmentConfirmationsResponse> {
            return localVarFp.submitShipmentConfirmations(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {VendorShippingApiSubmitShipmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipments(requestParameters: VendorShippingApiSubmitShipmentsRequest, options?: AxiosRequestConfig): AxiosPromise<SubmitShipmentConfirmationsResponse> {
            return localVarFp.submitShipments(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getShipmentDetails operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiGetShipmentDetailsRequest
 */
export interface VendorShippingApiGetShipmentDetailsRequest {
    /**
     * The limit to the number of records returned. Default value is 50 records.
     * @type {number}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly limit?: number

    /**
     * Sort in ascending or descending order by purchase order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more shipments than the specified result size limit.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly nextToken?: string

    /**
     * Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly createdAfter?: string

    /**
     * Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly createdBefore?: string

    /**
     * Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shipmentConfirmedBefore?: string

    /**
     * Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shipmentConfirmedAfter?: string

    /**
     * Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly packageLabelCreatedBefore?: string

    /**
     * Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly packageLabelCreatedAfter?: string

    /**
     * Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shippedBefore?: string

    /**
     * Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shippedAfter?: string

    /**
     * Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly estimatedDeliveryBefore?: string

    /**
     * Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly estimatedDeliveryAfter?: string

    /**
     * Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shipmentDeliveryBefore?: string

    /**
     * Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly shipmentDeliveryAfter?: string

    /**
     * Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly requestedPickUpBefore?: string

    /**
     * Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly requestedPickUpAfter?: string

    /**
     * Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly scheduledPickUpBefore?: string

    /**
     * Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;\&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601\&#39;&gt;ISO 8601&lt;/a&gt; format.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly scheduledPickUpAfter?: string

    /**
     * Get Shipment Details by passing Current shipment status.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly currentShipmentStatus?: string

    /**
     * Get Shipment Details by passing Vendor Shipment ID
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly vendorShipmentIdentifier?: string

    /**
     * Get Shipment Details by passing buyer Reference ID
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly buyerReferenceNumber?: string

    /**
     * Get Shipping Details based on buyer warehouse code. This value should be same as \&#39;shipToParty.partyId\&#39; in the Shipment.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly buyerWarehouseCode?: string

    /**
     * Get Shipping Details based on vendor warehouse code. This value should be same as \&#39;sellingParty.partyId\&#39; in the Shipment.
     * @type {string}
     * @memberof VendorShippingApiGetShipmentDetails
     */
    readonly sellerWarehouseCode?: string
}

/**
 * Request parameters for submitShipmentConfirmations operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiSubmitShipmentConfirmationsRequest
 */
export interface VendorShippingApiSubmitShipmentConfirmationsRequest {
    /**
     * A request to submit shipment confirmation.
     * @type {SubmitShipmentConfirmationsRequest}
     * @memberof VendorShippingApiSubmitShipmentConfirmations
     */
    readonly body: SubmitShipmentConfirmationsRequest
}

/**
 * Request parameters for submitShipments operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiSubmitShipmentsRequest
 */
export interface VendorShippingApiSubmitShipmentsRequest {
    /**
     * A request to submit shipment request.
     * @type {SubmitShipments}
     * @memberof VendorShippingApiSubmitShipments
     */
    readonly body: SubmitShipments
}

/**
 * VendorShippingApi - object-oriented interface
 * @export
 * @class VendorShippingApi
 * @extends {BaseAPI}
 */
export class VendorShippingApi extends BaseAPI {
    /**
     * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingApiGetShipmentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public getShipmentDetails(requestParameters: VendorShippingApiGetShipmentDetailsRequest = {}, options?: AxiosRequestConfig) {
        return VendorShippingApiFp(this.configuration).getShipmentDetails(requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipmentConfirmedBefore, requestParameters.shipmentConfirmedAfter, requestParameters.packageLabelCreatedBefore, requestParameters.packageLabelCreatedAfter, requestParameters.shippedBefore, requestParameters.shippedAfter, requestParameters.estimatedDeliveryBefore, requestParameters.estimatedDeliveryAfter, requestParameters.shipmentDeliveryBefore, requestParameters.shipmentDeliveryAfter, requestParameters.requestedPickUpBefore, requestParameters.requestedPickUpAfter, requestParameters.scheduledPickUpBefore, requestParameters.scheduledPickUpAfter, requestParameters.currentShipmentStatus, requestParameters.vendorShipmentIdentifier, requestParameters.buyerReferenceNumber, requestParameters.buyerWarehouseCode, requestParameters.sellerWarehouseCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingApiSubmitShipmentConfirmationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public submitShipmentConfirmations(requestParameters: VendorShippingApiSubmitShipmentConfirmationsRequest, options?: AxiosRequestConfig) {
        return VendorShippingApiFp(this.configuration).submitShipmentConfirmations(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingApiSubmitShipmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public submitShipments(requestParameters: VendorShippingApiSubmitShipmentsRequest, options?: AxiosRequestConfig) {
        return VendorShippingApiFp(this.configuration).submitShipments(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
