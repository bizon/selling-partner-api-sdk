/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddAppointmentRequest } from '../models';
// @ts-ignore
import type { AssignAppointmentResourcesRequest } from '../models';
// @ts-ignore
import type { AssignAppointmentResourcesResponse } from '../models';
// @ts-ignore
import type { CancelReservationResponse } from '../models';
// @ts-ignore
import type { CancelServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import type { CompleteServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import type { CreateReservationRequest } from '../models';
// @ts-ignore
import type { CreateReservationResponse } from '../models';
// @ts-ignore
import type { CreateServiceDocumentUploadDestination } from '../models';
// @ts-ignore
import type { FixedSlotCapacity } from '../models';
// @ts-ignore
import type { FixedSlotCapacityErrors } from '../models';
// @ts-ignore
import type { FixedSlotCapacityQuery } from '../models';
// @ts-ignore
import type { GetAppointmentSlotsResponse } from '../models';
// @ts-ignore
import type { GetServiceJobByServiceJobIdResponse } from '../models';
// @ts-ignore
import type { GetServiceJobsResponse } from '../models';
// @ts-ignore
import type { RangeSlotCapacity } from '../models';
// @ts-ignore
import type { RangeSlotCapacityErrors } from '../models';
// @ts-ignore
import type { RangeSlotCapacityQuery } from '../models';
// @ts-ignore
import type { RescheduleAppointmentRequest } from '../models';
// @ts-ignore
import type { ServiceUploadDocument } from '../models';
// @ts-ignore
import type { SetAppointmentFulfillmentDataRequest } from '../models';
// @ts-ignore
import type { SetAppointmentResponse } from '../models';
// @ts-ignore
import type { UpdateReservationRequest } from '../models';
// @ts-ignore
import type { UpdateReservationResponse } from '../models';
// @ts-ignore
import type { UpdateScheduleRequest } from '../models';
// @ts-ignore
import type { UpdateScheduleResponse } from '../models';
/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, body: AddAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources: async (serviceJobId: string, appointmentId: string, body: AssignAppointmentResourcesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('assignAppointmentResources', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('assignAppointmentResources', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('assignAppointmentResources', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation: async (reservationId: string, marketplaceIds: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('cancelReservation', 'reservationId', reservationId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('cancelReservation', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId: async (serviceJobId: string, cancellationReasonCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'cancellationReasonCode' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'cancellationReasonCode', cancellationReasonCode)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/cancellations`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cancellationReasonCode !== undefined) {
                localVarQueryParameter['cancellationReasonCode'] = cancellationReasonCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId: async (serviceJobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('completeServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/completions`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (marketplaceIds: Array<string>, body: CreateReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createReservation', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createReservation', 'body', body)
            const localVarPath = `/service/v1/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination: async (body: ServiceUploadDocument, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createServiceDocumentUploadDestination', 'body', body)
            const localVarPath = `/service/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots: async (asin: string, storeId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getAppointmentSlots', 'asin', asin)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getAppointmentSlots', 'storeId', storeId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getAppointmentSlots', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/appointmentSlots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId: async (serviceJobId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('getAppointmmentSlotsByJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getAppointmmentSlotsByJobId', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointmentSlots`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity: async (resourceId: string, marketplaceIds: Array<string>, body: FixedSlotCapacityQuery, nextPageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/fixed`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity: async (resourceId: string, marketplaceIds: Array<string>, body: RangeSlotCapacityQuery, nextPageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/range`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId: async (serviceJobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('getServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<GetServiceJobsServiceJobStatusEnum>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {GetServiceJobsSortFieldEnum} [sortField] Sort fields on which you want to sort the output.
         * @param {GetServiceJobsSortOrderEnum} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs: async (marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<GetServiceJobsServiceJobStatusEnum>, pageToken?: string, pageSize?: number, sortField?: GetServiceJobsSortFieldEnum, sortOrder?: GetServiceJobsSortOrderEnum, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, asins?: Array<string>, requiredSkills?: Array<string>, storeIds?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getServiceJobs', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/serviceJobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceOrderIds) {
                localVarQueryParameter['serviceOrderIds'] = serviceOrderIds.join(COLLECTION_FORMATS.csv);
            }

            if (serviceJobStatus) {
                localVarQueryParameter['serviceJobStatus'] = serviceJobStatus.join(COLLECTION_FORMATS.csv);
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = createdBefore;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = lastUpdatedBefore;
            }

            if (scheduleStartDate !== undefined) {
                localVarQueryParameter['scheduleStartDate'] = scheduleStartDate;
            }

            if (scheduleEndDate !== undefined) {
                localVarQueryParameter['scheduleEndDate'] = scheduleEndDate;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (asins) {
                localVarQueryParameter['asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (requiredSkills) {
                localVarQueryParameter['requiredSkills'] = requiredSkills.join(COLLECTION_FORMATS.csv);
            }

            if (storeIds) {
                localVarQueryParameter['storeIds'] = storeIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData: async (serviceJobId: string, appointmentId: string, body: SetAppointmentFulfillmentDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (reservationId: string, marketplaceIds: Array<string>, body: UpdateReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation', 'reservationId', reservationId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('updateReservation', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateReservation', 'body', body)
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (resourceId: string, marketplaceIds: Array<string>, body: UpdateScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateSchedule', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('updateSchedule', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateSchedule', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/schedules`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppointmentForServiceJobByServiceJobId(serviceJobId: string, body: AddAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.addAppointmentForServiceJobByServiceJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAppointmentResources(serviceJobId: string, appointmentId: string, body: AssignAppointmentResourcesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignAppointmentResourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAppointmentResources(serviceJobId, appointmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.assignAppointmentResources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReservation(reservationId: string, marketplaceIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReservation(reservationId, marketplaceIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.cancelReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelServiceJobByServiceJobId(serviceJobId: string, cancellationReasonCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.cancelServiceJobByServiceJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeServiceJobByServiceJobId(serviceJobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeServiceJobByServiceJobId(serviceJobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.completeServiceJobByServiceJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(marketplaceIds: Array<string>, body: CreateReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(marketplaceIds, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.createReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceDocumentUploadDestination(body: ServiceUploadDocument, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateServiceDocumentUploadDestination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceDocumentUploadDestination(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.createServiceDocumentUploadDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentSlots(asin: string, storeId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getAppointmentSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmmentSlotsByJobId(serviceJobId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getAppointmmentSlotsByJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFixedSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: FixedSlotCapacityQuery, nextPageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FixedSlotCapacity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getFixedSlotCapacity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRangeSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: RangeSlotCapacityQuery, nextPageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RangeSlotCapacity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getRangeSlotCapacity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobByServiceJobId(serviceJobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobByServiceJobId(serviceJobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getServiceJobByServiceJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<GetServiceJobsServiceJobStatusEnum>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {GetServiceJobsSortFieldEnum} [sortField] Sort fields on which you want to sort the output.
         * @param {GetServiceJobsSortOrderEnum} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobs(marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<GetServiceJobsServiceJobStatusEnum>, pageToken?: string, pageSize?: number, sortField?: GetServiceJobsSortFieldEnum, sortOrder?: GetServiceJobsSortOrderEnum, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, asins?: Array<string>, requiredSkills?: Array<string>, storeIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.getServiceJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.rescheduleAppointmentForServiceJobByServiceJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAppointmentFulfillmentData(serviceJobId: string, appointmentId: string, body: SetAppointmentFulfillmentDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.setAppointmentFulfillmentData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(reservationId: string, marketplaceIds: Array<string>, body: UpdateReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(reservationId, marketplaceIds, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.updateReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(resourceId: string, marketplaceIds: Array<string>, body: UpdateScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(resourceId, marketplaceIds, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.updateSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceApiFp(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.addAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiAssignAppointmentResourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources(requestParameters: ServiceApiAssignAppointmentResourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssignAppointmentResourcesResponse> {
            return localVarFp.assignAppointmentResources(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiCancelReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation(requestParameters: ServiceApiCancelReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelReservationResponse> {
            return localVarFp.cancelReservation(requestParameters.reservationId, requestParameters.marketplaceIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiCancelServiceJobByServiceJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId(requestParameters: ServiceApiCancelServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelServiceJobByServiceJobIdResponse> {
            return localVarFp.cancelServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.cancellationReasonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiCompleteServiceJobByServiceJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId(requestParameters: ServiceApiCompleteServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompleteServiceJobByServiceJobIdResponse> {
            return localVarFp.completeServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiCreateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(requestParameters: ServiceApiCreateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateReservationResponse> {
            return localVarFp.createReservation(requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiCreateServiceDocumentUploadDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination(requestParameters: ServiceApiCreateServiceDocumentUploadDestinationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateServiceDocumentUploadDestination> {
            return localVarFp.createServiceDocumentUploadDestination(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetAppointmentSlotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots(requestParameters: ServiceApiGetAppointmentSlotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetAppointmentSlotsResponse> {
            return localVarFp.getAppointmentSlots(requestParameters.asin, requestParameters.storeId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetAppointmmentSlotsByJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId(requestParameters: ServiceApiGetAppointmmentSlotsByJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetAppointmentSlotsResponse> {
            return localVarFp.getAppointmmentSlotsByJobId(requestParameters.serviceJobId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetFixedSlotCapacityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity(requestParameters: ServiceApiGetFixedSlotCapacityRequest, options?: RawAxiosRequestConfig): AxiosPromise<FixedSlotCapacity> {
            return localVarFp.getFixedSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetRangeSlotCapacityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity(requestParameters: ServiceApiGetRangeSlotCapacityRequest, options?: RawAxiosRequestConfig): AxiosPromise<RangeSlotCapacity> {
            return localVarFp.getRangeSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetServiceJobByServiceJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId(requestParameters: ServiceApiGetServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetServiceJobByServiceJobIdResponse> {
            return localVarFp.getServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiGetServiceJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs(requestParameters: ServiceApiGetServiceJobsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetServiceJobsResponse> {
            return localVarFp.getServiceJobs(requestParameters.marketplaceIds, requestParameters.serviceOrderIds, requestParameters.serviceJobStatus, requestParameters.pageToken, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortOrder, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.scheduleStartDate, requestParameters.scheduleEndDate, requestParameters.asins, requestParameters.requiredSkills, requestParameters.storeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.rescheduleAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiSetAppointmentFulfillmentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData(requestParameters: ServiceApiSetAppointmentFulfillmentDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.setAppointmentFulfillmentData(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiUpdateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(requestParameters: ServiceApiUpdateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateReservationResponse> {
            return localVarFp.updateReservation(requestParameters.reservationId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceApiUpdateScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(requestParameters: ServiceApiUpdateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateScheduleResponse> {
            return localVarFp.updateSchedule(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * Add appointment operation input details.
     * @type {AddAppointmentRequest}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly body: AddAppointmentRequest
}

/**
 * Request parameters for assignAppointmentResources operation in ServiceApi.
 * @export
 * @interface ServiceApiAssignAppointmentResourcesRequest
 */
export interface ServiceApiAssignAppointmentResourcesRequest {
    /**
     * An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @type {string}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly serviceJobId: string

    /**
     * An Amazon-defined identifier of active service job appointment.
     * @type {string}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly appointmentId: string

    /**
     * 
     * @type {AssignAppointmentResourcesRequest}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly body: AssignAppointmentResourcesRequest
}

/**
 * Request parameters for cancelReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiCancelReservationRequest
 */
export interface ServiceApiCancelReservationRequest {
    /**
     * Reservation Identifier
     * @type {string}
     * @memberof ServiceApiCancelReservation
     */
    readonly reservationId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiCancelReservation
     */
    readonly marketplaceIds: Array<string>
}

/**
 * Request parameters for cancelServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCancelServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCancelServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * A cancel reason code that specifies the reason for cancelling a service job.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly cancellationReasonCode: string
}

/**
 * Request parameters for completeServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCompleteServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCompleteServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCompleteServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for createReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiCreateReservationRequest
 */
export interface ServiceApiCreateReservationRequest {
    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiCreateReservation
     */
    readonly marketplaceIds: Array<string>

    /**
     * Reservation details
     * @type {CreateReservationRequest}
     * @memberof ServiceApiCreateReservation
     */
    readonly body: CreateReservationRequest
}

/**
 * Request parameters for createServiceDocumentUploadDestination operation in ServiceApi.
 * @export
 * @interface ServiceApiCreateServiceDocumentUploadDestinationRequest
 */
export interface ServiceApiCreateServiceDocumentUploadDestinationRequest {
    /**
     * Upload document operation input details.
     * @type {ServiceUploadDocument}
     * @memberof ServiceApiCreateServiceDocumentUploadDestination
     */
    readonly body: ServiceUploadDocument
}

/**
 * Request parameters for getAppointmentSlots operation in ServiceApi.
 * @export
 * @interface ServiceApiGetAppointmentSlotsRequest
 */
export interface ServiceApiGetAppointmentSlotsRequest {
    /**
     * ASIN associated with the service.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly asin: string

    /**
     * Store identifier defining the region scope to retrive appointment slots.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly storeId: string

    /**
     * An identifier for the marketplace for which appointment slots are queried
     * @type {Array<string>}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly marketplaceIds: Array<string>

    /**
     * A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly startTime?: string

    /**
     * A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly endTime?: string
}

/**
 * Request parameters for getAppointmmentSlotsByJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiGetAppointmmentSlotsByJobIdRequest
 */
export interface ServiceApiGetAppointmmentSlotsByJobIdRequest {
    /**
     * A service job identifier to retrive appointment slots for associated service.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly serviceJobId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly marketplaceIds: Array<string>

    /**
     * A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly startTime?: string

    /**
     * A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly endTime?: string
}

/**
 * Request parameters for getFixedSlotCapacity operation in ServiceApi.
 * @export
 * @interface ServiceApiGetFixedSlotCapacityRequest
 */
export interface ServiceApiGetFixedSlotCapacityRequest {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly marketplaceIds: Array<string>

    /**
     * Request body.
     * @type {FixedSlotCapacityQuery}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly body: FixedSlotCapacityQuery

    /**
     * Next page token returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for getRangeSlotCapacity operation in ServiceApi.
 * @export
 * @interface ServiceApiGetRangeSlotCapacityRequest
 */
export interface ServiceApiGetRangeSlotCapacityRequest {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly marketplaceIds: Array<string>

    /**
     * Request body.
     * @type {RangeSlotCapacityQuery}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly body: RangeSlotCapacityQuery

    /**
     * Next page token returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for getServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobByServiceJobIdRequest
 */
export interface ServiceApiGetServiceJobByServiceJobIdRequest {
    /**
     * A service job identifier.
     * @type {string}
     * @memberof ServiceApiGetServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for getServiceJobs operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobsRequest
 */
export interface ServiceApiGetServiceJobsRequest {
    /**
     * Used to select jobs that were placed in the specified marketplaces.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly marketplaceIds: Array<string>

    /**
     * List of service order ids for the query you want to perform.Max values supported 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceOrderIds?: Array<string>

    /**
     * A list of one or more job status by which to filter the list of jobs.
     * @type {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceJobStatus?: Array<GetServiceJobsServiceJobStatusEnum>

    /**
     * String returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageToken?: string

    /**
     * A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
     * @type {number}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageSize?: number

    /**
     * Sort fields on which you want to sort the output.
     * @type {'JOB_DATE' | 'JOB_STATUS'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortField?: GetServiceJobsSortFieldEnum

    /**
     * Sort order for the query you want to perform.
     * @type {'ASC' | 'DESC'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortOrder?: GetServiceJobsSortOrderEnum

    /**
     * A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdAfter?: string

    /**
     * A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdBefore?: string

    /**
     * A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedAfter?: string

    /**
     * A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedBefore?: string

    /**
     * A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleStartDate?: string

    /**
     * A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleEndDate?: string

    /**
     * List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly asins?: Array<string>

    /**
     * A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly requiredSkills?: Array<string>

    /**
     * List of Amazon-defined identifiers for the region scope. Max values supported is 50.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly storeIds?: Array<string>
}

/**
 * Request parameters for rescheduleAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * An existing appointment identifier for the Service Job.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly appointmentId: string

    /**
     * Reschedule appointment operation input details.
     * @type {RescheduleAppointmentRequest}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly body: RescheduleAppointmentRequest
}

/**
 * Request parameters for setAppointmentFulfillmentData operation in ServiceApi.
 * @export
 * @interface ServiceApiSetAppointmentFulfillmentDataRequest
 */
export interface ServiceApiSetAppointmentFulfillmentDataRequest {
    /**
     * An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @type {string}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly serviceJobId: string

    /**
     * An Amazon-defined identifier of active service job appointment.
     * @type {string}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly appointmentId: string

    /**
     * Appointment fulfillment data collection details.
     * @type {SetAppointmentFulfillmentDataRequest}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly body: SetAppointmentFulfillmentDataRequest
}

/**
 * Request parameters for updateReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiUpdateReservationRequest
 */
export interface ServiceApiUpdateReservationRequest {
    /**
     * Reservation Identifier
     * @type {string}
     * @memberof ServiceApiUpdateReservation
     */
    readonly reservationId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiUpdateReservation
     */
    readonly marketplaceIds: Array<string>

    /**
     * Reservation details
     * @type {UpdateReservationRequest}
     * @memberof ServiceApiUpdateReservation
     */
    readonly body: UpdateReservationRequest
}

/**
 * Request parameters for updateSchedule operation in ServiceApi.
 * @export
 * @interface ServiceApiUpdateScheduleRequest
 */
export interface ServiceApiUpdateScheduleRequest {
    /**
     * Resource (store) Identifier
     * @type {string}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly marketplaceIds: Array<string>

    /**
     * Schedule details
     * @type {UpdateScheduleRequest}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly body: UpdateScheduleRequest
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public addAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).addAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAssignAppointmentResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public assignAppointmentResources(requestParameters: ServiceApiAssignAppointmentResourcesRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).assignAppointmentResources(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public cancelReservation(requestParameters: ServiceApiCancelReservationRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).cancelReservation(requestParameters.reservationId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public cancelServiceJobByServiceJobId(requestParameters: ServiceApiCancelServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).cancelServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.cancellationReasonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCompleteServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public completeServiceJobByServiceJobId(requestParameters: ServiceApiCompleteServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).completeServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public createReservation(requestParameters: ServiceApiCreateReservationRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).createReservation(requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateServiceDocumentUploadDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public createServiceDocumentUploadDestination(requestParameters: ServiceApiCreateServiceDocumentUploadDestinationRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).createServiceDocumentUploadDestination(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getAppointmentSlots(requestParameters: ServiceApiGetAppointmentSlotsRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getAppointmentSlots(requestParameters.asin, requestParameters.storeId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmmentSlotsByJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getAppointmmentSlotsByJobId(requestParameters: ServiceApiGetAppointmmentSlotsByJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getAppointmmentSlotsByJobId(requestParameters.serviceJobId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetFixedSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getFixedSlotCapacity(requestParameters: ServiceApiGetFixedSlotCapacityRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getFixedSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetRangeSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getRangeSlotCapacity(requestParameters: ServiceApiGetRangeSlotCapacityRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getRangeSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobByServiceJobId(requestParameters: ServiceApiGetServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobs(requestParameters: ServiceApiGetServiceJobsRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getServiceJobs(requestParameters.marketplaceIds, requestParameters.serviceOrderIds, requestParameters.serviceJobStatus, requestParameters.pageToken, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortOrder, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.scheduleStartDate, requestParameters.scheduleEndDate, requestParameters.asins, requestParameters.requiredSkills, requestParameters.storeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public rescheduleAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).rescheduleAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiSetAppointmentFulfillmentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public setAppointmentFulfillmentData(requestParameters: ServiceApiSetAppointmentFulfillmentDataRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).setAppointmentFulfillmentData(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public updateReservation(requestParameters: ServiceApiUpdateReservationRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).updateReservation(requestParameters.reservationId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public updateSchedule(requestParameters: ServiceApiUpdateScheduleRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).updateSchedule(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetServiceJobsServiceJobStatusEnum = {
    NotServiced: 'NOT_SERVICED',
    Cancelled: 'CANCELLED',
    Completed: 'COMPLETED',
    PendingSchedule: 'PENDING_SCHEDULE',
    NotFulfillable: 'NOT_FULFILLABLE',
    Hold: 'HOLD',
    PaymentDeclined: 'PAYMENT_DECLINED'
} as const;
export type GetServiceJobsServiceJobStatusEnum = typeof GetServiceJobsServiceJobStatusEnum[keyof typeof GetServiceJobsServiceJobStatusEnum];
/**
 * @export
 */
export const GetServiceJobsSortFieldEnum = {
    Date: 'JOB_DATE',
    Status: 'JOB_STATUS'
} as const;
export type GetServiceJobsSortFieldEnum = typeof GetServiceJobsSortFieldEnum[keyof typeof GetServiceJobsSortFieldEnum];
/**
 * @export
 */
export const GetServiceJobsSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetServiceJobsSortOrderEnum = typeof GetServiceJobsSortOrderEnum[keyof typeof GetServiceJobsSortOrderEnum];
